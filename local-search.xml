<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hgame2023-week2</title>
    <link href="/2023/01/19/hgame2023-week2/"/>
    <url>/2023/01/19/hgame2023-week2/</url>
    
    <content type="html"><![CDATA[<h1 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h1><p>反编译pyexe</p><p>在线反编译pyc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># visit https://tool.lu/pyc/ for more information</span><br><span class="hljs-comment"># Version: Python 3.10</span><br><br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">key</span>):<br>    s = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span><br>        tmp = s[i]<br>        s[i] = s[j]<br>        s[j] = tmp<br>    i = j = <span class="hljs-number">0</span><br>    data = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + s[i]) % <span class="hljs-number">256</span><br>        tmp = s[i]<br>        s[i] = s[j]<br>        s[j] = tmp<br>        data.append(s[(s[i] + s[j]) % <span class="hljs-number">256</span>])<br>    <span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">text, key</span>):<br>    result = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> c, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(text, gen(key)):<br>        result += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(c) ^ k)<br>    result = base64.b64encode(result.encode()).decode()<br>    <span class="hljs-keyword">return</span> result<br><br>text = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span>)<br>key = <span class="hljs-string">&#x27;As_we_do_as_you_know&#x27;</span><br>enc = encrypt(text, key)<br><span class="hljs-keyword">if</span> enc == <span class="hljs-string">&#x27;wr3ClVcSw7nCmMOcHcKgacOtMkvDjxZ6asKWw4nChMK8IsK7KMOOasOrdgbDlx3DqcKqwr0hw701Ly57w63CtcOl&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;yes!&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-literal">None</span>(<span class="hljs-string">&#x27;try again...&#x27;</span>)<br></code></pre></td></tr></table></figure><p>gen(key)不用看，直接跑就是，这题唯一坑了我的地方是base64加密encode函数的问题<br>encode函数是返回字符串，所以base64加密了这段字符串，导致长度更长了</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">key</span>):<br>    s = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span><br>        tmp = s[i]<br>        s[i] = s[j]<br>        s[j] = tmp<br>    i = j = <span class="hljs-number">0</span><br>    data = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + s[i]) % <span class="hljs-number">256</span><br>        tmp = s[i]<br>        s[i] = s[j]<br>        s[j] = tmp<br>        data.append(s[(s[i] + s[j]) % <span class="hljs-number">256</span>])<br>    <span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">text, key</span>):<br>    result = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> c, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(text, gen(key)):<br>        result += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(c) ^ k)<br>    result = base64.b64encode(result.encode()).decode()<br>    <span class="hljs-keyword">return</span> result<br><br>key = <span class="hljs-string">&#x27;As_we_do_as_you_know&#x27;</span><br><span class="hljs-built_in">print</span>(gen(key))<br>key2 = [<span class="hljs-number">213</span>, <span class="hljs-number">242</span>, <span class="hljs-number">54</span>, <span class="hljs-number">127</span>, <span class="hljs-number">156</span>, <span class="hljs-number">227</span>, <span class="hljs-number">172</span>, <span class="hljs-number">100</span>, <span class="hljs-number">212</span>, <span class="hljs-number">1</span>, <span class="hljs-number">130</span>, <span class="hljs-number">92</span>, <span class="hljs-number">20</span>, <span class="hljs-number">189</span>, <span class="hljs-number">115</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">228</span>, <span class="hljs-number">186</span>, <span class="hljs-number">225</span>, <span class="hljs-number">227</span>, <span class="hljs-number">75</span>, <span class="hljs-number">200</span>, <span class="hljs-number">119</span>, <span class="hljs-number">171</span>, <span class="hljs-number">11</span>, <span class="hljs-number">152</span>, <span class="hljs-number">15</span>, <span class="hljs-number">89</span>, <span class="hljs-number">160</span>, <span class="hljs-number">116</span>, <span class="hljs-number">157</span>, <span class="hljs-number">194</span>, <span class="hljs-number">226</span>, <span class="hljs-number">72</span>, <span class="hljs-number">147</span>, <span class="hljs-number">65</span>, <span class="hljs-number">74</span>, <span class="hljs-number">92</span>, <span class="hljs-number">21</span>, <span class="hljs-number">136</span>, <span class="hljs-number">193</span>, <span class="hljs-number">152</span>, <span class="hljs-number">94</span>, <span class="hljs-number">17</span>, <span class="hljs-number">178</span>, <span class="hljs-number">205</span>, <span class="hljs-number">195</span>, <span class="hljs-number">87</span>, <span class="hljs-number">145</span>]<br>enc = <span class="hljs-string">&#x27;wr3ClVcSw7nCmMOcHcKgacOtMkvDjxZ6asKWw4nChMK8IsK7KMOOasOrdgbDlx3DqcKqwr0hw701Ly57w63CtcOl&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(base64.b64decode(enc.encode()).decode()))<br>enc2 = [<span class="hljs-string">&#x27;½&#x27;</span>, <span class="hljs-string">&#x27;\x95&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;\x12&#x27;</span>, <span class="hljs-string">&#x27;ù&#x27;</span>, <span class="hljs-string">&#x27;\x98&#x27;</span>, <span class="hljs-string">&#x27;Ü&#x27;</span>, <span class="hljs-string">&#x27;\x1d&#x27;</span>, <span class="hljs-string">&#x27;\xa0&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;í&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;Ï&#x27;</span>, <span class="hljs-string">&#x27;\x16&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;\x96&#x27;</span>, <span class="hljs-string">&#x27;É&#x27;</span>, <span class="hljs-string">&#x27;\x84&#x27;</span>, <span class="hljs-string">&#x27;¼&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;»&#x27;</span>, <span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;Î&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;ë&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;\x06&#x27;</span>, <span class="hljs-string">&#x27;×&#x27;</span>, <span class="hljs-string">&#x27;\x1d&#x27;</span>, <span class="hljs-string">&#x27;é&#x27;</span>, <span class="hljs-string">&#x27;ª&#x27;</span>, <span class="hljs-string">&#x27;½&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>, <span class="hljs-string">&#x27;ý&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;í&#x27;</span>, <span class="hljs-string">&#x27;µ&#x27;</span>, <span class="hljs-string">&#x27;å&#x27;</span>]<br><span class="hljs-keyword">for</span> c, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(enc2, key2):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(c)^k),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="before-main"><a href="#before-main" class="headerlink" title="before main"></a>before main</h1><p>换表base64：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>enc = <span class="hljs-string">&#x27;AMHo7dLxUEabf6Z3PdWr6cOy75i4fdfeUzL17kaV7rG=&#x27;</span><br><br>model = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>  <span class="hljs-comment">#正常表</span><br><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;qaCpwYM2tO/RP0XeSZv8kLd6nfA7UHJ1No4gF5zr3VsBQbl9juhEGymc+WTxIiDK&#x27;</span>   <span class="hljs-comment">#被改变了的base64的表</span><br><span class="hljs-comment">#这段是排序归位</span><br>dnc = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    dnc += model[<span class="hljs-built_in">str</span>.find(enc[i])]<br><br><span class="hljs-built_in">print</span>(base64.b64decode(dnc).decode())<br></code></pre></td></tr></table></figure><h1 id="math"><a href="#math" class="headerlink" title="math"></a>math</h1><p>(谢谢Mr.fish)</p><p>z3梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>v10 = [<span class="hljs-number">0x0000007E</span>, <span class="hljs-number">0x000000E1</span>, <span class="hljs-number">0x0000003E</span>, <span class="hljs-number">0x00000028</span>, <span class="hljs-number">0x000000D8</span>,<br>       <span class="hljs-number">0x000000FD</span>, <span class="hljs-number">0x00000014</span>, <span class="hljs-number">0x0000007C</span>, <span class="hljs-number">0x000000E8</span>, <span class="hljs-number">0x0000007A</span>,<br>       <span class="hljs-number">0x0000003E</span>, <span class="hljs-number">0x00000017</span>, <span class="hljs-number">0x00000064</span>, <span class="hljs-number">0x000000A1</span>, <span class="hljs-number">0x00000024</span>,<br>       <span class="hljs-number">0x00000076</span>, <span class="hljs-number">0x00000015</span>, <span class="hljs-number">0x000000B8</span>, <span class="hljs-number">0x0000001A</span>, <span class="hljs-number">0x0000008E</span>,<br>       <span class="hljs-number">0x0000003B</span>, <span class="hljs-number">0x0000001F</span>, <span class="hljs-number">0x000000BA</span>, <span class="hljs-number">0x00000052</span>, <span class="hljs-number">0x0000004F</span>]<br>v12 = [<span class="hljs-number">0x0000F9FE</span>, <span class="hljs-number">0x00008157</span>, <span class="hljs-number">0x000108B2</span>, <span class="hljs-number">0x0000D605</span>, <span class="hljs-number">0x0000F21B</span>,<br>       <span class="hljs-number">0x00010FF3</span>, <span class="hljs-number">0x00009146</span>, <span class="hljs-number">0x00011212</span>, <span class="hljs-number">0x0000CF76</span>, <span class="hljs-number">0x00010C46</span>,<br>       <span class="hljs-number">0x0000F76B</span>, <span class="hljs-number">0x000077DF</span>, <span class="hljs-number">0x000103BE</span>, <span class="hljs-number">0x0000C6F8</span>, <span class="hljs-number">0x0000ED8A</span>,<br>       <span class="hljs-number">0x0000BE90</span>, <span class="hljs-number">0x000075EC</span>, <span class="hljs-number">0x0000EAC8</span>, <span class="hljs-number">0x0000AE37</span>, <span class="hljs-number">0x0000CC29</span>,<br>       <span class="hljs-number">0x0000A828</span>, <span class="hljs-number">0x00005C6C</span>, <span class="hljs-number">0x0000AB4A</span>, <span class="hljs-number">0x0000836E</span>, <span class="hljs-number">0x0000ACEE</span>]<br>s = Solver()<br><br>x = [Int(<span class="hljs-string">&#x27;x[%d]&#x27;</span> % i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">25</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        s.add(v12[i * <span class="hljs-number">5</span> + j] == (<br>                    x[i * <span class="hljs-number">5</span>] * v10[j] + x[i * <span class="hljs-number">5</span> + <span class="hljs-number">1</span>] * v10[<span class="hljs-number">1</span> * <span class="hljs-number">5</span> + j] + x[i * <span class="hljs-number">5</span> + <span class="hljs-number">2</span>] * v10[<span class="hljs-number">2</span> * <span class="hljs-number">5</span> + j] + x[i * <span class="hljs-number">5</span> + <span class="hljs-number">3</span>] *<br>                    v10[<span class="hljs-number">3</span> * <span class="hljs-number">5</span> + j] + x[i * <span class="hljs-number">5</span> + <span class="hljs-number">4</span>] * v10[<span class="hljs-number">4</span> * <span class="hljs-number">5</span> + j]))<br><br><span class="hljs-keyword">if</span> (s.check()):<br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> (s.check() == sat): <span class="hljs-comment">#万一多解</span><br>        condition = []<br>        m = s.model()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[%d]&quot;</span> % k)<br>        <span class="hljs-built_in">print</span>(m)<br>        k += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">25</span>):<br>            condition.append(x[i] != <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;%s&quot;</span> % (m[x[i]])))<br>        s.add(Or(condition))<br>x[<span class="hljs-number">6</span>] = <span class="hljs-number">121</span><br>x[<span class="hljs-number">3</span>] = <span class="hljs-number">109</span><br>x[<span class="hljs-number">5</span>] = <span class="hljs-number">123</span><br>x[<span class="hljs-number">4</span>] = <span class="hljs-number">101</span><br>x[<span class="hljs-number">12</span>] = <span class="hljs-number">64</span><br>x[<span class="hljs-number">13</span>] = <span class="hljs-number">116</span><br>x[<span class="hljs-number">23</span>] = <span class="hljs-number">125</span><br>x[<span class="hljs-number">1</span>] = <span class="hljs-number">103</span><br>x[<span class="hljs-number">11</span>] = <span class="hljs-number">109</span><br>x[<span class="hljs-number">10</span>] = <span class="hljs-number">95</span><br>x[<span class="hljs-number">15</span>] = <span class="hljs-number">95</span><br>x[<span class="hljs-number">19</span>] = <span class="hljs-number">103</span><br>x[<span class="hljs-number">0</span>] = <span class="hljs-number">104</span><br>x[<span class="hljs-number">16</span>] = <span class="hljs-number">49</span><br>x[<span class="hljs-number">9</span>] = <span class="hljs-number">114</span><br>x[<span class="hljs-number">14</span>] = <span class="hljs-number">104</span><br>x[<span class="hljs-number">17</span>] = <span class="hljs-number">115</span><br>x[<span class="hljs-number">22</span>] = <span class="hljs-number">100</span><br>x[<span class="hljs-number">24</span>] = <span class="hljs-number">0</span><br>x[<span class="hljs-number">21</span>] = <span class="hljs-number">48</span><br>x[<span class="hljs-number">8</span>] = <span class="hljs-number">117</span><br>x[<span class="hljs-number">2</span>] = <span class="hljs-number">97</span><br>x[<span class="hljs-number">7</span>] = <span class="hljs-number">48</span><br>x[<span class="hljs-number">18</span>] = <span class="hljs-number">95</span><br>x[<span class="hljs-number">20</span>] = <span class="hljs-number">79</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="VidarCamera"><a href="#VidarCamera" class="headerlink" title="VidarCamera"></a>VidarCamera</h1><p>通过XML找到关键类：com.example.android.camera2.basic.CameraActivity</p><p>再找到关键点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> m1onCreate$lambda0(EditText inputsomething, CameraActivity <span class="hljs-built_in">this</span>$<span class="hljs-number">0</span>, AlertDialog alertDialog, View view) &#123;<br>        Intrinsics.checkNotNullParameter(inputsomething, <span class="hljs-string">&quot;$inputsomething&quot;</span>);<br>        Intrinsics.checkNotNullParameter(<span class="hljs-built_in">this</span>$<span class="hljs-number">0</span>, <span class="hljs-string">&quot;this$0&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> inputsomething.getText().toString();<br>        <span class="hljs-keyword">if</span> (input.length() != <span class="hljs-number">40</span>) &#123;<br>            Toast.makeText(<span class="hljs-built_in">this</span>$<span class="hljs-number">0</span>, <span class="hljs-string">&quot;序列号不正确&quot;</span>, <span class="hljs-number">0</span>).show();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span>[] iArr = UIntArray.m167constructorimpl(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i += <span class="hljs-number">4</span>) &#123;<br>            UIntArray.m178setVXSXFK8(iArr, i / <span class="hljs-number">4</span>, UInt.m114constructorimpl(UInt.m114constructorimpl(UInt.m114constructorimpl(UInt.m114constructorimpl(input.charAt(i)) + UInt.m114constructorimpl(input.charAt(i + <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-string">&#x27;\b&#x27;</span>)) + UInt.m114constructorimpl(input.charAt(i + <span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-number">16</span>)) + UInt.m114constructorimpl(input.charAt(i + <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">24</span>)));<br>        &#125;<br>        <span class="hljs-type">int</span>[] iArr2 = <span class="hljs-built_in">this</span>$<span class="hljs-number">0.</span>m0encrypthkIa6DI(iArr);<br>        UInt[] uIntArr = &#123;UInt.m108boximpl(<span class="hljs-number">637666042</span>), UInt.m108boximpl(<span class="hljs-number">457511012</span>), UInt.m108boximpl(-<span class="hljs-number">2038734351</span>), UInt.m108boximpl(<span class="hljs-number">578827205</span>), UInt.m108boximpl(-<span class="hljs-number">245529892</span>), UInt.m108boximpl(-<span class="hljs-number">1652281167</span>), UInt.m108boximpl(<span class="hljs-number">435335655</span>), UInt.m108boximpl(<span class="hljs-number">733644188</span>), UInt.m108boximpl(<span class="hljs-number">705177885</span>), UInt.m108boximpl(-<span class="hljs-number">596608744</span>)&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> i2 + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (uIntArr[i2].m165unboximpl() != UIntArray.m173getpVg5ArA(iArr2, i2)) &#123;<br>                Toast.makeText(<span class="hljs-built_in">this</span>$<span class="hljs-number">0</span>, <span class="hljs-string">&quot;序列号不正确&quot;</span>, <span class="hljs-number">0</span>).show();<br>                <span class="hljs-keyword">return</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i3 &gt; <span class="hljs-number">9</span>) &#123;<br>                alertDialog.dismiss();<br>                <span class="hljs-keyword">return</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                i2 = i3;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>加密函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] m0encrypthkIa6DI(<span class="hljs-type">int</span>[] iArr) &#123;<br>        <span class="hljs-type">int</span> i;<br>        <span class="hljs-type">int</span>[] iArr2 = UIntArray.m167constructorimpl(<span class="hljs-number">4</span>);<br>        UIntArray.m178setVXSXFK8(iArr2, <span class="hljs-number">0</span>, <span class="hljs-number">2233</span>);<br>        UIntArray.m178setVXSXFK8(iArr2, <span class="hljs-number">1</span>, <span class="hljs-number">4455</span>);<br>        UIntArray.m178setVXSXFK8(iArr2, <span class="hljs-number">2</span>, <span class="hljs-number">6677</span>);<br>        UIntArray.m178setVXSXFK8(iArr2, <span class="hljs-number">3</span>, <span class="hljs-number">8899</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i2 &lt; <span class="hljs-number">9</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i4</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">do</span> &#123;<br>                i3++;<br>                i = i2 + <span class="hljs-number">1</span>;<br>                UIntArray.m178setVXSXFK8(iArr, i2, UInt.m114constructorimpl(UIntArray.m173getpVg5ArA(iArr, i2) + UInt.m114constructorimpl(UInt.m114constructorimpl(UInt.m114constructorimpl(UIntArray.m173getpVg5ArA(iArr2, UInt.m114constructorimpl(i4 &amp; <span class="hljs-number">3</span>)) + i4) ^ UInt.m114constructorimpl(UInt.m114constructorimpl(UInt.m114constructorimpl(UIntArray.m173getpVg5ArA(iArr, i) &lt;&lt; <span class="hljs-number">4</span>) ^ UInt.m114constructorimpl(UIntArray.m173getpVg5ArA(iArr, i) &gt;&gt;&gt; <span class="hljs-number">5</span>)) + UIntArray.m173getpVg5ArA(iArr, i))) ^ i4)));<br>                UIntArray.m178setVXSXFK8(iArr, i, UInt.m114constructorimpl(UIntArray.m173getpVg5ArA(iArr, i) + UInt.m114constructorimpl(UInt.m114constructorimpl(UInt.m114constructorimpl(UInt.m114constructorimpl(UIntArray.m173getpVg5ArA(iArr, i2) &lt;&lt; <span class="hljs-number">4</span>) ^ UInt.m114constructorimpl(UIntArray.m173getpVg5ArA(iArr, i2) &gt;&gt;&gt; <span class="hljs-number">5</span>)) + UIntArray.m173getpVg5ArA(iArr, i2)) ^ UInt.m114constructorimpl(UIntArray.m173getpVg5ArA(iArr2, UInt.m114constructorimpl(UInt.m114constructorimpl(i4 &gt;&gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>)) + i4))));<br>                i4 = UInt.m114constructorimpl(i4 + <span class="hljs-number">878077251</span>);<br>            &#125; <span class="hljs-keyword">while</span> (i3 &lt;= <span class="hljs-number">32</span>);<br>            i2 = i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> iArr;<br>    &#125;<br></code></pre></td></tr></table></figure><p>是魔改xtea</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decipher</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>])</span> </span>&#123;<br>    <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">2233</span>,<span class="hljs-number">4455</span>,<span class="hljs-number">6677</span>,<span class="hljs-number">8899</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], delta=<span class="hljs-number">878077251</span>, sum=delta*<span class="hljs-number">33</span>;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">33</span>; i++) &#123;<br>        sum -= delta;<br>        v1 -= (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>        v0 -= (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>]) ^ sum;<br>    &#125;<br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> enc[] = &#123;<span class="hljs-number">0x260202fa</span>,<span class="hljs-number">0x1b451064</span>,<span class="hljs-number">0x867b61f1</span>,<span class="hljs-number">0x228033c5</span>,<span class="hljs-number">0xf15d82dc</span>,<span class="hljs-number">0x9d8430b1</span>,<span class="hljs-number">0x19f2b1e7</span>,<span class="hljs-number">0x2bba859c</span>,<span class="hljs-number">0x2a08291d</span>,<span class="hljs-number">0xdc707918</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">8</span>; i &gt;=<span class="hljs-number">0</span> ; --i) &#123;<br>        <span class="hljs-built_in">decipher</span>(&amp;enc[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; ++j) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,enc[i]&amp;<span class="hljs-number">0xff</span>);<br>            enc[i] = enc[i] &gt;&gt; <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF write up</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
      <tag>hgame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见字节码</title>
    <link href="/2023/01/19/Python%E5%B8%B8%E8%A7%81%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <url>/2023/01/19/Python%E5%B8%B8%E8%A7%81%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Python字节码"><a href="#Python字节码" class="headerlink" title="Python字节码"></a>Python字节码</h1><p>虽然python作为解释型语言，但是其也不是直接对源码进行解释</p><p>python解释器会将源码处理成字节码后，再借助python解释器运行程序</p><div class="note note-info">            <p>通过python自带的dis包可以将目标函数转化为字节码</p>          </div><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> dis<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">x,y,z</span>):<br>    a = <span class="hljs-number">1</span><br>    a += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;aaa&quot;</span>)<br>    fun(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">return</span><br><br>dis.dis(fun)<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs tap"><span class="hljs-number"> 46 </span>         <span class="hljs-number"> 0 </span>LOAD_CONST              <span class="hljs-number"> 1 </span>(1)<br>             <span class="hljs-number"> 2 </span>STORE_FAST              <span class="hljs-number"> 3 </span>(a)<br><br><span class="hljs-number"> 47 </span>         <span class="hljs-number"> 4 </span>LOAD_FAST               <span class="hljs-number"> 3 </span>(a)<br>             <span class="hljs-number"> 6 </span>LOAD_CONST              <span class="hljs-number"> 1 </span>(1)<br>             <span class="hljs-number"> 8 </span>INPLACE_ADD<br>            <span class="hljs-number"> 10 </span>STORE_FAST              <span class="hljs-number"> 3 </span>(a)<br><br><span class="hljs-number"> 48 </span>        <span class="hljs-number"> 12 </span>LOAD_GLOBAL             <span class="hljs-number"> 0 </span>(print)<br>            <span class="hljs-number"> 14 </span>LOAD_CONST              <span class="hljs-number"> 2 </span>(&#x27;aaa&#x27;)<br>            <span class="hljs-number"> 16 </span>CALL_FUNCTION            1<br>            <span class="hljs-number"> 18 </span>POP_TOP<br><br><span class="hljs-number"> 49 </span>        <span class="hljs-number"> 20 </span>LOAD_GLOBAL             <span class="hljs-number"> 1 </span>(fun)<br>            <span class="hljs-number"> 22 </span>LOAD_CONST              <span class="hljs-number"> 1 </span>(1)<br>            <span class="hljs-number"> 24 </span>LOAD_CONST              <span class="hljs-number"> 3 </span>(2)<br>            <span class="hljs-number"> 26 </span>LOAD_CONST              <span class="hljs-number"> 4 </span>(3)<br>            <span class="hljs-number"> 28 </span>CALL_FUNCTION            3<br>            <span class="hljs-number"> 30 </span>POP_TOP<br><br><span class="hljs-number"> 50 </span>        <span class="hljs-number"> 32 </span>LOAD_CONST              <span class="hljs-number"> 0 </span>(None)<br>            <span class="hljs-number"> 34 </span>RETURN_VALUE<br><br>进程已结束,退出代码0<br></code></pre></td></tr></table></figure><h1 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h1><h2 id="一般指令与一元操作指令"><a href="#一般指令与一元操作指令" class="headerlink" title="一般指令与一元操作指令"></a>一般指令与一元操作指令</h2><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>NOP</td><td>无作用，用于占位</td></tr><tr><td>POP_TOP</td><td>弹出栈顶元素</td></tr><tr><td>LOAD_CONST</td><td>将读取的值推入栈</td></tr><tr><td>LOAD_GLOBAL</td><td>将全局变量压入栈</td></tr><tr><td>STORE_FAST</td><td>将栈顶指令存入对应的局部变量</td></tr><tr><td>COMPARE_OP</td><td>比较操作符</td></tr><tr><td>CALL_FUNCTION</td><td>调用函数</td></tr><tr><td>BUILD_SLICE</td><td>调用切片，跟的参数为切片的值的个数一般上到下为[Val1:Val2:Val3]</td></tr><tr><td>JUMP_ABSOLUTE</td><td>向下跳转几句操作符，变量为跳转偏移量</td></tr><tr><td>UNARY_POSITIVE</td><td>实现Val1 &#x3D; +Val1</td></tr><tr><td>UNARY_NEGATIVE</td><td>实现Val1 &#x3D; -Val1</td></tr><tr><td>UNARY_NOT</td><td>实现Val1 &#x3D; not Val1</td></tr><tr><td>UNARY_INVERT</td><td>实现Val1 &#x3D; ~Val1</td></tr><tr><td>FOR_ITER</td><td>for循环</td></tr><tr><td>GET_ITER</td><td>获取迭代器(一般后面跟循环)</td></tr><tr><td>GET_YIELD_FROM_ITER</td><td>获取yield生成器</td></tr></tbody></table><h2 id="二元操作指令"><a href="#二元操作指令" class="headerlink" title="二元操作指令"></a>二元操作指令</h2><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>BINARY_POWER</td><td>乘方，栈顶为指数</td></tr><tr><td>BINARY_MULTIPLY</td><td>乘法</td></tr><tr><td>BINARY_MATRIX_MULTIPLY</td><td>矩阵乘法，3.5引入的新功能</td></tr><tr><td>BINARY_FLOOR_DIVIDE</td><td>除法，向下取整</td></tr><tr><td>BINARY_TRUE_DIVIDE</td><td>除法</td></tr><tr><td>BINARY_MODULO</td><td>取余</td></tr><tr><td>BINARY_ADD</td><td>加法</td></tr><tr><td>BINARY_SUBTRACT</td><td>减法</td></tr><tr><td>BINARY_SUBSCR</td><td>数组取下标，栈顶为下标</td></tr><tr><td>BINARY_LSHIFT</td><td>左移操作符</td></tr><tr><td>BINARY_RSHIFT</td><td>右移操作符(除二向下取整)</td></tr><tr><td>BINARY_AND</td><td>按位与</td></tr><tr><td>BINARY_XOR</td><td>异或</td></tr><tr><td>BINARY_OR</td><td>按位或</td></tr><tr><td>STORE_SUBSCR</td><td>列表下标存储，如Val1[Val2] &#x3D; Val3</td></tr><tr><td>DELETE_SUBSCR</td><td>列表下标存储，如del Val1[Val2]</td></tr></tbody></table><ul><li><p>自身操作指令，类似<code>b += 1</code>，就是上面有BINARY的指令将BINARY改为INPLACE</p><div class="note note-info">            <p>其他指令见<a href="https://docs.python.org/zh-cn/3.6/library/dis.html#python-bytecode-instructions">官方文档</a></p>          </div></li></ul>]]></content>
    
    
    <categories>
      
      <category>语言知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HGAME 2023 week1 wp</title>
    <link href="/2023/01/14/hgame2023-week1/"/>
    <url>/2023/01/14/hgame2023-week1/</url>
    
    <content type="html"><![CDATA[<h1 id="test-your-IDA"><a href="#test-your-IDA" class="headerlink" title="test_your_IDA"></a>test_your_IDA</h1><p>打开就能看到</p><p>hgame{te5t_y0ur_IDA}</p><h1 id="easyenc"><a href="#easyenc" class="headerlink" title="easyenc"></a>easyenc</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">v8 = [<span class="hljs-number">0</span>] * <span class="hljs-number">10</span><br>v8[<span class="hljs-number">0</span>] = <span class="hljs-number">0x9FDFF04</span><br>v8[<span class="hljs-number">1</span>] = <span class="hljs-number">0xB0F301</span><br>v8[<span class="hljs-number">2</span>] = <span class="hljs-number">0xADF00500</span><br>v8[<span class="hljs-number">3</span>] = <span class="hljs-number">0x5170607</span><br>v8[<span class="hljs-number">4</span>] = <span class="hljs-number">0x17FD17EB</span><br>v8[<span class="hljs-number">5</span>] = <span class="hljs-number">0x1EE01EA</span><br>v8[<span class="hljs-number">6</span>] = <span class="hljs-number">0xFA05B1EA</span><br>v8[<span class="hljs-number">7</span>] = <span class="hljs-number">0xAC170108</span><br>v8[<span class="hljs-number">8</span>] = <span class="hljs-number">0xFDEA01EC</span><br>v8[<span class="hljs-number">9</span>] = <span class="hljs-number">0x60705F0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(v8[i] &amp; <span class="hljs-number">0xff</span>), end=<span class="hljs-string">&#x27;,&#x27;</span>)<br>        v8[i] = v8[i] &gt;&gt; <span class="hljs-number">8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(-<span class="hljs-number">7</span> &amp; <span class="hljs-number">0xff</span>))<br><br>enc = [<span class="hljs-number">0x4</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0x6</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x17</span>,<br>       <span class="hljs-number">0xea</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0x8</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0x6</span>,<br>       <span class="hljs-number">0xf9</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(((i + <span class="hljs-number">86</span>) &amp; <span class="hljs-number">0xff</span>) ^ <span class="hljs-number">0x32</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>hgame{4ddit1on_is_a_rever5ible_0peration}</p><h1 id="a-cup-of-tea"><a href="#a-cup-of-tea" class="headerlink" title="a_cup_of_tea"></a>a_cup_of_tea</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>* EntryData)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Mup = EntryData[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Mdown = EntryData[<span class="hljs-number">1</span>];<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> delta = <span class="hljs-number">0x543210DD</span>;<br>    <span class="hljs-type">int</span> n=<span class="hljs-number">32</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        sum -= delta;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        Mdown -= ((Mup + <span class="hljs-number">0x3456789</span>) &lt;&lt; <span class="hljs-number">4</span>) ^ (Mup + sum) ^ ((Mup &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x45678901</span>);<br>        Mup -= ((Mdown &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">0x12345678</span>) ^ (Mdown + sum) ^ ((Mdown &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x23456789</span>);<br>        sum += delta;<br>    &#125;<br>    EntryData[<span class="hljs-number">0</span>] = Mup;<br>    EntryData[<span class="hljs-number">1</span>] = Mdown;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Buf2[<span class="hljs-number">8</span>];<br>    Buf2[<span class="hljs-number">0</span>] = <span class="hljs-number">0x2E63829D</span>;<br>    Buf2[<span class="hljs-number">1</span>] = <span class="hljs-number">0xC14E400F</span>;<br>    Buf2[<span class="hljs-number">2</span>] = <span class="hljs-number">0x73495F40</span>;<br>    Buf2[<span class="hljs-number">3</span>] = <span class="hljs-number">0x765F345F</span>;<br>    Buf2[<span class="hljs-number">4</span>] = <span class="hljs-number">0x5F797265</span>;<br>    Buf2[<span class="hljs-number">5</span>] = <span class="hljs-number">0x6C613368</span>;<br>    Buf2[<span class="hljs-number">6</span>] = <span class="hljs-number">0x5F796874</span>;<br>    Buf2[<span class="hljs-number">7</span>] = <span class="hljs-number">0x6E317264</span>;<br>    <span class="hljs-built_in">decrypt</span>(&amp;Buf2[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; ++j) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-type">char</span>)(Buf2[i]&amp;<span class="hljs-number">0xff</span>));<br>            Buf2[i] &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br>    std::cout&lt;&lt;(<span class="hljs-type">char</span>)<span class="hljs-number">0x6B</span>&lt;&lt;(<span class="hljs-type">char</span>)<span class="hljs-number">0x7</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>hgame{Te@_Is_4_very_h3althy_dr1nk}</p><p>乐死，和我犯一样的错</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> flag[] = &#123;<br>        <span class="hljs-number">0x2E63829D</span>, <span class="hljs-number">0xC14E400F</span>, <span class="hljs-number">0x9B39BFB9</span>, <span class="hljs-number">0x5A1F8B14</span>,<br>        <span class="hljs-number">0x61886DDE</span>, <span class="hljs-number">0x6565C6CF</span>, <span class="hljs-number">0x9F064F64</span>, <span class="hljs-number">0x236A43F6</span><br>    &#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">4</span>; x++) &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> x1 = flag[<span class="hljs-number">2</span>*x];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> x2 = flag[<span class="hljs-number">2</span>*x+<span class="hljs-number">1</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> v4 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) v4 -= <span class="hljs-number">0x543210DD</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        x2 -= (v4 + x1) ^ ((x1 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x45678901</span>) ^ (<span class="hljs-number">16</span> * (x1 + <span class="hljs-number">0x3456789</span>));<br>        x1 -= (v4 + x2) ^ (<span class="hljs-number">16</span> * x2 + <span class="hljs-number">0x12345678</span>) ^ ((x2 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x23456789</span>);<br>        v4 += <span class="hljs-number">0x543210DD</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, x1&amp;<span class="hljs-number">0xff</span>);<br>        x1 = x1 &gt;&gt; <span class="hljs-number">8</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, x2&amp;<span class="hljs-number">0xff</span>);<br>        x2 = x2 &gt;&gt; <span class="hljs-number">8</span>;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c%c&quot;</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x7D</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>hgame{Tea_15_4_v3ry_h3a1thy_drlnk}</p><h1 id="easyasm"><a href="#easyasm" class="headerlink" title="easyasm"></a>easyasm</h1><p>hgame{welc0me_t0_re_wor1d!}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = [<span class="hljs-number">0x5b</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x56</span>,<br>       <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x4e</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i ^ <span class="hljs-number">0x33</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="encode"><a href="#encode" class="headerlink" title="encode"></a>encode</h1><p>hgame{encode_is_easy_for_a_reverse_engineer}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = [<span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000D</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000B</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000E</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000E</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000E</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x0000000D</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>,<span class="hljs-number">2</span>):<br>    a = enc[i] | enc[i+<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">4</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(a),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF write up</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
      <tag>hgame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gcc编译</title>
    <link href="/2023/01/14/gcc%E7%BC%96%E8%AF%91/"/>
    <url>/2023/01/14/gcc%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<p>GNU CC(简称gcc)是GNU项目中符合ANSI C标准的编译系统，能够编译用C、C++、Object C、Jave等多种语言编写的程序。gcc又可以作为交叉编译工具，它能够在当前CPU平台上为多种不同体系结构的硬件平台开发软件，非常适合在嵌入式领域的开发编译，如常用的arm-linux-gcc交叉编译工具</p><p>通常后跟一些选项和文件名来使用 GCC 编译器。gcc 命令的基本用法如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">gcc <span class="hljs-selector-attr">[options]</span> <span class="hljs-selector-attr">[filenames]</span><br><br>选项指定编译器怎样进行编译。<br></code></pre></td></tr></table></figure><h1 id="gcc-编译流程"><a href="#gcc-编译流程" class="headerlink" title="gcc 编译流程"></a>gcc 编译流程</h1><h2 id="预处理-Pre-Processing"><a href="#预处理-Pre-Processing" class="headerlink" title="预处理-Pre-Processing"></a>预处理-Pre-Processing</h2><p>gcc -E test.c -o test.i &#x2F;&#x2F;.i文件</p><h2 id="编译-Compiling"><a href="#编译-Compiling" class="headerlink" title="编译-Compiling"></a>编译-Compiling</h2><p>gcc -S test.i -o test.s &#x2F;&#x2F;.s文件</p><h2 id="汇编-Assembling-x2F-x2F-o文件"><a href="#汇编-Assembling-x2F-x2F-o文件" class="headerlink" title="汇编-Assembling &#x2F;&#x2F;.o文件"></a>汇编-Assembling &#x2F;&#x2F;.o文件</h2><p>gcc -c test.s -o test.o</p><h2 id="链接-Linking-x2F-x2F-bin文件"><a href="#链接-Linking-x2F-x2F-bin文件" class="headerlink" title="链接-Linking &#x2F;&#x2F;bin文件"></a>链接-Linking &#x2F;&#x2F;bin文件</h2><p>gcc test.o -o test</p><h1 id="gcc工程惯用"><a href="#gcc工程惯用" class="headerlink" title="gcc工程惯用"></a>gcc工程惯用</h1><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>gcc -c test.c &#x2F;&#x2F;.o文件，汇编</p><p>gcc -o test test.c &#x2F;&#x2F;bin可执行文件</p><p>gcc test.c &#x2F;&#x2F;a.out可执行文件</p><p>如果是c++ 直接将gcc改为g++即可。</p><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><p>1）-E参数 选项指示编译器仅对输入文件进行预处理。当这个选项被使用时, 预处理器的输出被送到标准输出而不是储存在文件里.</p><p>2）-S参数 编译选项告诉 GCC 在为 C 代码产生了汇编语言文件后停止编译。 GCC 产生的汇编语言文件的缺省扩展名是 .s 。<br>注：该编译后的文件没有符号表.</p><p>3）-c参数 选项告诉 GCC 仅把源代码编译为目标代码。缺省时 GCC 建立的目标代码文件有一个 .o 的扩展名。</p><p>4）-o参数 编译选项来为将产生的可执行文件用指定的文件名。</p><p>5）-O参数 选项告诉 GCC 对源代码进行基本优化。这些优化在大多数情况下都会使程序执行的更快。 -O2 选项告诉GCC 产生尽可能小和尽可能快的代码。 如-O2，-O3，-On（n 常为0—3）；-O 主要进行跳转和延迟退栈两种优化；-O2 除了完成-O1的优化之外，还进行一些额外的调整工作，如指令调整等。-O3 则包括循环展开和其他一些与处理特性相关的优化工作。选项将使编译的速度比使用 -O 时慢， 但通常产生的代码执行速度会更快。</p><p>如：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> test]<span class="hljs-meta"># gcc test.c -O3</span><br><br>[root<span class="hljs-symbol">@localhost</span> test]<span class="hljs-meta"># gcc -O3 test.c</span><br><br>[root<span class="hljs-symbol">@localhost</span> test]<span class="hljs-meta"># gcc -o tt test.c -O2</span><br><br>[root<span class="hljs-symbol">@localhost</span> test]<span class="hljs-meta"># gcc -O2 -o tt test.c</span><br></code></pre></td></tr></table></figure><p>6）调试选项-g和-pg<br>GCC 支持数种调试和剖析选项，常用到的是 -g 和 -pg 。<br>　-g 选项告诉 GCC 产生能被 GNU 调试器使用的调试信息以便调试你的程序。GCC 提供了一个很多其他 C 编译器里没有的特性, 在 GCC 里你能使-g 和 -O (产生优化代码)联用。</p><p>　-pg 选项告诉 GCC 在编译好的程序里加入额外的代码。运行程序时, 产生 gprof 用的剖析信息以显示你的程序的耗时情况。</p><p>7） -l参数和-L参数<br>-l参数就是用来指定程序要链接的库，-l参数紧接着就是库名，那么库名跟真正的库文件名有什么关系呢？就拿数学库来说，他的库名是m，他的库文件名是libm.so，很容易看出，把库文件名的头lib和尾.so去掉就是库名了。</p><p>如：<br>gcc xxx.c -lm( 动态数学库) -lpthread</p><p>好了现在我们知道怎么得到库名了，比如我们自已要用到一个第三方提供的库名字叫libtest.so，那么我们只要把libtest.so拷贝到 &#x2F;usr&#x2F;lib里，编译时加上-ltest参数，我们就能用上libtest.so库了（当然要用libtest.so库里的函数，我们还需要与 libtest.so配套的头文件）。放在&#x2F;lib和&#x2F;usr&#x2F;lib和&#x2F;usr&#x2F;local&#x2F;lib里的库直接用-l参数就能链接了，但如果库文件没放在这三个目录里，而是放在其他目录里， 这时我们只用-l参数的话，链接还是会出错，出错信息大概是：“&#x2F;usr&#x2F;bin&#x2F;ld: cannot find-lxxx”，也就是链接 程序ld在那3个目录里找不到libxxx.so，这时另外一个参数-L就派上用场了，比如常用的X11的库<br>，它放在&#x2F;usr&#x2F;X11R6&#x2F;lib目录 下，我们编译时就要用-L&#x2F;usr&#x2F;X11R6&#x2F;lib -lX11参数，-L参数跟着的是库文件所在的目录名。再比如我们把libtest.so放在&#x2F;aaa&#x2F;bbb&#x2F;ccc目录下，那链接参数就是-L&#x2F;aaa&#x2F;bbb&#x2F;ccc -ltest</p><p>另外，大部分libxxxx.so只是一个链接，以RH9为例，比如libm.so它链接到&#x2F;lib&#x2F;libm.so.x，&#x2F;lib&#x2F;libm.so.6 又链接到&#x2F;lib&#x2F;libm-2.3.2.so，如果没有这样的链接，还是会出错，因为ld只会找libxxxx.so，所以如果你要用到xxxx库，而只有libxxxx.so.x或者libxxxx-x.x.x.so，做一个链接就可以了ln -s libxxxx-x.x.x.so libxxxx.so手工来写链接参数总是很麻烦的，还好很多库开发包提供了生成链接参数的程序，名字一般叫xxxx-config，一般放在&#x2F;usr&#x2F;bin目录下，比如 gtk1.2的链接参数生成程序是gtk-config，执行gtk-config —libs就能得到以下输出”-L&#x2F;usr&#x2F;lib -L&#x2F;usr&#x2F;X11R6&#x2F;lib -lgtk -lgdk -rdynamic -lgmodule -lglib -ldl -lXi -lXext -lX11 -lm”，这就是编译一个gtk1.2程序所需的gtk链接参数，xxx-config除了—libs参数外还有一个参数是—cflags用来生成头文件包含目录的，也就是-I参数，在下面我们将会讲到。你可以试试执行gtk-config —libs —cflags，看看输出结果。</p><p>现在的问题就是怎样用这些输出结果了，最笨的方法就是复制粘贴或者照抄，聪明的办法是在编译命令行里加入这个<code>xxxx-config --libs --cflags</code>，比如编译一个gtk程序：gcc gtktest.c <code>gtk-config --libs --cflags</code>这样差不多了。注意&#96;不是单引号，而是1键左边那个键。</p><p>除了xxx-config以外，现在新的开发包一般都用pkg-config来生成链接参数，使用方法跟xxx-config类似，但xxx-config是针对特定的开发包，但pkg-config包含很多开发包的链接参数的生成，用pkg-config —list-all命令可以列出所支持的所有开发包，pkg-config的用法就是pkg-config pagName —libs —cflags，其中pagName是包名，是pkg-config—list-all里列出名单中的一个，比如gtk1.2的名字就是gtk+， pkg-config gtk+ —libs —cflags的作用跟gtk-config —libs —cflags是一样的。比如：</p><p>gcc gtktest.c <code>pkg-config gtk+ --libs --cflags</code>。</p><p>8） -include和-I参数</p><p>-include用来包含头文件，但一般情况下包含头文件都在源码里用＃i nclude xxxxxx实现，-include参数很少用。-I参数是用来指定头文件目录，&#x2F;usr&#x2F;include目录一般是不用指定的，gcc知道去那里找，但 是如果头文件不在&#x2F;usr&#x2F;icnclude里我们就要用-I参数指定了，比如头文件放在&#x2F;myinclude目录里，那编译命令行就要加上-I&#x2F;myinclude参数了，如果不加你会得到一个”xxxx.h: No such file or directory”的错误。-I参数可以用相对路径，比如头文件在当前目录，可以用-I.来指定。上面我们提到的—cflags参数就是用来生成-I参数的。</p><p>9）-Wall、-w 和 -v参数<br>-Wall 打印出gcc提供的警告信息<br>-w 关闭所有警告信息<br>-v 列出所有编译步骤</p><p>\10) -m64 64位</p><p>\11) -shared 将-fPIC生成的位置无关的代码作为动态库，一般情况下，-fPIC和-shared都是一起使用的。生成SO文件，共享库<br>-static 此选项将禁止使用动态库，所以，编译出来的东西，一般都很大，也不需要什么动态连接库，就可以运行</p><h1 id="几个相关的环境变量"><a href="#几个相关的环境变量" class="headerlink" title="几个相关的环境变量"></a>几个相关的环境变量</h1><p>PKG_CONFIG_PATH：用来指定pkg-config用到的pc文件的路径，默认是&#x2F;usr&#x2F;lib&#x2F;pkgconfig，pc文件是文本文件，扩展名是.pc，里面定义开发包的安装路径，Libs参数和Cflags参数等等。</p><p>CC：用来指定c编译器。<br>CXX：用来指定cxx编译器。<br>LIBS：跟上面的—libs作用差不多。<br>CFLAGS:跟上面的—cflags作用差不多。<br>CC，CXX，LIBS，CFLAGS手动编译时一般用不上，在做configure时有时用到，一般情况下不用管。</p><p>环境变量设定方法：export ENV_NAME&#x3D;xxxxxxxxxxxxxxxxx</p><h1 id="关于交叉编译"><a href="#关于交叉编译" class="headerlink" title="关于交叉编译"></a>关于交叉编译</h1><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">交叉编译通俗地讲就是在一种平台上编译出能运行在体系结构不同的另一种平台上，比如在我们地<span class="hljs-built_in">PC</span>平台(X86 CPU)上编译出能运行在<span class="hljs-meta">arm</span> CPU平台上的程序，编译得到的程序在X86 CPU平台上是不能运行的，必须放到<span class="hljs-meta">arm</span>  CPU 平台上才能运行。当然两个平台用的都是linux。这种方法在异平台移植和嵌入式开发时用得非常普遍。相对与交叉编译，我们平常做的编译就叫本地编译，也 就是在当前平台编译，编译得到的程序也是在本地执行。用来编译这种程序的编译器就叫交叉编译器，相对来说，用来做本地编译的就叫本地编译器，一般用的都是gcc，但这种gcc跟本地的gcc编译器是不一样的，需要在编译gcc时用特定的configure参数才能得到支持交叉编译的gcc。为了不跟本地编译器混淆，交叉编译器的名字一般都有前缀，比如armc-xxxx-linux-gnu-gcc，<span class="hljs-meta">arm</span>-xxxx-linux-gnu- g++ 等等<br></code></pre></td></tr></table></figure><p>交叉编译器的使用方法</p><p>使用方法跟本地的gcc差不多，但有一点特殊的是：必须用-L和-I参数指定编译器用arm系统的库和头文件，不能用本地(X86)的库（头文件有时可以用本地的）。</p><p>例子：</p><p>arm-xxxx-linux-gnu-gcc test.c -L&#x2F;path&#x2F;to&#x2F;sparcLib -I&#x2F;path&#x2F;to&#x2F;armInclude</p><h1 id="man-gcc-部分"><a href="#man-gcc-部分" class="headerlink" title="man gcc 部分"></a>man gcc 部分</h1><p>GCC(1) GNU GCC(1)</p><p>NAME</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">gcc</span> <span class="hljs-operator">-</span> <span class="hljs-variable">GNU</span> <span class="hljs-variable">project</span> <span class="hljs-built_in">C</span> <span class="hljs-variable">and</span> <span class="hljs-built_in">C</span><span class="hljs-operator">++</span> <span class="hljs-variable">compiler</span><br></code></pre></td></tr></table></figure><p>SYNOPSIS</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs inform7">gcc <span class="hljs-comment">[-c | -S | -E]</span> <span class="hljs-comment">[-std=standard]</span><br><br>    <span class="hljs-comment">[-g]</span> <span class="hljs-comment">[-pg]</span> <span class="hljs-comment">[-Olevel]</span><br><br>    <span class="hljs-comment">[-Wwarn...]</span> <span class="hljs-comment">[-pedantic]</span><br><br>    <span class="hljs-comment">[-Idir...]</span> <span class="hljs-comment">[-Ldir...]</span><br><br>    <span class="hljs-comment">[-Dmacro<span class="hljs-comment">[=defn]</span>...]</span> <span class="hljs-comment">[-Umacro]</span><br><br>    <span class="hljs-comment">[-foption...]</span> <span class="hljs-comment">[-mmachine-option...]</span><br><br>    <span class="hljs-comment">[-o outfile]</span> infile...<br><br>Only the most useful options <span class="hljs-keyword">are</span> listed here; see below for the remainder.  g++ accepts mostly the same options as <br>  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>语言知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ASM指令笔记0</title>
    <link href="/2023/01/14/ams-0/"/>
    <url>/2023/01/14/ams-0/</url>
    
    <content type="html"><![CDATA[<h2 id="mul-无符号数乘法指令-MULtiply"><a href="#mul-无符号数乘法指令-MULtiply" class="headerlink" title="mul: 无符号数乘法指令 (MULtiply)"></a>mul: 无符号数乘法指令 (MULtiply)</h2><p> 格式: MUL OPRD<br> 功能: 乘法操作.</p><blockquote><p> 说明: 1. OPRD为通用寄存器或存储器操作数.<br>    \2. OPRD为源操作数,即作乘数.目的操作数是隐含的,即被乘数总是指定为累加器AX 或AL的内容.</p><p> ​      \3. 16位乘法时,AX中为被乘数.8位乘法时,AL为被乘数.当16位乘法时,32位的乘积存于DX及AX中;8位乘法的16位乘积存于AX中.</p><p> ​      \4. 操作过程: 字节相乘:(AX)&lt;–(AL)*OPRD,当结果的高位字节(AH)不等于0时,则CF＝1、OF＝1.字相乘: (DX)(AX)&lt;–(AX)*OPRD,当(DX)不等0时，则CF&#x3D;1、OF&#x3D;1</p><p> ​      \5. 示例 1: MUL BETA[BX]<br> ​               MUL DI<br> ​               MUL BYTE PTR ALFA<br> ​            示例 2: 设在W1和W2字单元中各有一个16位数,若求其乘积并存于W3开始的字单元中,可用以下指令组实现:<br> ​                MOV AX,W1<br> ​               MUL W2<br> ​               MOV W3,AX<br> ​                MOV W3+2,DX</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs asm">.data<br>  val dd 8<br>.code<br>main proc<br>  ;8 位<br>  mov al, 0FFh<br>  mul byte ptr val<br>  PrintHex ax ;07F8<br>  <br>  ;16 位<br>  mov ax, 0FFFFh<br>  mul word ptr val<br>  PrintHex dx ;0007<br>  PrintHex ax ;FFF8<br>  <br>  ;32 位<br>  mov eax, 0FFFFFFFFh<br>  mul val<br>  PrintHex edx ;00000007<br>  PrintHex eax ;FFFFFFF8<br>  ret<br>main endp<br>end main<br></code></pre></td></tr></table></figure><hr><h2 id="imul-带符号数乘法指令-Integer-MULtiply"><a href="#imul-带符号数乘法指令-Integer-MULtiply" class="headerlink" title="imul: 带符号数乘法指令 (Integer MULtiply)"></a>imul: 带符号数乘法指令 (Integer MULtiply)</h2><p> 格式: IMUL OPRD<br> 功能: 完成两个带符号数的相乘</p><blockquote><p> 说明: 1. 其中OPRD为任一通用寄存器或存储器操作数.<br>    \2. MUL指令对带符号相乘时,不能得到正确的结果.<br>   例如: (AL)&#x3D;255<br>      (CL)&#x3D;255</p><p> ​         MUL CL<br> ​        (AX)&#x3D;65025<br> ​     注意: 这对无符号数讲,结果是正确的,但对带符号数讲,相当于(-1)*(-1)结果应为+1,而65025对应的带符号数为-511,显然是不正确的.</p><p> ​      \3. 8088&#x2F;8086指令系统提供了专用的带符号数乘法和除法指令.IMUL即为带符号乘法指令,它能保证得到正确的带符号数的乘积. </p><p> 操作过程:字节相乘:(AX)&lt;–(AL)*OPRD<br>         字相乘: (DX)(AX)&lt;–(AX)*OPRD</p><p> ​     \4. 本指令影响标志位CF、OF.</p><p> ;影响 OF、CF 标志位;第一种指令格式:</p><p> ;IMUL r&#x2F;m ;单操作数;如果参数是 r8&#x2F;m8, 将把 AL 做乘数, 结果放在 AX</p><p> ;如果参数是 r16&#x2F;m16, 将把 AX 做乘数, 结果放在 EAX</p><p> ;如果参数是 r32&#x2F;m32, 将把 EAX 做乘数, 结果放在 EDX:EAX</p><p> ;以上这些都是和 MUL 一样的, 只是运算结果有时一样、有时不一样.</p><p> ;IMUL 还有另外两种指令格式:</p><p> ;IMUL r16&#x2F;r32, r16&#x2F;r32&#x2F;m16&#x2F;m32&#x2F;i</p><p> ;双操作数, (1)*(2) -&gt; (1)</p><p> ;IMUL r16&#x2F;r32, r16&#x2F;r32&#x2F;m16&#x2F;m32, i</p><p> ;三操作数, (2)*(3) -&gt; (1)</p></blockquote><p>-———————————————————————————————————————————————————————</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs asm">.data<br>  val dd 8<br>.code<br>main proc<br>  ;8 位<br>  mov al, 0FFh<br>  PrintDec al<br>  imul byte ptr val<br>  PrintHex ax ;FFF8<br>  PrintDec ax ;-8<br>;-------------------------  <br>  mov al,-8 ;F8<br>  mul byte ptr val<br>  PrintDec ax ;1984<br>  PrintHex ax ;07C0<br>;-------------------------  <br>  ;16 位<br>  mov ax, 0FFFFh<br>  imul word ptr val<br>  PrintHex dx ;FFFF<br>  PrintHex ax ;FFF8<br>  <br>  ;32 位<br>  mov eax, 0FFFFFFFFh<br>  imul val<br>  PrintHex edx ;FFFFFFFF<br>  PrintHex eax ;FFFFFFF8<br>  ret<br>main endp<br>end main<br>;----------------------------------<br><br>.data<br>  val dd 8<br>.code<br>main proc<br>  ;IMUL 两个操作数<br>  mov eax, 7<br>  imul eax, val<br>  PrintDec eax ;56<br>  <br>  ;IMUL 三个操作数<br>  imul eax, val, 9<br>  PrintDec eax ;72<br>  ret<br>main endp<br>end main<br></code></pre></td></tr></table></figure><p>-———————————————————————————————————————————————————————</p><h2 id="div-idiv-无符号除、有符号除"><a href="#div-idiv-无符号除、有符号除" class="headerlink" title="div, idiv:  无符号除、有符号除"></a>div, idiv:  无符号除、有符号除</h2><blockquote><p>;它们没有定义对 EFLAGS 的影响<br>;它们的指令格式:<br>;DIV r&#x2F;m ;参数是除数</p><p>;如果参数是 r8&#x2F;m8,  将把 AX   做被除数; 商 -&gt; AL, 余数 -&gt; AH<br>;如果参数是 r16&#x2F;m16, 将把 DX:AX  做被除数; 商 -&gt; AX, 余数 -&gt; DX<br>;如果参数是 r32&#x2F;m32, 将把 EDX:EAX 做被除数; 商 -&gt; EAX, 余数 -&gt; EDX</p></blockquote><p>-———————————————————————————————————————————————————————</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs asm">.code<br>main proc<br>  ;除数是 8 位<br>  mov ax, 17  ;被除数<br>  mov cl, 3  ;除数<br>  div cl<br>  PrintDec al ;5 - 商<br>  PrintDec ah ;2 - 余数<br><br>  ;除数是 16 位<br>  mov dx, 0  ;<br>  mov ax, 17  ;dx:ax 是被除数<br>  mov cx, 3  ;cx  是除数<br>  div cx<br>  PrintDec ax ;5 - 商<br>  PrintDec dx ;2 - 余数<br><br>  ;除数是 32 位<br>  mov edx, 0  ;<br>  mov eax, 17 ;edx:eax 是被除数<br>  mov ecx, 3  ;ecx   是除数<br>  div ecx<br>  PrintDec eax ;5 - 商<br>  PrintDec edx ;2 - 余数<br>  ret<br>main endp<br>end main<br><br>\----------------------------------------------------------------------------------------------------------------------------------------------------------------------<br><br>.code<br>main proc<br>  ;除数是 8 位<br>  mov al, -17 <br>  cbw     ;ax 是被除数<br>  mov cl, 3  ;除数<br>  idiv cl<br>  PrintDec al ;-5 - 商<br>  PrintDec ah ;-2 - 余数<br>  <br>  ;除数是 16 位<br>  mov ax, -17 <br>  cwd     ;dx:ax 是被除数<br>  mov cx, 3  ;cx  是除数<br>  idiv cx<br>  PrintDec ax ;-5 - 商<br>  PrintDec dx ;-2 - 余数<br>  <br>  ;除数是 32 位<br>  mov eax, -17 <br>  cdq     ;edx:eax 是被除数<br>  mov ecx, 3  ;ecx   是除数<br>  idiv ecx<br>  PrintDec eax ;-5 - 商<br>  PrintDec edx ;-2 - 余数<br>  ret<br>main endp<br>end main<br><br><br></code></pre></td></tr></table></figure><hr><h2 id="shl-shr-sal-sar-移位指令分为逻辑移位指令和算术移位指令"><a href="#shl-shr-sal-sar-移位指令分为逻辑移位指令和算术移位指令" class="headerlink" title="shl,shr,sal,sar:移位指令分为逻辑移位指令和算术移位指令"></a>shl,shr,sal,sar:移位指令分为逻辑移位指令和算术移位指令</h2><ul><li><p>shl 与 shr 属于逻辑移位指令</p><p>shl逻辑左移指令</p></li></ul><p>将寄存器或内存单元的数据左移<br>最低位用 0 补充<br>最高位进入 CF</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asm">例子：<br><br> mov ax,8fh;mov ax,1000 1111b<br> shl ax,1;将ax左移一位<br><br> 执行后 (ax) = 0001 1110b;1eh<br> CF = 1<br></code></pre></td></tr></table></figure><p><strong>如果我们需要移动的位数大于1时，需要将移动位数存入 cl</strong><br>例子：</p><p>比如说我们要移动 4 位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">mov cl,4<br>mov ax,9fh;mov ax,1000 1111b<br>shl ax,cl;左移位数为 cl 里的数据<br><br>执行后 (ax) = 1111 0000b;f0h<br>CF = 1<br></code></pre></td></tr></table></figure><p><strong>shr逻辑右移指令</strong></p><p>将寄存器或内存单元的数据右移<br>最低位用 0 补充<br>最低位进入 CF</p><p><strong>sal 与 sar 属于算术移位指令</strong></p><ul><li>sal 算术左移指令</li></ul><p>功能与shl相同 </p><ul><li>sar 算术右移指令</li></ul><p>基本与shr相同<br>与shr补 0 不同，sar补位时最高位不变</p><h2 id="inc-加1指令"><a href="#inc-加1指令" class="headerlink" title="inc: 加1指令"></a>inc: 加1指令</h2><p>使目标寄存器数值加一</p>]]></content>
    
    
    <categories>
      
      <category>ASM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建</title>
    <link href="/2023/01/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/01/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="1-nodejs安装和配置环境"><a href="#1-nodejs安装和配置环境" class="headerlink" title="1 nodejs安装和配置环境"></a>1 nodejs安装和配置环境</h1><h2 id="1-1安装"><a href="#1-1安装" class="headerlink" title="1.1安装"></a>1.1安装</h2><p>直接访问<a href="https://nodejs.org/en/">node.js官方网站</a>即可</p><p>注意一下安装路径就行</p><p>安装后的测试方法：<br>控制台输入</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>npm -v<br></code></pre></td></tr></table></figure><h2 id="1-2配置环境变量"><a href="#1-2配置环境变量" class="headerlink" title="1.2配置环境变量"></a>1.2配置环境变量</h2><p>如果是默认安装，就不用管。不过我很早之前就装好了，所以忘了要不要配置。</p><p>admin身份打开cmd</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">set</span><span class="hljs-built_in"> prefix </span><span class="hljs-string">&quot;****\nodejs\node_global&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;****\nodejs\node_cache&quot;</span><br></code></pre></td></tr></table></figure><p>注：****为nodejs安装位置</p><p>注意：<br>修改全局安装路径后，需要在系统环境变量Path中添加该路径，否则之后使用<code>npm install –global xxx，xxx</code>都报错找不到命令。</p><h1 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2 安装git"></a>2 安装git</h1><p><a href="https://git-scm.com/">git官方网站</a>下载即可，无脑下一步，带new的新功能不选就行</p><h1 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3 安装hexo"></a>3 安装hexo</h1><p>cmd指令，使用魔法会方便一点.</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g <span class="hljs-meta">#安装hexo</span><br></code></pre></td></tr></table></figure><h1 id="4-检查安装"><a href="#4-检查安装" class="headerlink" title="4 检查安装"></a>4 检查安装</h1><ul><li>nodejs</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br></code></pre></td></tr></table></figure><ul><li>npm</li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> -v<br></code></pre></td></tr></table></figure><ul><li>git</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><ul><li>hexo</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo -v</span><br></code></pre></td></tr></table></figure><p>能看到版本号就是成功了</p><h1 id="5-创建仓库和ssh配置"><a href="#5-创建仓库和ssh配置" class="headerlink" title="5 创建仓库和ssh配置"></a>5 创建仓库和ssh配置</h1><h2 id="5-1建立仓库"><a href="#5-1建立仓库" class="headerlink" title="5.1建立仓库"></a>5.1建立仓库</h2><p>仓库名字一定要是<strong>自己的名字+.github.io</strong></p><h2 id="5-2生成ssh-keys"><a href="#5-2生成ssh-keys" class="headerlink" title="5.2生成ssh keys"></a>5.2生成ssh keys</h2><p>在本地博客文件夹的根目录下，使用右键的git bash here</p><p>可以先使用<code>ssh</code>测试是否安装ssh，一般git默认有安装。</p><p>本地生成ssh keys</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C “邮箱地址”<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110220153525.png" alt="image-20230110220153525"></p><p>无脑回车，跟着提示走就行，注意第二次要输入y再回车。</p><p>在本地文件找到.ssh文件夹：git会提示在哪的：</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110220327779.png" alt="image-20230110220327779"></p><p>注意，被保存到github的是<strong>id_rsa.pub</strong>里面的内容，用记事本打开就行。</p><p>打开github，头像箭头，下拉选项setting $\rightarrow$ SSH and GPG keys $\rightarrow$ new ssh keys（新建ssh秘钥）</p><p>将id_rsa.pub里面的内容粘贴进去，名字随便取：</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110220617771.png" alt="image-20230110220617771"></p><p>为了后面流程，在github里顺便设置person access tokens（个人访问令牌）(Developer setting log $\rightarrow$ Generate new token)</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2capture_20220712160103385.bmp" alt="img"></p><p>下面勾选权限，建议全部勾选</p><p>点击生成，生成的序列号，要复制下来在存在本地，他只<strong>显示一次</strong>，如果忘记了，还需要重新生成一次。</p><hr><p>测试ssh是否绑定成功：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110221236436.png" alt="image-20230110221236436"></p><h1 id="6-搭建本地博客"><a href="#6-搭建本地博客" class="headerlink" title="6 搭建本地博客"></a>6 搭建本地博客</h1><p>初始化hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">hexo init<br></code></pre></td></tr></table></figure><p>在本地博客的文件夹使用git Bash here</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110221758407.png" alt="image-20230110221758407"></p><p>成功的标识：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">INFO</span>  <span class="hljs-keyword">Start</span> blogging <span class="hljs-keyword">with</span> Hexo!<br></code></pre></td></tr></table></figure><p>生成本地页面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">hexo s<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110221931877.png" alt="image-20230110221931877"></p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110221952190.png" alt="image-20230110221952190"></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo clean： <span class="hljs-meta">#清理编译文件</span><br>hexo g：<span class="hljs-meta">#编译项目</span><br>hexo s(<span class="hljs-keyword">server</span>) : <span class="hljs-meta">#本地预览运行项目</span><br></code></pre></td></tr></table></figure><h1 id="7-上传至本地博客"><a href="#7-上传至本地博客" class="headerlink" title="7 上传至本地博客"></a>7 上传至本地博客</h1><h2 id="7-1-修改配置文件"><a href="#7-1-修改配置文件" class="headerlink" title="7.1 修改配置文件"></a>7.1 修改配置文件</h2><p>修改blog文件夹的**_config.yml**</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2abc.png" alt="img"></p><p>注意冒号后面存在空格(<strong>图片的配置过时了，使用下面的</strong>)</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> 你的github地址/ssh链<br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure><h2 id="7-2-安装hexo-deployer-git-自动部署发布工具"><a href="#7-2-安装hexo-deployer-git-自动部署发布工具" class="headerlink" title="7.2 安装hexo-deployer-git 自动部署发布工具"></a>7.2 安装hexo-deployer-git 自动部署发布工具</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110222753018.png" alt="image-20230110222753018"></p><h2 id="7-3-编译文件生成页面"><a href="#7-3-编译文件生成页面" class="headerlink" title="7.3 编译文件生成页面"></a>7.3 编译文件生成页面</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110222831566.png" alt="image-20230110222831566"></p><h2 id="7-4-本地文件上传到Github"><a href="#7-4-本地文件上传到Github" class="headerlink" title="7.4 本地文件上传到Github"></a>7.4 本地文件上传到Github</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230111121628404.png" alt="image-20230111121628404"></p><h1 id="8-安装主题"><a href="#8-安装主题" class="headerlink" title="8 安装主题"></a>8 安装主题</h1><h2 id="8-1-选择主题"><a href="#8-1-选择主题" class="headerlink" title="8.1 选择主题"></a>8.1 选择主题</h2><p>挑了一会，最后选择了Fuild主题。</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230111122238199.png" alt="image-20230111122238199"></p><p>那就跟着github仓库的readme走了</p><p>参考：</p><p><a href="https://hasegawaazusa.github.io/hexo-note.html?highlight=%E5%8D%9A%E5%AE%A2">https://hasegawaazusa.github.io/hexo-note.html?highlight=%E5%8D%9A%E5%AE%A2</a></p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>how To Use This Blog</title>
    <link href="/2023/01/13/howToUseThisBlog/"/>
    <url>/2023/01/13/howToUseThisBlog/</url>
    
    <content type="html"><![CDATA[<h1 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h1><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">关于这个个人博客的文章的一些使用说明</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/Azureus.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-1</span><span class="hljs-number">-13</span> <span class="hljs-number">23</span><span class="hljs-string">:51:00</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left">文章的文件名</td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能</td><td align="left">true</td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章网址</td><td align="left"></td></tr><tr><td align="left"><code>excerpt</code></td><td align="left">纯文本的页面摘要。使用 <a href="https://hexo.io/zh-cn/docs/tag-plugins#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%92%8C%E6%88%AA%E6%96%AD">该插件</a> 来格式化文本</td><td align="left"></td></tr><tr><td align="left"><code>disableNunjucks</code></td><td align="left">启用时禁用 Nunjucks 标签 <code>&#123;&#123; &#125;&#125;</code>&#x2F;<code>&#123;% %&#125;</code> 和 <a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a> 的渲染功能</td><td align="left"></td></tr><tr><td align="left"><code>lang</code></td><td align="left">设置语言以覆盖 <a href="https://hexo.io/zh-cn/docs/internationalization#%E8%B7%AF%E5%BE%84">自动检测</a></td><td align="left">继承自 <code>_config.yml</code></td></tr><tr><td align="left"><code>index_img</code></td><td align="left">封面</td><td align="left">无</td></tr></tbody></table><h1 id="博客修改"><a href="#博客修改" class="headerlink" title="博客修改"></a>博客修改</h1><p><a href="https://hexo.fluid-dev.com/docs/guide">参考文档</a></p><h3 id="文章页顶部大图"><a href="#文章页顶部大图" class="headerlink" title="文章页顶部大图"></a>文章页顶部大图</h3><p>默认显示<strong>主题配置</strong>中的 <code>post.banner_img</code>，如需要设置单个文章的 Banner，在 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter (opens new window)</a>中指定 <code>banner_img</code> 属性。</p><p>本地图片存放位置同上。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/post_banner.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Run_Before_or_after_main</title>
    <link href="/2022/11/19/Run-Before-or-after-main/"/>
    <url>/2022/11/19/Run-Before-or-after-main/</url>
    
    <content type="html"><![CDATA[<p>一般程序都是会从main函数开始进行，但事实上 main 函数之前也发生了很多操作。在 main 函数开始前，分成两部分 “系统调用部分” 和 “C++ 程序自身的部分”</p><h2 id="main-执行前"><a href="#main-执行前" class="headerlink" title="main() 执行前"></a>main() 执行前</h2><ol><li>入口函数对运行库和程序运行环镜进行初始化，包括 堆、I&#x2F;O、线程、全局变量构造等等。</li><li>入口函数完成初始化后，调用 main 函数，正式开始执行程序主体部分。</li></ol><blockquote><p>main函数执行之前，主要就是初始化系统相关资源：<br>1.设置栈指针<br>2.初始化static静态和global全局变量，即data段的内容<br>3.将未初始化部分的赋初值：数值型short，int，long等为0，bool为FALSE，指针为NULL，等等，即.bss段的内容<br>4.将main函数的参数，argc，argv等传递给main函数，然后才真正运行main函数</p></blockquote><h2 id="main运行前可运行哪些代码"><a href="#main运行前可运行哪些代码" class="headerlink" title="main运行前可运行哪些代码"></a>main运行前可运行哪些代码</h2><h3 id="1-全局对象的构造函数会在-main-函数之前执行。"><a href="#1-全局对象的构造函数会在-main-函数之前执行。" class="headerlink" title="1.全局对象的构造函数会在 main 函数之前执行。"></a>1.全局对象的构造函数会在 main 函数之前执行。</h3><p>例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">simpleClass</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">simpleClass</span>( )&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;simpleClass constructor..&quot;</span> &lt;&lt; endl;  <span class="hljs-comment">//step2</span><br>    &#125;<br>&#125;;<br><br>simpleClass g_objectSimple;         <span class="hljs-comment">//step1全局对象</span><br><span class="hljs-comment">// 这里调用了全局对象的构造函数</span><br> <br><span class="hljs-type">int</span> _tmain(<span class="hljs-type">int</span> argc, _TCHAR* argv[])&#123;  <span class="hljs-comment">//step3</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//可单步调试查看执行顺序为step1、step2、step3。</span><br></code></pre></td></tr></table></figure><h3 id="2-全局变量、对象和静态变量、对象的空间分配和赋初值"><a href="#2-全局变量、对象和静态变量、对象的空间分配和赋初值" class="headerlink" title="2. 全局变量、对象和静态变量、对象的空间分配和赋初值"></a>2. 全局变量、对象和静态变量、对象的空间分配和赋初值</h3><p>发生在执行main函数之前，而main函数执行完后，<br>还要去执行一些诸如释放空间、释放资源使用权等操作</p><h4 id="静态变量构建"><a href="#静态变量构建" class="headerlink" title="静态变量构建"></a>静态变量构建</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">simpleClass</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">simpleClass</span>( )&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;simpleClass constructor..&quot;</span> &lt;&lt; endl;       <span class="hljs-comment">//step2 </span><br>       &#125;<br>&#125;;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">simpleClassTwo</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">static</span> simpleClass m_sSimpleClass;<br>&#125;;<br><br>simpleClass simpleClassTwo::m_sSimpleClass = <span class="hljs-built_in">simpleClass</span>(); <span class="hljs-comment">//step1 静态对象</span><br><br><span class="hljs-type">int</span> _tmain(<span class="hljs-type">int</span> argc, _TCHAR* argv[])&#123;   <span class="hljs-comment">//step3</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="全局变量的赋值函数"><a href="#全局变量的赋值函数" class="headerlink" title="全局变量的赋值函数"></a>全局变量的赋值函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;before&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> A = <span class="hljs-built_in">f</span>();<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="全局lambda变量调用"><a href="#全局lambda变量调用" class="headerlink" title="全局lambda变量调用"></a>全局lambda变量调用</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = []() &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;a&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;();<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;b&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-进程启动后，要执行一些初始化代码"><a href="#3-进程启动后，要执行一些初始化代码" class="headerlink" title="3.进程启动后，要执行一些初始化代码"></a>3.进程启动后，要执行一些初始化代码</h3><p>（如设置环境变量等），然后跳转到main执行。全局对象的构造也在main之前</p><blockquote><p>在写程序时，比如一个模块，通常要有 initialize 和 de-initialize，但是我们写 C 程序的时候为什么有些模块没有这两个过程么呢？比如我们程序从 main 开始就可以 malloc，free，但是我们在 main 里面却没有初始化堆。再比如在 main 里面可以直接 printf，可是我们并没有打开标准输出文件啊。</p></blockquote><blockquote><p>操作系统装载程序之后，首先运行的代码并不是main的第一行，而是某些特别的代码，这些代码准备好main函数执行说需要的环境，并且负责调用main函数，这时候你才可以再main函数里放心大胆的写各种代码：申请内存、使用系统调用、触发异常、访问IO。在main函数返回之后，他会记录main函数的返回值，调用atexit注册的函数，然后结束进程。<br>——《程序员的自我修养–链接、装载与库》</p></blockquote><h4 id="那main-执行后呢？"><a href="#那main-执行后呢？" class="headerlink" title="那main() 执行后呢？"></a>那main() 执行后呢？</h4><p>main函数执行完毕后，返回到入口函数，入口函数进行清理工作，包括全局变量的析构、堆销毁、关闭I&#x2F;O等，然后系统调用结束进程。</p><blockquote><p>main函数结束可以通过 return 0;或者 exit(0) 来结束，此时程序并非直接结束，而是先调用一些终止处理程序然后再结束。可以使用int atexit(void (*func)(void));来追加自定义终止处理程序，终止处理程序由 exit函数自动调用，调用顺序与登记顺序相反。</p></blockquote><blockquote><p>如果main函数发生了异常或者使用_exit和_Exit来退出程序，则不会调用终止处理程序。</p></blockquote><p>微信的mars库中对运行在main前和main后的函数封装方法</p><blockquote><p>运行前用全局变量和运行后用atexit函数，<br>使用BOOT_RUN_STARTUP的函数，在main运行前调用<br>使用BOOT_RUN_EXIT的函数，在main运行后调用</p></blockquote><p>使用全局变量和atexit实现函数在main运行前和运行后运行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QCoreApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtDebug&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tmp</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Tmp</span>() &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO;<br>    &#125;<br>    ~<span class="hljs-built_in">Tmp</span>() &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main_before</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main_after</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">doExit</span><span class="hljs-params">(<span class="hljs-type">void</span> (*func)(<span class="hljs-type">void</span>))</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">atexit</span>(func);<br>&#125;<br><br><span class="hljs-type">int</span> nBefore = <span class="hljs-built_in">main_before</span>();<br><span class="hljs-type">int</span> nAfter = <span class="hljs-built_in">doExit</span>(main_after);<br>Tmp oTmp;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span>&#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO;<br><span class="hljs-comment">//    QCoreApplication app(argc, argv);</span><br><span class="hljs-comment">//    return app.exec(); // 进入qt的事件循环</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/* 输出</span><br><span class="hljs-comment">int main_before()</span><br><span class="hljs-comment">Tmp::Tmp()</span><br><span class="hljs-comment">int main(int, char**)</span><br><span class="hljs-comment">Tmp::~Tmp()</span><br><span class="hljs-comment">void main_after()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="4-通过关键字-attribute"><a href="#4-通过关键字-attribute" class="headerlink" title="4. 通过关键字_attribute_"></a>4. 通过关键字_<em>attribute</em>_</h3><p>让一个函数在主函数之前运行，进行一些数据初始化、模块加载验证等。</p><blockquote><p>如果是GNUC的编译器（gcc，clang），就在你要执行的方法前加上 <strong>attribute</strong>((constructor))</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br>__attribute__((constructor)) <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;main\n&quot;</span>); <span class="hljs-comment">//从运行结果来看，并没有执行main函数</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>同理，如果想要在main函数结束之后运行，<br>可加上__attribute__((destructor))</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>);<br>    <span class="hljs-comment">//exit(0);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>__attribute__((constructor))<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;before\n&quot;</span>);<br>    <span class="hljs-built_in">func</span>();<br>&#125;<br><br><br>__attribute__((destructor))<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;after\n&quot;</span>);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;main\n&quot;</span>); <span class="hljs-comment">//从运行结果来看，并没有执行main函数</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ALG_ID_一些哈希的特征码</title>
    <link href="/2022/10/14/ALG-ID-%E4%B8%80%E4%BA%9B%E5%93%88%E5%B8%8C%E7%9A%84%E7%89%B9%E5%BE%81%E7%A0%81/"/>
    <url>/2022/10/14/ALG-ID-%E4%B8%80%E4%BA%9B%E5%93%88%E5%B8%8C%E7%9A%84%E7%89%B9%E5%BE%81%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left">标识符</th><th align="left">值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">CALG_3DES</td><td align="left">0x00006603</td><td align="left"><a href="https://docs.microsoft.com/zh-CN/windows/desktop/SecGloss/t-gly"><em>三重 DES</em></a> 加密算法。</td></tr><tr><td align="left">CALG_3DES_112</td><td align="left">0x00006609</td><td align="left">双密钥 <a href="https://docs.microsoft.com/zh-CN/windows/desktop/SecGloss/t-gly"><em>三重 DES</em></a> 加密，有效密钥长度等于 112 位。</td></tr><tr><td align="left">CALG_AES</td><td align="left">0x00006611</td><td align="left">高级加密标准 (AES) 。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-aes-cryptographic-provider">Microsoft AES 加密提供程序</a>支持此算法。</td></tr><tr><td align="left">CALG_AES_128</td><td align="left">0x0000660e</td><td align="left">128 位 AES。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-aes-cryptographic-provider">Microsoft AES 加密提供程序</a>支持此算法。</td></tr><tr><td align="left">CALG_AES_192</td><td align="left">0x0000660f</td><td align="left">192 位 AES。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-aes-cryptographic-provider">Microsoft AES 加密提供程序</a>支持此算法。</td></tr><tr><td align="left">CALG_AES_256</td><td align="left">0x00006610</td><td align="left">256 位 AES。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-aes-cryptographic-provider">Microsoft AES 加密提供程序</a>支持此算法。</td></tr><tr><td align="left">CALG_AGREEDKEY_ANY</td><td align="left">0x0000aa03</td><td align="left">Diffie-Hellman 同意密钥句柄的临时算法标识符。</td></tr><tr><td align="left">CALG_CYLINK_MEK</td><td align="left">0x0000660c</td><td align="left">一种算法，用于创建具有奇偶校验位和零键位的 40 位 DES 密钥，使其密钥长度为 64 位。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基本加密提供程序</a>支持此算法。</td></tr><tr><td align="left">CALG_DES</td><td align="left">0x00006601</td><td align="left">DES 加密算法。</td></tr><tr><td align="left">CALG_DESX</td><td align="left">0x00006604</td><td align="left">DESX 加密算法。</td></tr><tr><td align="left">CALG_DH_EPHEM</td><td align="left">0x0000aa02</td><td align="left">Diffie-Hellman临时密钥交换算法。</td></tr><tr><td align="left">CALG_DH_SF</td><td align="left">0x0000aa01</td><td align="left">Diffie-Hellman存储和转发密钥交换算法。</td></tr><tr><td align="left">CALG_DSS_SIGN</td><td align="left">0x00002200</td><td align="left">DSA <a href="https://docs.microsoft.com/zh-CN/windows/desktop/SecGloss/p-gly"><em>公钥</em></a> 签名算法。</td></tr><tr><td align="left">CALG_ECDH</td><td align="left">0x0000aa05</td><td align="left">椭圆曲线Diffie-Hellman密钥交换算法。[！注意] 此算法仅通过 <a href="https://docs.microsoft.com/zh-CN/windows/desktop/SecCNG/cng-portal">加密 API 支持：下一代</a>。 <strong>Windows Server 2003 和 Windows XP：</strong>不支持此算法。</td></tr><tr><td align="left">CALG_ECDH_EPHEM</td><td align="left">0x0000ae06</td><td align="left">临时椭圆曲线Diffie-Hellman密钥交换算法。[！注意] 此算法仅通过 <a href="https://docs.microsoft.com/zh-CN/windows/desktop/SecCNG/cng-portal">加密 API 支持：下一代</a>。 <strong>Windows Server 2003 和 Windows XP：</strong>不支持此算法。</td></tr><tr><td align="left">CALG_ECDSA</td><td align="left">0x00002203</td><td align="left">椭圆曲线数字签名算法。[！注意] 此算法仅通过 <a href="https://docs.microsoft.com/zh-CN/windows/desktop/SecCNG/cng-portal">加密 API 支持：下一代</a>。 <strong>Windows Server 2003 和 Windows XP：</strong>不支持此算法。</td></tr><tr><td align="left">CALG_ECMQV</td><td align="left">0x0000a001</td><td align="left">椭圆曲线 Menezes、Qu 和 Vanstone (MQV) 密钥交换算法。 不支持此算法。</td></tr><tr><td align="left">CALG_HASH_REPLACE_OWF</td><td align="left">0x0000800b</td><td align="left">函数哈希算法的一种方式。</td></tr><tr><td align="left">CALG_HUGHES_MD5</td><td align="left">0x0000a003</td><td align="left">休斯 MD5 哈希算法。</td></tr><tr><td align="left">CALG_HMAC</td><td align="left">0x00008009</td><td align="left">HMAC 键控哈希算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基本加密提供程序</a>支持此算法。</td></tr><tr><td align="left">CALG_KEA_KEYX</td><td align="left">0x0000aa04</td><td align="left">KEA 密钥交换算法 (FORTEZZA) 。 不支持此算法。</td></tr><tr><td align="left">CALG_MAC</td><td align="left">0x00008005</td><td align="left"><a href="https://docs.microsoft.com/zh-CN/windows/desktop/SecGloss/m-gly"><em>MAC</em></a> 键控哈希算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基本加密提供程序</a>支持此算法。</td></tr><tr><td align="left">CALG_MD2</td><td align="left">0x00008001</td><td align="left">MD2 哈希算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基本加密提供程序</a>支持此算法。</td></tr><tr><td align="left">CALG_MD4</td><td align="left">0x00008002</td><td align="left">MD4 哈希算法。</td></tr><tr><td align="left">CALG_MD5</td><td align="left">0x00008003</td><td align="left">MD5 哈希算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基础加密提供程序</a>支持此算法。</td></tr><tr><td align="left">CALG_NO_SIGN</td><td align="left">0x00002000</td><td align="left">无签名算法。</td></tr><tr><td align="left">CALG_OID_INFO_CNG_ONLY</td><td align="left">0xffffffff</td><td align="left">该算法仅在 CNG 中实现。 宏IS_SPECIAL_OID_INFO_ALGID可用于确定加密算法是否仅受 CNG 函数支持。</td></tr><tr><td align="left">CALG_OID_INFO_PARAMETERS</td><td align="left">0xfffffffe</td><td align="left">算法在编码的参数中定义。 仅使用 CNG 支持该算法。 宏IS_SPECIAL_OID_INFO_ALGID可用于确定加密算法是否仅受 CNG 函数支持。</td></tr><tr><td align="left">CALG_PCT1_MASTER</td><td align="left">0x00004c04</td><td align="left">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr><tr><td align="left">CALG_RC2</td><td align="left">0x00006602</td><td align="left">RC2 块加密算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基础加密提供程序</a>支持此算法。</td></tr><tr><td align="left">CALG_RC4</td><td align="left">0x00006801</td><td align="left">RC4 流加密算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基础加密提供程序</a>支持此算法。</td></tr><tr><td align="left">CALG_RC5</td><td align="left">0x0000660d</td><td align="left">RC5 块加密算法。</td></tr><tr><td align="left">CALG_RSA_KEYX</td><td align="left">0x0000a400</td><td align="left">RSA 公钥交换算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基础加密提供程序</a>支持此算法。</td></tr><tr><td align="left">CALG_RSA_SIGN</td><td align="left">0x00002400</td><td align="left">RSA 公钥签名算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基础加密提供程序</a>支持此算法。</td></tr><tr><td align="left">CALG_SCHANNEL_ENC_KEY</td><td align="left">0x00004c07</td><td align="left">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr><tr><td align="left">CALG_SCHANNEL_MAC_KEY</td><td align="left">0x00004c03</td><td align="left">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr><tr><td align="left">CALG_SCHANNEL_MASTER_HASH</td><td align="left">0x00004c02</td><td align="left">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr><tr><td align="left">CALG_SEAL</td><td align="left">0x00006802</td><td align="left">SEAL 加密算法。 不支持此算法。</td></tr><tr><td align="left">CALG_SHA</td><td align="left">0x00008004</td><td align="left">SHA 哈希算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基础加密提供程序</a>支持此算法。</td></tr><tr><td align="left">CALG_SHA1</td><td align="left">0x00008004</td><td align="left">与 <strong>CALG_SHA</strong>相同。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基础加密提供程序</a>支持此算法。</td></tr><tr><td align="left">CALG_SHA_256</td><td align="left">0x0000800c</td><td align="left">256 位 SHA 哈希算法。 Microsoft 增强型 RSA 和 AES 加密提供程序支持此算法。<strong>Windows SP3 的 XP：</strong>Microsoft 增强型 RSA 和 AES 加密提供程序 (原型) 支持此算法。 <strong>Windows SP2 的 XP，Windows SP1 和 Windows XP 的 XP：</strong>不支持此算法。</td></tr><tr><td align="left">CALG_SHA_384</td><td align="left">0x0000800d</td><td align="left">384 位 SHA 哈希算法。 Microsoft 增强型 RSA 和 AES 加密提供程序支持此算法。<strong>Windows SP3 的 XP：</strong>Microsoft 增强型 RSA 和 AES 加密提供程序 (原型) 支持此算法。 <strong>Windows SP2 的 XP，Windows SP1 和 Windows XP 的 XP：</strong>不支持此算法。</td></tr><tr><td align="left">CALG_SHA_512</td><td align="left">0x0000800e</td><td align="left">512 位 SHA 哈希算法。 Microsoft 增强型 RSA 和 AES 加密提供程序支持此算法。<strong>Windows SP3 的 XP：</strong>Microsoft 增强型 RSA 和 AES 加密提供程序 (原型) 支持此算法。 <strong>Windows SP2 的 XP，Windows SP1 和 Windows XP 的 XP：</strong>不支持此算法。</td></tr><tr><td align="left">CALG_SKIPJACK</td><td align="left">0x0000660a</td><td align="left">SKIPjack 块加密算法 (FORTEZZA) 。 不支持此算法。</td></tr><tr><td align="left">CALG_SSL2_MASTER</td><td align="left">0x00004c05</td><td align="left">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr><tr><td align="left">CALG_SSL3_MASTER</td><td align="left">0x00004c01</td><td align="left">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr><tr><td align="left">CALG_SSL3_SHAMD5</td><td align="left">0x00008008</td><td align="left">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr><tr><td align="left">CALG_TEK</td><td align="left">0x0000660b</td><td align="left">TEK (FORTEZZA) 。 不支持此算法。</td></tr><tr><td align="left">CALG_TLS1_MASTER</td><td align="left">0x00004c06</td><td align="left">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr><tr><td align="left">CALG_TLS1PRF</td><td align="left">0x0000800a</td><td align="left">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>加密算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>base家族</title>
    <link href="/2022/10/14/base%E5%AE%B6%E6%97%8F/"/>
    <url>/2022/10/14/base%E5%AE%B6%E6%97%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h1><h2 id="换表的情况"><a href="#换表的情况" class="headerlink" title="换表的情况"></a>换表的情况</h2><p>无法直接使用<code>base64.b64decode(enc)</code>来直接解出，但是可以将密文排序为原表的密文再解</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>enc = <span class="hljs-string">&#x27;AMHo7dLxUEabf6Z3PdWr6cOy75i4fdfeUzL17kaV7rG=&#x27;</span><br><br>model = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>  <span class="hljs-comment">#正常表</span><br><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;qaCpwYM2tO/RP0XeSZv8kLd6nfA7UHJ1No4gF5zr3VsBQbl9juhEGymc+WTxIiDK&#x27;</span><span class="hljs-comment">#被改变了的base64的表</span><br><span class="hljs-comment">#这段是排序归位</span><br>dnc = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    dnc += model[<span class="hljs-built_in">str</span>.find(enc[i])]<br><br><span class="hljs-built_in">print</span>(base64.b64decode(dnc).decode())<br></code></pre></td></tr></table></figure><h1 id="base58"><a href="#base58" class="headerlink" title="base58"></a>base58</h1><p>md，整了不少，装不上，那就毛一个脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">b58encode</span>(<span class="hljs-params">tmp: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    tmp = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">ord</span>, tmp))<br>    temp = tmp[<span class="hljs-number">0</span>]<br>    base58 = <span class="hljs-string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(tmp) - <span class="hljs-number">1</span>):<br>        temp = temp * <span class="hljs-number">256</span> + tmp[i + <span class="hljs-number">1</span>]<br>    tmp = []<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        tmp.insert(<span class="hljs-number">0</span>, temp % <span class="hljs-number">58</span>)<br>        temp = temp // <span class="hljs-number">58</span><br>        <span class="hljs-keyword">if</span> temp == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br>    temp = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp:<br>        temp += base58[i]<br>    <span class="hljs-keyword">return</span> temp<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b58decode</span>(<span class="hljs-params">tmp: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">import</span> binascii<br>    base58 = <span class="hljs-string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span><br>    temp = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp:<br>        temp.append(base58.index(i))<br>    tmp = temp[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(temp) - <span class="hljs-number">1</span>):<br>        tmp = tmp * <span class="hljs-number">58</span> + temp[i + <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> binascii.unhexlify(<span class="hljs-built_in">hex</span>(tmp)[<span class="hljs-number">2</span>:].encode(<span class="hljs-string">&quot;utf-8&quot;</span>)).decode(<span class="hljs-string">&quot;UTF-8&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>加密算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SM4</title>
    <link href="/2022/10/14/SM4/"/>
    <url>/2022/10/14/SM4/</url>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>SM4是一种<strong>分组密码算法</strong>，由我国国家密码管理局在2012年发布，常用于无线互联网加密等领域。</p><p>其<strong>分组长度为128位</strong>（即<strong>16字节</strong>，<strong>4字</strong>），<strong>密钥长度也为128位</strong>（即<strong>16字节</strong>，<strong>4字</strong>）。其加解密过程采用了<strong>32轮</strong>迭代机制（与DES、AES类似），每一轮需要一个轮密钥（与DES、AES类似）。</p><h1 id="二、加密过程"><a href="#二、加密过程" class="headerlink" title="二、加密过程"></a>二、加密过程</h1><h2 id="1、加密过程概述"><a href="#1、加密过程概述" class="headerlink" title="1、加密过程概述"></a>1、加密过程概述</h2><p>SM4的分组长度为4字，因此，其<strong>输入是4字的明文</strong> $(X0,X1,X2,X3)$ （其中 Xi 表示一个32位的字），经过加密后，得到的<strong>输出是4字的密文</strong> $(Y0,Y1,Y2,Y3) $（其中 Yi 表示一个32位的字）。</p><p>这个加密过程分为两步，由<strong>32次轮迭代</strong>和<strong>1次反序变换</strong>组成。</p><h2 id="2、算法流程"><a href="#2、算法流程" class="headerlink" title="2、算法流程"></a>2、算法流程</h2><p>SM4 算法主要包含异或、移位以及盒变换操作。它分为密钥拓展和加&#x2F;解密两个模块，这两个模块的流程大同小异<br>其中，移位变换是指循环左移；盒变换是一个将8bit输入映射到8bit输出的变换，是一个固定的变换<br>下图是 SM4 的加解密（左）和密钥拓展（右）的流程图</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo/1215563-20201214211048328-557839971.jpg" alt="pic"></p><h3 id="1-加解密"><a href="#1-加解密" class="headerlink" title="(1) 加解密"></a>(1) 加解密</h3><ul><li>输入的明文为 128bit 的数据，将其按位拆分成 4 个 32bit 的数据 $x0,x1,x2,x3$<br>当$i&#x3D;0$ 时为第一次轮变换，一直进行到$ i&#x3D;31$ 结束</li><li>$xi$ 暂时不做处理，将 $x_{i+1},x_{i+2},x_{i+3}$ 和轮密钥 $rk_i$ 异或得到一个 32bit 的数据，作为盒变换的输入<br>即 $sbox_input&#x3D;x_{i+1}⊕x_{i+2}⊕x_{i+3}⊕rk_i$，$⊕$ 符号代表异或运算</li><li>将 $sbox_input$ 拆分成 4 个 8bit 数据，分别进行盒变换，之后再将 4 个 8bit 输出合并成一个 32bit 的 $sbox_output$</li><li>将刚才获得的 $sbox_output$ 分别循环左移 2，10，18，24 位，得到 4 个 32bit 的结果，记移位结果为 $y_2,y_{10},y_{18},y_{24}$</li><li>将移位的结果 $y_2,y_{10},y_{18},y_{24}$ 与盒变换输出 $sbox_output$ 和 $x_i$异或，得到 $x_{i+4}$<br>即 $x_{i+4}&#x3D;sbox_output⊕y_2⊕y_{10}⊕y_{18}⊕y_{24}⊕x_i$</li><li>至此完成了一轮的加解密运算<br>在实际加解密过程中，上述运算要执行 32 轮，同时使用 32 个不同的 $rk_i$，$rk_i$ 由密钥拓展生成</li><li>最后将生成的最后 4 个 32bit 数据 $x_{35},x_{34},x_{33},x_{32}$ 合并成一个 128bit 的数据 $output$，作为最后的输出结果</li></ul><h3 id="2-密钥拓展"><a href="#2-密钥拓展" class="headerlink" title="(2) 密钥拓展"></a>(2) 密钥拓展</h3><ul><li>密钥拓展的过程和加解密大同小异</li><li>输入的原始密钥 $key$ 为 128bit 的数据，将其按位拆分成 4 个 32bit 的数据 $K_0,K_1,K_2,K_3$</li><li>将初始密钥 $K_0,K_1,K_2,K_3$ 分别异或固定参数 $FK_0,FK_1,FK_2,FK_3$ 得到用于循环的密钥 $k_0,k_1,k_2,k_3$<br>即 $k_0&#x3D;K_0⊕FK_0,k_1&#x3D;K_1⊕FK_1,k_2&#x3D;K_2⊕FK_2,k_3&#x3D;K_3⊕FK_3$</li><li>进入轮密钥 $rk_i$ 的生成<br>当 $i&#x3D;0$ 时为第一次轮变换，一直进行到$ i&#x3D;31$ 结束</li><li>$ki$ 暂时不做处理，将 $k_{i+1},k_{i+2},k_{i+3}$ 和固定参数 $CK_i$ 异或得到一个 32bit 的数据，作为盒变换的输入<br>即$ sbox_input&#x3D;k_{i+1}⊕k_{i+2}⊕k_{i+3}⊕ck_i$</li><li>将 $sbox_input$ 拆分成 4 个 8bit 数据，分别进行盒变换，之后再将 4 个 8bit 输出合并成一个 32bit 的 $sbox_output$</li><li>将刚才获得的 $sbox_output$ 分别循环左移 13，23 位，得到 2 个 32bit 的结果，记移位结果为$ y_{13},y_{23}$</li><li>将移位的结果 $ y_{13},y_{23}$与盒变换输出$ sbox_output$ 和 $k_i$ 异或，得到 $k_{i+4}$<br>即 $rk_i&#x3D;k_{i+4}&#x3D;sbox_output⊕y_{13}⊕y_{23}⊕k_i$</li><li>至此完成了一轮的加解密运算<br>在实际加解密过程中，上述运算要执行 32 轮，同时使用 32 个不同的$ CK_i$，$CK_i$ 为固定参数</li><li>执行完 32 轮后，便可获得 32 个用于加解密的 $rk_i$</li></ul><h1 id="三、特征"><a href="#三、特征" class="headerlink" title="三、特征"></a>三、特征</h1><h2 id="1、S盒"><a href="#1、S盒" class="headerlink" title="1、S盒"></a>1、S盒</h2><p>和AES类似，SM4也有码表，不过AES有S盒和逆S盒。以下是SM4 的S盒：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">SBOX = [<br>    <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x05</span>, <br>    <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x9A</span>,<span class="hljs-number">0x76</span>, <span class="hljs-number">0x2A</span>,  <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x99</span>, <br>    <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <br>    <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xA6</span>, <br>    <span class="hljs-number">0x47</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xA8</span>,<br>    <span class="hljs-number">0x68</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x35</span>,<br>    <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x87</span>, <br>    <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x9E</span>,<br>    <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xA1</span>, <br>    <span class="hljs-number">0xE0</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xE3</span>,<br>    <span class="hljs-number">0x1D</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x6F</span>, <br>    <span class="hljs-number">0xD5</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x51</span>, <br>    <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xD8</span>, <br>    <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xB0</span>,<br>    <span class="hljs-number">0x89</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x84</span>,<br>    <span class="hljs-number">0x18</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x48</span><br>    ]<br>    <span class="hljs-comment">#已经整理为16 * 16</span><br></code></pre></td></tr></table></figure><p>多数时间可能会以数组形式存在。</p><h2 id="2、固定参数-CK-FK"><a href="#2、固定参数-CK-FK" class="headerlink" title="2、固定参数$CK,FK$"></a>2、固定参数$CK,FK$</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">FK = [<span class="hljs-number">0xa3b1bac6</span>, <span class="hljs-number">0x56aa3350</span>, <span class="hljs-number">0x677d9197</span>, <span class="hljs-number">0xb27022dc</span>]<br>CK = [<span class="hljs-number">0x00070e15</span>, <span class="hljs-number">0x1c232a31</span>, <span class="hljs-number">0x383f464d</span>, <span class="hljs-number">0x545b6269</span>,<br>      <span class="hljs-number">0x70777e85</span>, <span class="hljs-number">0x8c939aa1</span>, <span class="hljs-number">0xa8afb6bd</span>, <span class="hljs-number">0xc4cbd2d9</span>,<br>      <span class="hljs-number">0xe0e7eef5</span>, <span class="hljs-number">0xfc030a11</span>, <span class="hljs-number">0x181f262d</span>, <span class="hljs-number">0x343b4249</span>,<br>      <span class="hljs-number">0x50575e65</span>, <span class="hljs-number">0x6c737a81</span>, <span class="hljs-number">0x888f969d</span>, <span class="hljs-number">0xa4abb2b9</span>,<br>      <span class="hljs-number">0xc0c7ced5</span>, <span class="hljs-number">0xdce3eaf1</span>, <span class="hljs-number">0xf8ff060d</span>, <span class="hljs-number">0x141b2229</span>,<br>      <span class="hljs-number">0x30373e45</span>, <span class="hljs-number">0x4c535a61</span>, <span class="hljs-number">0x686f767d</span>, <span class="hljs-number">0x848b9299</span>,<br>      <span class="hljs-number">0xa0a7aeb5</span>, <span class="hljs-number">0xbcc3cad1</span>, <span class="hljs-number">0xd8dfe6ed</span>, <span class="hljs-number">0xf4fb0209</span>,<br>      <span class="hljs-number">0x10171e25</span>, <span class="hljs-number">0x2c333a41</span>, <span class="hljs-number">0x484f565d</span>, <span class="hljs-number">0x646b7279</span>]<br></code></pre></td></tr></table></figure><p>感觉。。。。可能有脑残出题人改这两参数。。。。</p><h2 id="3、加密形式"><a href="#3、加密形式" class="headerlink" title="3、加密形式"></a>3、加密形式</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">c = bb ^ (<span class="hljs-built_in">ROTL</span>(bb, <span class="hljs-number">2</span>)) ^ (<span class="hljs-built_in">ROTL</span>(bb, <span class="hljs-number">10</span>)) ^ (<span class="hljs-built_in">ROTL</span>(bb, <span class="hljs-number">18</span>)) ^ (<span class="hljs-built_in">ROTL</span>(bb, <span class="hljs-number">24</span>));<br><span class="hljs-comment">//下面是key的</span><br>sbb = b1 ^ b2 ^ b3 ^ ck;<br>c = b0 ^ sbb ^ (<span class="hljs-built_in">ROTL</span>(sbb, <span class="hljs-number">13</span>)) ^ (<span class="hljs-built_in">ROTL</span>(sbb, <span class="hljs-number">23</span>));<br></code></pre></td></tr></table></figure><p>像这样子的</p>]]></content>
    
    
    <categories>
      
      <category>加密算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c c++函数名编译符号修饰符</title>
    <link href="/2022/09/23/c-c-%E5%87%BD%E6%95%B0%E5%90%8D%E7%BC%96%E8%AF%91%E7%AC%A6%E5%8F%B7%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <url>/2022/09/23/c-c-%E5%87%BD%E6%95%B0%E5%90%8D%E7%BC%96%E8%AF%91%E7%AC%A6%E5%8F%B7%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>函数的名字修饰（Decorated Name）就是编译器在编译期间创建的一个字符串。用来指明函数的定义或原型。</p><p>LINK程序或其它工具有时须要指定函数的名字修饰来定位函数的正确位置。</p><p>多数情况下程序猿并不须要知道函数的名字修饰。LINK程序或其它工具会自己主动区分他们。</p><p>当然，在某些情况下须要指定函数的名字修饰，比如在C++程序中， 为了让LINK程序或其它工具可以匹配到正确的函数名字，就必须为重载函数和一些特殊的函数（如构造函数和析构函数）指定名字装饰。</p><p>还有一种须要指定函数的 名字修饰的情况是在汇编程序中调用C或C++的函数。</p><p>假设函数名字，调用约定。返回值类型或函数參数有不论什么改变，原来的名字修饰就不再有效，必须指定新的 名字修饰。</p><p>C和C++程序的函数在内部使用不同的名字修饰方式，以下将分别介绍这两种方式</p><h2 id="1、C编译器的函数名修饰规则"><a href="#1、C编译器的函数名修饰规则" class="headerlink" title="1、C编译器的函数名修饰规则"></a>1、C编译器的函数名修饰规则</h2><p>​对于__stdcall调用约定，编译器和链接器会在输出函数名前加上一个下划线前缀，函数名后面加上一个“@”符号和其參数的字节数。比如 _functionname@number。</p><h2 id="2-C-编译器的函数名修饰规则"><a href="#2-C-编译器的函数名修饰规则" class="headerlink" title="2. C++编译器的函数名修饰规则"></a>2. C++编译器的函数名修饰规则</h2><p>无论 __cdecl，__fastcall还是__stdcall调用方式，函数修饰都是以一个“?”開始，后面紧跟函数的名字。再后面是參数表的開始标识和 依照參数类型代号拼出的參数表。</p><h4 id="參数表标识"><a href="#參数表标识" class="headerlink" title="參数表标识:"></a>參数表标识:</h4><p>__stdcall方式，是“@@YG”;</p><p>__cdecl方式，是“@@YA”;</p><p> __fastcall方式，是“@@YI;</p><table><thead><tr><th>参数类型</th><th>拼写代号</th></tr></thead><tbody><tr><td>void</td><td>X</td></tr><tr><td>char</td><td>D</td></tr><tr><td>unsigned char</td><td>E</td></tr><tr><td>short</td><td>F</td></tr><tr><td>int</td><td>H</td></tr><tr><td>unsigned int</td><td>I</td></tr><tr><td>long</td><td>J</td></tr><tr><td>unsigned long(DWORD)</td><td>K</td></tr><tr><td>float</td><td>M</td></tr><tr><td>double</td><td>N</td></tr><tr><td>bool</td><td>_N</td></tr><tr><td>struct</td><td>U</td></tr><tr><td>指针</td><td>PA</td></tr><tr><td>const指针</td><td>PB</td></tr></tbody></table><p>PA or PB后面的代号表明指针类型。</p><p>假设同样类型的指针连续出现，以“0”取代，一 个“0”代表一次反复。</p><p>U表示结构类型。通常后跟结构体的类型名，用“@@”表示结构类型名的结束。</p><p>參数表后以“@Z”标识整个名字的结束。假设该函数无參数，则 以“Z”标识结束。</p><p>对于C++的类成员函数（其调用方式是thiscall）。函数的名字修饰与非成员的C++函数稍有不同，首先就是在函数名字和參数表之间插入以“@”字 符引导的类名。其次是參数表的開始标识不同，公有（<em>public</em>）成员函数的标识是<strong>“@@QAE”</strong>,保护（<em>protected</em>）成员函数的标识是 <strong>“@@IAE”</strong>,私有（<em>private</em>）成员函数的标识是<strong>“@@AAE”</strong>，假设函数声明使用了constkeyword，则对应的标识应分别为 <strong>“@@QBE”</strong>，<strong>“@@IBE”</strong>和<strong>“@@ABE”</strong>。</p><p>假设參数类型是类实例的引用。则使用<strong>“AAV1”</strong>，对于const类型的引用。则使用<strong>“ABV1”</strong>。</p><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Function1</span> <span class="hljs-params">(<span class="hljs-type">char</span> *var1,<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>其函数修饰名为: <strong>?Function1@@YGHPADK@Z</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Function2</span><span class="hljs-params">()</span></span>; <br></code></pre></td></tr></table></figure><p>其函数修饰名则为**?Function2@@YGXXZ**</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CTest</span> <br>&#123; <br>...... <br><span class="hljs-keyword">private</span>: <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Function</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>; <br><span class="hljs-keyword">protected</span>: <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CopyInfo</span><span class="hljs-params">(<span class="hljs-type">const</span> CTest &amp;src)</span></span>; <br><span class="hljs-keyword">public</span>: <br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">DrawText</span><span class="hljs-params">(HDC hdc, <span class="hljs-type">long</span> pos, <span class="hljs-type">const</span> TCHAR* text, RGBQUAD color, BYTE bUnder, <span class="hljs-type">bool</span> bSet)</span></span>; <br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">InsightClass</span><span class="hljs-params">(DWORD dwClass)</span> <span class="hljs-type">const</span></span>; <br>...... <br>&#125;;<br></code></pre></td></tr></table></figure><p>对于成员函数Function，其函数修饰名为**?Function@CTest@@AAEXH@Z**<br>对于成员函数CopyInfo，其函数修饰名为 <strong>“?CopyInfo@CTest@@IAEXABV1@@Z”</strong><br>DrawText是一个比較复杂的函数声明。不仅有<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>參数。还有结构体參数和HDC 句柄參数。须要指出的是HDC实际上是一个HDC结构类型的指针，这个參数的表示就是“PAUHDC@@”，其完整的函数修饰名为<br><strong>“?DrawText@CTest@@QAEJPAUHDC__@@JPBDUtagRGBQUAD@@E_N@Z”。</strong><br>对于InsightClass是一个共有的const函数。它的成员函数标识是“@@QBE”，完整的修饰名就是<br><strong>“?InsightClass@CTest@@QBEJK@Z”。</strong></p><blockquote><p>不管是C函数名修饰方式还是C++函数名修饰方式均不改变输出函数名中的字符大写和小写。这和PASCAL调用约定不同，PASCAL约定输出的函数名无不论什么修饰且所有大写。</p></blockquote><h2 id="3、相关函数"><a href="#3、相关函数" class="headerlink" title="3、相关函数"></a>3、相关函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">DWORD IMAGEAPI <span class="hljs-title">UnDecorateSymbolName</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  PCSTR name,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out] PSTR  outputString,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  DWORD maxStringLength,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  DWORD flags</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>被包含于头文件&lt;dbghelp.h&gt; </p><h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[in] name:<br><span class="hljs-comment">//已修饰的 C++ 符号名。此名称能以始终为问号 (?) 的首字符鉴别。</span><br><br>[out]   outputString<br><span class="hljs-comment">//指向字符串缓冲区的指针，该缓冲区接收未修饰的名字。</span><br><br>[in]  maxStringLength<br><span class="hljs-comment">//outputString缓冲区的大小，为字符数。</span><br>    <br>[in] flags<br><span class="hljs-comment">//用于反修饰已修饰名称的方式的选项。此参数能为零或更多个下列值。</span><br></code></pre></td></tr></table></figure><p>flag值：</p><table><thead><tr><th><strong>值</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td><strong>UNDNAME_32_BIT_DECODE</strong><br />0x0800</td><td>反修饰 32 位已修饰名。</td></tr><tr><td><strong>UNDNAME_COMPLETE</strong><br />0x0000</td><td>启用完全的反修饰。</td></tr><tr><td><strong>UNDNAME_NAME_ONLY</strong><br />0x1000</td><td>只反修饰初等声明的名称。返回 [作用域::]名称 。不展开模板形参。</td></tr><tr><td><strong>UNDNAME_NO_ACCESS_SPECIFIERS</strong><br />0x0080</td><td>禁用成员的访问指定符的展开。</td></tr><tr><td><strong>UNDNAME_NO_ALLOCATION_LANGUAGE</strong><br />0x0010</td><td>禁用声明语言说明符的展开。</td></tr><tr><td><strong>UNDNAME_NO_ALLOCATION_MODEL</strong><br />0x0008</td><td>禁用声明模型的展开。</td></tr><tr><td><strong>UNDNAME_NO_ARGUMENTS</strong><br />0x2000</td><td>不反修饰函数参数。</td></tr><tr><td><strong>UNDNAME_NO_CV_THISTYPE</strong><br />0x0040</td><td>禁用初等声明的 <strong>this</strong> 类型上的 CodeView 修饰符的展开。</td></tr><tr><td><strong>UNDNAME_NO_FUNCTION_RETURNS</strong><br />0x0004</td><td>禁用初等声明的返回类型展开。</td></tr><tr><td><strong>UNDNAME_NO_LEADING_UNDERSCORES</strong><br />0x0001</td><td>从 Microsoft 关键字中移除前导下划线。</td></tr><tr><td><strong>UNDNAME_NO_MEMBER_TYPE</strong><br />0x0200</td><td>禁用成员的 static 或 virtual 属性的展开。</td></tr><tr><td><strong>UNDNAME_NO_MS_KEYWORDS</strong><br />0x0002</td><td>禁用 Microsoft 关键字的展开。</td></tr><tr><td><strong>UNDNAME_NO_MS_THISTYPE</strong><br />0x0020</td><td>禁用初等声明的 <strong>this</strong> 类型上的 Microsoft 关键字的展开。</td></tr><tr><td><strong>UNDNAME_NO_RETURN_UDT_MODEL</strong><br />0x0400</td><td>禁用用户定义类型返回的 Microsoft 模型的展开。</td></tr><tr><td><strong>UNDNAME_NO_SPECIAL_SYMS</strong><br />0x4000</td><td>不反修饰特殊名称，如 vtable 、 vcall 、 vector 和 metatype 等。</td></tr><tr><td><strong>UNDNAME_NO_THISTYPE</strong><br />0x0060</td><td>禁用 <strong>this</strong> 类型上的所有修饰符。</td></tr><tr><td><strong>UNDNAME_NO_THROW_SIGNATURES</strong><br />0x0100</td><td>禁用函数和函数指针的 throw 签名的展开。</td></tr></tbody></table><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>若函数成功，则返回 UnDecoratedName 缓冲区中的字符数，不包括 NULL 终止符。</p><p>若函数失败，则返回值为零。欲取得额外的错误信息，需调用 <a href="https://baike.baidu.com/item/GetLastError/4278820?fromModule=lemma_inlink">GetLastError</a> 。</p><p>若函数失败且返回零，则 UnDecoratedName 缓冲区的内容不确定。</p><h4 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">name = <span class="hljs-string">&quot;?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z&quot;</span><br><span class="hljs-built_in">UnDecorateSymbolName</span>(name, outputString, <span class="hljs-number">0x100</span>u, <span class="hljs-number">0</span>)<br>cout&lt;&lt;outputString;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">__FUNCDNAME__<br></code></pre></td></tr></table></figure><h4 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">char</span>* __thiscall <span class="hljs-title">R0Pxx::My_Aut0_PWN</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)</span> </span>&#123;<br>    std::cout &lt;&lt; __FUNCDNAME__ &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="4、神奇的事"><a href="#4、神奇的事" class="headerlink" title="4、神奇的事"></a>4、神奇的事</h2><p>因为C的编译方式和C++有点不同，所以会导致同一个函数，各自在两种语言的的环境下名字修饰会不一样<br>例如：</p><p><code>long MakeFun(long lFun); </code>在C下是<code>_MakeFun@4</code>，但是在CPP下则是<code>MakeFun@@YGJJ@Z</code></p>]]></content>
    
    
    <categories>
      
      <category>语言知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图床搭建记录</title>
    <link href="/2022/08/06/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/08/06/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>总算搞定图床了。。。。就是要开梯子才能正常上传图片，试过jsDiver CND，寄的很惨，能成功上传但是不能获取。。</p><p>神奇的是，自己后来复现在typora测试没有成功。。。但是图片能正常使用</p></blockquote><p>用的是Picgo+github技术。</p><h2 id="先搞定github的token先："><a href="#先搞定github的token先：" class="headerlink" title="先搞定github的token先："></a>先搞定github的token先：</h2><h3 id="1、创建仓库"><a href="#1、创建仓库" class="headerlink" title="1、创建仓库"></a>1、创建仓库</h3><p>设置公开，<strong>名字要记住</strong></p><h3 id="2、创建tokens"><a href="#2、创建tokens" class="headerlink" title="2、创建tokens"></a>2、创建tokens</h3><p>在github里面的<code>setting/Developer settings/Personal access tokens</code>里面创建一个token</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo/20220806173656.png"></p><p>设定名字日期：</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo/image-20220806173748128.png" alt="image-20220806173748128"></p><p>注意要勾选repo里面的内容</p><p>点击最下方的Generate token创建，然后把弹出来的页面的token复制，等下要用。</p><h2 id="PicGo部分"><a href="#PicGo部分" class="headerlink" title="PicGo部分"></a>PicGo部分</h2><p>自行搜索然后下载安装：</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo/image-20220806173954976.png" alt="image-20220806173954976"></p><p>设置，仓库名是你的{github_username}&#x2F;{前面创建的仓库名}<br>token就是刚刚的token，分支默认master，存储路径就能在你的仓库里面设置个文件夹，<br>自定义域名：<code>https://raw.githubusercontent.com/用户名/仓库名/分支名</code></p><p>确定设置为默认。</p><h2 id="Typora部分"><a href="#Typora部分" class="headerlink" title="Typora部分"></a>Typora部分</h2><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo/image-20220806174325164.png" alt="image-20220806174325164"></p><p>如图所示设置，记得PicGo路径需要手动设置安装的路径，点击验证图片上传选项即可测试：</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo/image-20220806174722598.png" alt="image-20220806174722598"></p><p>此为成功。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>奇奇怪怪的函数01</title>
    <link href="/2022/08/01/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E5%87%BD%E6%95%B001/"/>
    <url>/2022/08/01/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E5%87%BD%E6%95%B001/</url>
    
    <content type="html"><![CDATA[<h1 id="1、FindResourceA"><a href="#1、FindResourceA" class="headerlink" title="1、FindResourceA"></a>1、FindResourceA</h1><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">HRSRC FindResourceA(<br>  HMODULE hModule,<br>  LPCSTR  lpName,<br>  LPCSTR  lpType<br>);<br>FindResourceA <span class="hljs-keyword">function</span><br>Determines the <span class="hljs-keyword">location</span> <span class="hljs-keyword">of</span> a resource <span class="hljs-keyword">with</span> the specified <span class="hljs-keyword">type</span> <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> <span class="hljs-keyword">in</span> the specified module.<br>确定具有指定类型和名称的资源在指定模块中的位置。<br>hModule：处理包含资源的可执行文件的模块。<span class="hljs-keyword">NULL</span>值则指定模块句柄指向操作系统通常情况下创建最近过程的相关位图文件。<br>lpName：指定资源名称。<br>lpType：指定资源类型。<br>返回值：如果函数运行成功，那么返回值为指向被指定资源信息块的句柄。为了获得这些资源，将这个句柄传递给LoadResource函数。如果函数运行失败，则返回值为<span class="hljs-keyword">NULL</span>。<br></code></pre></td></tr></table></figure><h1 id="2、SizeofResource"><a href="#2、SizeofResource" class="headerlink" title="2、SizeofResource"></a>2、SizeofResource</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">表示该函数返回指定资源的字节数大小。<br></code></pre></td></tr></table></figure><h1 id="3、LoadResource"><a href="#3、LoadResource" class="headerlink" title="3、LoadResource"></a>3、LoadResource</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">LoadResource <span class="hljs-keyword">function</span><br><span class="hljs-title">检索一个句柄，该句柄可用于获取指向内存中指定资源的第一个字节的指针。</span><br></code></pre></td></tr></table></figure><h1 id="4、-gmpz-init-set-str"><a href="#4、-gmpz-init-set-str" class="headerlink" title="4、__gmpz_init_set_str"></a>4、__gmpz_init_set_str</h1><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta">其实就是 mpz_init_set_str <span class="hljs-built_in">int</span> mpz_init_set_str (mpz_t rop, <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> *<span class="hljs-built_in">str</span>, <span class="hljs-built_in">int</span> base) 函数：<br><br>这三个参数分别是多精度整数变量，字符串，进制。 这个函数的作用就是将 <span class="hljs-built_in">str</span> 字符数组以 base 指定的进制解读成数值并写入 rop 所指向的内存。<br><br>mpz_init_set_str(b, “<span class="hljs-number">200000</span>”, <span class="hljs-number">10</span>)； <span class="hljs-comment">//即 b=200000，十进制</span><br></code></pre></td></tr></table></figure><h1 id="5、-mpz-powm"><a href="#5、-mpz-powm" class="headerlink" title="5、 mpz_powm"></a>5、 mpz_powm</h1><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs smali">mpz_powm (mpz_t rop,<span class="hljs-built_in"> const </span>mpz_t base,<span class="hljs-built_in"> const </span>mpz_t exp,<span class="hljs-built_in"> const </span>mpz_t mod) 函数：<br>其实就是计算 base 的 exp 次方，并对 mod 取模，最后将结果写入 rop 中， 这个运算的过程和RSA的加密过程一样。<br><br>mpz_powm(op1,op2,op3,op4)； //求幂模函数 即 op1=op2^op3 mod op4;<br><br></code></pre></td></tr></table></figure><h1 id="6、-CreateThread"><a href="#6、-CreateThread" class="headerlink" title="6、 CreateThread"></a>6、 CreateThread</h1><p>在C&#x2F;C++中可以通过CreateThread函数在进程中创建线程，函数的具体格式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">HANDLE <span class="hljs-title">CreateThread</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">                    LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">                    DWORD dwStackSize,</span></span><br><span class="hljs-params"><span class="hljs-function">                    LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="hljs-params"><span class="hljs-function">                    LPVOID lpParameter,</span></span><br><span class="hljs-params"><span class="hljs-function">                    DWORD dwCreationFlags,</span></span><br><span class="hljs-params"><span class="hljs-function">                    LPDWORD lpThreadID</span></span><br><span class="hljs-params"><span class="hljs-function">                   )</span></span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数的含义如下：</span><br><span class="hljs-comment">lpThreadAttrivutes：指向SECURITY_ATTRIBUTES的指针，用于定义新线程的安全属性，一般设置成NULL；</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">dwStackSize：分配以字节数表示的线程堆栈的大小，默认值是0；</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">lpStartAddress：指向一个线程函数地址。每个线程都有自己的线程函数，线程函数是线程具体的执行代码；</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">lpParameter：传递给线程函数的参数；</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">dwCreationFlags：表示创建线程的运行状态，其中CREATE_SUSPEND表示挂起当前创建的线程，而0表示立即执行当前创建的进程；</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">lpThreadID：返回新创建的线程的ID编号；</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>如果函数调用成功，则返回新线程的句柄，调用<code>WaitForSingleObject</code>函数等待所创建线程的运行结束。函数的格式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">DWORD <span class="hljs-title">WaitForSingleObject</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">                          HANDLE hHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">                          DWORD dwMilliseconds</span></span><br><span class="hljs-params"><span class="hljs-function">                         )</span></span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数的含义如下：</span><br><span class="hljs-comment">hHandle：指定对象或时间的句柄；</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">dwMilliseconds：等待时间，以毫秒为单位，当超过等待时间时，此函数返回。如果参数设置为0，则该函数立即返回；如果设置成INFINITE，则该函数直到有信号才返回。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>一般情况下需要创建多个线程来提高程序的执行效率，但是多个线程同时运行的时候可能调用线程函数，在多个线程同时对一个内存地址进行写入操作，由于CPU时间调度的问题，写入的数据会被多次覆盖，所以要使线程同步。</p><p>就是说，当有一个线程对文件进行操作时，其它线程只能等待。可以通过临界区对象实现线程同步。临界区对象是定义在数据段中的一个CRITICAL_SECTION结构，Windows内部使用这个结构记录一些信息，确保同一时间只有一个线程访问改数据段中的数据。</p><p>使用临界区的步骤如下：</p><p>（1）初始化一个CRITICAL_SECTION结构；在使用临界区对象之前，需要定义全局CRITICAL_SECTION变量，在调用<code>CreateThread</code>函数前调用<code>InitializeCriticalSection</code>函数初始化临界区对象；</p><p>（2）申请进入一个临界区；在线程函数中要对保护的数据进行操作前，可以通过调用<code>EnterCriticalSection</code>函数申请进入临界区。由于同一时间内只能有一个线程进入临界区，所以在申请的时候如果有一个线程已经进入临界区，则该函数就会一直等到那个线程执行完临界区代码；</p><p>（3）离开临界区；当执行完临界区代码后，需要调用<code>LeaveCriticalSection</code>函数离开临界区；</p><p>（4）删除临界区；当不需要临界区时调用<code>DeleteCriticalSection</code>函数将临界区对象删除；</p><h1 id="7、-CloseHandle"><a href="#7、-CloseHandle" class="headerlink" title="7、 CloseHandle"></a>7、 CloseHandle</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp">CloseHandle函数<br><br>　　<span class="hljs-function">BOOL <span class="hljs-title">CloseHandle</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">　　HANDLE hObject</span></span><br><span class="hljs-params"><span class="hljs-function">　　)</span></span>;<br><br>　　<span class="hljs-comment">/*</span><br><span class="hljs-comment">　　参数</span><br><span class="hljs-comment">　　hObject ：代表一个已打开对象handle。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">　　返回值</span><br><span class="hljs-comment">　　TRUE：执行成功；</span><br><span class="hljs-comment">　　FALSE：执行失败，可以调用GetLastError()获知失败原因。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">　　函数说明：</span><br><span class="hljs-comment">　　关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。在CreateThread成功之后会返回一个hThread的handle，且内核对象的计数加1，CloseHandle之后，引用计数减1，当变为0时，系统删除内核对象。</span><br><span class="hljs-comment">　　若在线程执行完之后，没有调用CloseHandle，在进程执行期间，将会造成内核对象的泄露，相当于句柄泄露，但不同于内存泄露，这势必会对系统的效率带来一定程度上的负面影响。但当进程结束退出后，系统会自动清理这些资源。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><blockquote><p>Closing a thread handle does not terminate the associated thread. To remove a thread object, you must terminate the thread, then close all handles to the thread.</p></blockquote><p>1，线程和线程句柄（Handle）不是一个东西，线程是在cpu上运行的…..（说不清楚了），线程句柄是一个内核对象。我们可以通过句柄来操作线程，但是线程的生命周期和线程句柄的生命周期不一样的。线程的生命周期就是线程函数从开始执行到return，线程句柄的生命周期是从<code>CreateThread</code>返回到你<code>CloseHandle()</code>。</p><p>2，所有的内核对象（包括线程Handle）都是系统资源，用了要还的，也就是说用完后一定要<code>closehandle</code>关闭之，如果不这么做，你系统的句柄资源很快就用光了。</p><p>3，如果你<code>CreateThread</code>以后需要对这个线程做一些操作，比如改变优先级，被其他线程等待，强制<code>TermateThread</code>等，就要保存这个句柄，使用完了在<code>CloseHandle</code>。如果你开了一个线程，而不需要对它进行如何干预，<code>CreateThread</code>后直接<code>CloseHandle</code>就行了。</p><p>所以<br><code>CloseHandel(ThreadHandle );</code><br>只是关闭了一个线程句柄对象，表示我不再使用该句柄，即不对这个句柄对应的线程做任何干预了。并没有结束线程。</p>]]></content>
    
    
    <categories>
      
      <category>奇奇怪怪的函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>py编译逆向学习</title>
    <link href="/2022/05/23/py%E7%BC%96%E8%AF%91%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/05/23/py%E7%BC%96%E8%AF%91%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="PYC-文件"><a href="#PYC-文件" class="headerlink" title="PYC 文件"></a>PYC 文件</h1><p>pyc 文件是 python 在编译过程中出现的主要中间过程文件。pyc 文件是二进制的，类似 java 的字节码，可以由 python 虚拟机直接执行的。</p><h2 id="PyCodeObject"><a href="#PyCodeObject" class="headerlink" title="PyCodeObject"></a>PyCodeObject</h2><p>实际上，pyc 文件就是 PyCodeObject 对象在硬盘上的保存形式。</p><p>而 PyCodeObject 的结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    PyObject_HEAD<br>    <span class="hljs-type">int</span> co_argcount;        <span class="hljs-comment">/* 位置参数个数 */</span><br>    <span class="hljs-type">int</span> co_nlocals;         <span class="hljs-comment">/* 局部变量个数 */</span><br>    <span class="hljs-type">int</span> co_stacksize;       <span class="hljs-comment">/* 栈大小 */</span><br>    <span class="hljs-type">int</span> co_flags;   <br>    PyObject *co_code;      <span class="hljs-comment">/* 字节码指令序列 */</span><br>    PyObject *co_consts;    <span class="hljs-comment">/* 所有常量集合 */</span><br>    PyObject *co_names;     <span class="hljs-comment">/* 所有符号名称集合 */</span><br>    PyObject *co_varnames;  <span class="hljs-comment">/* 局部变量名称集合 */</span><br>    PyObject *co_freevars;  <span class="hljs-comment">/* 闭包用的的变量名集合 */</span><br>    PyObject *co_cellvars;  <span class="hljs-comment">/* 内部嵌套函数引用的变量名集合 */</span><br>    <span class="hljs-comment">/* The rest doesn’t count for hash/cmp */</span><br>    PyObject *co_filename;  <span class="hljs-comment">/* 代码所在文件名 */</span><br>    PyObject *co_name;      <span class="hljs-comment">/* 模块名|函数名|类名 */</span><br>    <span class="hljs-type">int</span> co_firstlineno;     <span class="hljs-comment">/* 代码块在文件中的起始行号 */</span><br>    PyObject *co_lnotab;    <span class="hljs-comment">/* 字节码指令和行号的对应关系 */</span><br>    <span class="hljs-type">void</span> *co_zombieframe;   <span class="hljs-comment">/* for optimization only (see frameobject.c) */</span><br>&#125; PyCodeObject;<br></code></pre></td></tr></table></figure><h2 id="PyObject-HEAD"><a href="#PyObject-HEAD" class="headerlink" title="PyObject_HEAD"></a>PyObject_HEAD</h2><p>不同的 Python 版本会有不同的 PyObject_HEAD，以下是各版本的文件头：</p><table><thead><tr><th>Python 版本</th><th>十六进制文件头</th></tr></thead><tbody><tr><td>Python 2.7</td><td><code>03f30d0a00000000</code></td></tr><tr><td>Python 3.0</td><td><code>3b0c0d0a00000000</code></td></tr><tr><td>Python 3.1</td><td><code>4f0c0d0a00000000</code></td></tr><tr><td>Python 3.2</td><td><code>6c0c0d0a00000000</code></td></tr><tr><td>Python 3.3</td><td><code>9e0c0d0a0000000000000000</code></td></tr><tr><td>Python 3.4</td><td><code>ee0c0d0a0000000000000000</code></td></tr><tr><td>Python 3.5</td><td><code>170d0d0a0000000000000000</code></td></tr><tr><td>Python 3.6</td><td><code>330d0d0a0000000000000000</code></td></tr><tr><td>Python 3.7</td><td><code>420d0d0a000000000000000000000000</code></td></tr><tr><td>Python 3.8</td><td><code>55 0d 0d 0a 00 00 00 00 00 00 00 00 00 00 00 00</code></td></tr><tr><td>Python 3.9</td><td><code>610d0d0a000000000000000000000000</code></td></tr><tr><td>Python 3.10</td><td><code>6f0d0d0a000000000000000000000000</code></td></tr></tbody></table><h2 id="反反编译"><a href="#反反编译" class="headerlink" title="反反编译"></a>反反编译</h2><h3 id="更改魔术头"><a href="#更改魔术头" class="headerlink" title="更改魔术头"></a>更改魔术头</h3><p>当想要保护我们的 pyc 文件不被反编译，最简单的做法就是更改魔术头，即 PyObject_HEAD。</p><p>可能是完全删除魔术头，也可能是修改为不是原生版本的魔术头，我们只需要根据情况添加或修改即可。</p><h1 id="PYD-文件"><a href="#PYD-文件" class="headerlink" title="PYD 文件"></a>PYD 文件</h1><p>pyd 文件相当于 python 的运行时 dll，在 python 代码中可以直接使用 <code>import</code> 将 pyd 文件当作模块导入。</p><p>对于 pyd 的逆向，我们需要借助 ida 的 <code>attach</code> 动态调试跟静态分析。</p><h1 id="pyexe的逆向"><a href="#pyexe的逆向" class="headerlink" title="pyexe的逆向"></a>pyexe的逆向</h1><p>PyInstaller打包后，pyc文件的前8个字节会被抹掉，所以最后要自己添加回去</p><p>逆向：</p><p>用pyinstxtractor来解pyc包</p><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip install pyinstxtractor<br></code></pre></td></tr></table></figure><p>执行脚本</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python pyinstxtractor.py **.exe<br></code></pre></td></tr></table></figure><p>就会解包得到一个文件夹(一般命名为<strong>**.exe_extracted</strong>)</p><p>里面只用注意两个文件，其他的一般是库脚本</p><p>一个是<em><strong>1.pyc</strong></em>，另一个是<em><strong>struct.pyc</strong></em>,</p><p>同时会有提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs \">PE:<br>[+] Processing pyre.exe<br>[+] Pyinstaller version: 2.1+<br>[+] Python version: 37<br>[+] Length of package: 5796250 bytes<br>[+] Found 61 files in CArchive<br>[+] Beginning extraction...please standby<br>[+] Possible entry point: pyiboot01_bootstrap.pyc<br>[+] Possible entry point: 1.pyc<br>[!] Warning: This script is running in a different Python version than the one used to build the executable.<br>[!] Please run this script in Python37 to prevent extraction errors during unmarshalling<br>[!] Skipping pyz extraction<br>[+] Successfully extracted pyinstaller archive: pyre.exe<br></code></pre></td></tr></table></figure><p>如果解包出来发现原来的pyc脚本是用与自己的python的版本不一样的话，会有警告：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">[!] Warning: This script is running <span class="hljs-keyword">in</span> a different Python version than the one used to build the executable.<br></code></pre></td></tr></table></figure><p>这个是告诉你版本号不同，魔术头被修改了；</p><p>只需要自己将魔术头给改正，一般struct.pyc的前16字节就是所要的魔术头；</p><p>魔术头依照版本号来确定：</p><p>在刚刚的提示里面就含有这个文件对应的版本号</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[+]</span> Python version: <span class="hljs-number">37</span><br></code></pre></td></tr></table></figure><p>E.P.:</p><p>原：</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo/image-20220919203628458.png" alt="image-20220919203628458"></p><p>改：</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo/image-20220919203711306.png" alt="image-20220919203711306"></p><p>​E3这个是个可以作为本文件的标记，所以可见多了4个字节，复制粘贴struct.pyc的头时顺便把那4个给覆盖了。</p><p>修改完之后就简单了，对1.pyc使用 uncompyle 可以将 pyc 文件完美反编译。<a href="https://github.com/rocky/python-uncompyle6">uncompyle6 Github主页</a></p><p>安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> uncompyle<br></code></pre></td></tr></table></figure><p>而 uncompyle 用法如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">uncompyle6</span> <span class="hljs-regexp">*.pyc</span><br></code></pre></td></tr></table></figure><p>uncomyle6 会直接将反编译后的源码输出在标准输出中，推荐用法：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">uncompyle6</span> <span class="hljs-regexp">*.pyc</span> &gt; filename<br></code></pre></td></tr></table></figure><p>将源码输出到文件里面，比如说：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">uncompyle6</span> <span class="hljs-number">1</span>.pyc &gt; <span class="hljs-number">1</span>.py<br></code></pre></td></tr></table></figure><p>输出后就直接看1.py即可。</p><h1 id="直接输出pyc"><a href="#直接输出pyc" class="headerlink" title="直接输出pyc"></a>直接输出pyc</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> dis<br><span class="hljs-keyword">import</span> marshal<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>os.chdir(<span class="hljs-string">r&#x27;C:\Users\74592\Desktop\hgame2023\week2\stream&#x27;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;stream.pyc&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    code = marshal.load(file)<br><br><span class="hljs-built_in">print</span>(dis.disassemble(code))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>语言知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RC4</title>
    <link href="/2022/03/30/RC4/"/>
    <url>/2022/03/30/RC4/</url>
    
    <content type="html"><![CDATA[<p>因为是一开始学逆向时候学的，所以没有什么完整的笔记，就纯纯记录一个脚本：</p><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><p>RC4最大的特点就是将密文顺着跑，就能得到明晚，所以一般推荐直接照抄加密。</p><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> S[<span class="hljs-number">256</span>],T[<span class="hljs-number">256</span>],t,buf2[]=&#123;<span class="hljs-number">182</span>,<span class="hljs-number">148</span>,<span class="hljs-number">250</span>,<span class="hljs-number">143</span>,<span class="hljs-number">61</span>,<span class="hljs-number">95</span>,<br>                                          <span class="hljs-number">178</span>,<span class="hljs-number">224</span>,<span class="hljs-number">234</span>,<span class="hljs-number">15</span>,<span class="hljs-number">210</span>,<span class="hljs-number">102</span>,<br>                                          <span class="hljs-number">152</span>,<span class="hljs-number">108</span>,<span class="hljs-number">157</span>,<span class="hljs-number">231</span>,<span class="hljs-number">27</span>,<span class="hljs-number">8</span>,<br>                                          <span class="hljs-number">64</span>,<span class="hljs-number">113</span>,<span class="hljs-number">197</span>,<span class="hljs-number">190</span>,<span class="hljs-number">111</span>,<span class="hljs-number">109</span>,<br>                                          <span class="hljs-number">124</span>,<span class="hljs-number">123</span>,<span class="hljs-number">9</span>,<span class="hljs-number">141</span>,<span class="hljs-number">168</span>,<span class="hljs-number">189</span>,<br>                                          <span class="hljs-number">243</span>,<span class="hljs-number">246</span> &#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> tuohuo[]=&#123;<span class="hljs-string">&quot;123456&quot;</span>&#125;;<br>    <span class="hljs-type">int</span> i,len,q;<br><br>    len=<span class="hljs-built_in">strlen</span>(tuohuo);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> K[<span class="hljs-number">32</span>];<span class="hljs-comment">//和buf2的大小一至.</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">256</span>;i++) &#123;<br>        S[i]=i;<br>        T[i]=tuohuo[i%len];<br>    &#125;<span class="hljs-comment">//初始化.</span><br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">256</span>;i++)&#123;<br>        j=(j+S[i]+T[i])%<span class="hljs-number">256</span>;<br>        t=S[i];<br>        S[i]=S[j];<br>        S[j]=t;<br>    &#125;<span class="hljs-comment">//初始排序，S[]是密钥流.</span><br>    i=j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> r=<span class="hljs-number">0</span>;r&lt;<span class="hljs-number">32</span>;r++)&#123;<br>        i=(i+<span class="hljs-number">1</span>)%<span class="hljs-number">256</span>;<br>        j=(j+S[i])%<span class="hljs-number">256</span>;<br>        t=S[i];<br>        S[i]=S[j];<br>        S[j]=t;<br>        q=(S[i]+S[j])%<span class="hljs-number">256</span>;<br>        K[r]=S[q];<br>        buf2[r] ^= S[(S[j]+S[i])%<span class="hljs-number">256</span>];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,buf2[r]);<br>    &#125;<span class="hljs-comment">//生成密钥.</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>加密算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Aspack手动脱壳笔记</title>
    <link href="/2022/03/27/Aspack%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/03/27/Aspack%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>﻿最近打了buu的DASCTF的比赛，但我是菜狗，就只做出了re的签到题（雾），还是学到了不少东西，就是Aspack的手动脱壳，记录下。</p><p>首先是用peid查壳，可以看到是aspcak壳。（exeinfope也可以，就是启动没有那么快）<br><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2c86f2a99008f4c429e4150af8a8db6b6.png" alt="在这里插入图片描述"><br>然后在lordPE里面选特征值旁边的三个点<br><img src="https://img-blog.csdnimg.cn/9624e6f7a2744ba48e3921a057e1e588.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQXp1cmV1c19zaW11,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>设置重定位已分离，保存即可<br><img src="https://img-blog.csdnimg.cn/970aca8f86624de79048e76df50bf7c4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQXp1cmV1c19zaW11,size_8,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后用ollydbg进行动调找函数的入口：<br>会弹出一个窗口：</p><blockquote><p>压缩代码？<br>模块“XXXX”的快速统计报告标明其代码段要么被压缩、加密，要么包含大量的嵌入数据，代码分析的结果可能非常不可靠或者完全错误。是否继续分析？</p></blockquote><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2a1169d79f1c94b878b20804c2738d5ef.png" alt="在这里插入图片描述"></p><p><strong>这里选否</strong></p><p>然后程序就会停在一个push处<br><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2934a817b4c284ac59891970d10534e90.png" alt="在这里插入图片描述"><br>用<strong>F8</strong>单步进入一下，就会停在一个call处，查看此时旁边的ESP的地址是红的，右键其打个硬件断点：<br><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2e53b4ff2875742c4b3f686674085227d.png" alt="在这里插入图片描述"><br>然后F9运行到断点处。可以看到停在了一个jnz处<br><img src="https://img-blog.csdnimg.cn/f14f81139d4841cebbf29d896c0a3af8.png" alt="在这里插入图片描述"><br>用F7单步到push处再F7两次，就跳转到另一个界面<br><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2e6a07c595a024744b041ce8f40ee7561.png" alt="在这里插入图片描述"><br>F7步入到<strong>call</strong>处。此时按下回车可以看到四个安全函数，能确定函数入口就在后面<br><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo242e9f7b9e0fb41e2b8ecb7b57350f564.png" alt="在这里插入图片描述"><br>摁esc返回。<br>此时右键刚刚那个call的位置，从这里开始脱壳<br><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo26d89b79a9d51463aa0f0aa4e9e258215.png" alt="在这里插入图片描述"><br>有两处需要特别注意，一处就是取消勾选重建输入表，另一处是要记下修正为后面那传数字。<br><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2ba62c4e8275f428cbd97319545139263.png" alt="在这里插入图片描述"><br>然后脱壳，起个随便的名字。</p><p><em><strong>现在不要退出ollydbg</strong></em></p><p>以<strong>管理员身份</strong>运行<strong>ImportREConstructor</strong><br>不是管理员就有可能看不到要脱壳的程序运行<br><img src="https://img-blog.csdnimg.cn/aabbd96f56354947beb4a8307d536e15.png" alt="在这里插入图片描述"><br>此处找到要脱壳的文件<br><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2ebe907b5fbf64af692f5a42e51585e52.png" alt="在这里插入图片描述"><br>还记得刚刚要记住的那串数字吗？<br>OEP处填入，点击iat自动搜索。<br>获取导入表，<br><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2c85efe23ee664ffeabc97cc33835155c.png" alt="在这里插入图片描述"><br>然后修正转储到刚刚ollydbg脱壳出的那个文件。<br>好了到此脱壳结束，可以正常使用ida，F5了。</p>]]></content>
    
    
    <categories>
      
      <category>壳</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TEA</title>
    <link href="/2022/03/14/TEA/"/>
    <url>/2022/03/14/TEA/</url>
    
    <content type="html"><![CDATA[<h1 id="TEA类算法笔记"><a href="#TEA类算法笔记" class="headerlink" title="TEA类算法笔记"></a>TEA类算法笔记</h1><h2 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a>TEA</h2><h3 id="一、简述"><a href="#一、简述" class="headerlink" title="一、简述"></a>一、简述</h3><p>TEA算法有64位的明文，128位的密钥以及一个常数 $\delta$ 组成。$\delta$源自于黄金比例，但它的数值的精确度并不重要，于是被定义为 $\delta$&#x3D;「($\tilde{A}$5 - 1)231」(即程序里面的<strong>0×9E3779B9</strong>)</p><p>TEA是将明文每64位位一组进行加密，每次加密将这64位分为两部分，高32位和低32位(后面分别用Mup和Mdown来表示)，而密钥(Key)则拆分为4部分。</p><h3 id="二、加密过程"><a href="#二、加密过程" class="headerlink" title="二、加密过程"></a>二、加密过程</h3><p>加密过程：sum+&#x3D; $\delta$  $\longrightarrow$ </p><p>Mup +&#x3D; ((Mdown&lt;&lt;4)+Key[0])^(Mdown+sum)^((Mdown&gt;&gt;5)+Key[1])$\longrightarrow$ </p><p>Mdown +&#x3D; ((Mup&lt;&lt;4)+Key[2])^(Mup+sum)^((Mup&gt;&gt;5)+Key[3]).</p><p>一般反复32遍或者64遍，最后将结果覆写回去。</p><p>附上图解：<img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo21272254-b20f9848f97fbcb6" alt="img"></p><h3 id="三、TEA逆向"><a href="#三、TEA逆向" class="headerlink" title="三、TEA逆向"></a>三、TEA逆向</h3><p>1、tea算法的特征就是DELTA值和十六个字节的密钥（也就是128位）。</p><p>2、在逆向程序的时候，可以利用ida的插件<strong>findcypto</strong>识别tea算法</p><p>3、x-&#x3D;0x61c88647和x+&#x3D;0x9e3779b9，这两个值是等价的，可能会在反汇编中看到</p><p>这里将上面测试的代码编译好拖入IDA中进行观察</p><p>可以看到δ就被反编译为<code>v4 -= 1640531527;</code></p><h4 id="TEA算法的变化技巧"><a href="#TEA算法的变化技巧" class="headerlink" title="TEA算法的变化技巧"></a>TEA算法的变化技巧</h4><p>​前面有提到关于”但δ的精确值似乎并不重要”，所以δ的值不一定需要0x9E3779B9，所以这里的话在加密解密的时候可以改变这个δ的值，改了之后就会导致部分识别加密的工具失效来达到算法魔改的目的。</p><h3 id="四、代码（-delta-没有魔改）"><a href="#四、代码（-delta-没有魔改）" class="headerlink" title="四、代码（$\delta$没有魔改）"></a>四、代码（$\delta$没有魔改）</h3><p>加密代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">encrypt</span><span class="hljs-params">(<span class="hljs-type">long</span>* EntryData, <span class="hljs-type">long</span>* Key)</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Mup = EntryData[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Mdown = EntryData[<span class="hljs-number">1</span>];<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> delta = <span class="hljs-number">0x9E3779B9</span>;<br> <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++)<br>    &#123;<br>        sum += delta;<br>        Mup += ((Mdown &lt;&lt; <span class="hljs-number">4</span>) + Key[<span class="hljs-number">0</span>]) ^ (Mdown + sum) ^ ((Mdown &gt;&gt; <span class="hljs-number">5</span>) + Key[<span class="hljs-number">1</span>]);<br>        Mdown += ((Mup &lt;&lt; <span class="hljs-number">4</span>) + Key[<span class="hljs-number">2</span>]) ^ (Mup + sum) ^ ((Mup &gt;&gt; <span class="hljs-number">5</span>) + Key[<span class="hljs-number">3</span>]);<br>    &#125;<br>    <br>    EntryData[<span class="hljs-number">0</span>] = Mup;<br>    EntryData[<span class="hljs-number">1</span>] = Mdown;<br>&#125;<br></code></pre></td></tr></table></figure><p>a^b^c很容易知道反向运行就能逆出来，c^b^a(虽然不用反过来也是一样的)就得到原结果，所以就只需要将加密反过来即可得到解密代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">long</span>* EntryData, <span class="hljs-type">long</span>* Key)</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Mup = EntryData[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Mdown = EntryData[<span class="hljs-number">1</span>];<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> delta = <span class="hljs-number">0x9E3779B9</span>;<br> n=<span class="hljs-number">32</span><br>        <br>   sum = delta*n <span class="hljs-comment">//视次数.</span><br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        Mdown -= ((Mup &lt;&lt; <span class="hljs-number">4</span>) + Key[<span class="hljs-number">2</span>]) ^ (Mup + sum) ^ ((Mup &gt;&gt; <span class="hljs-number">5</span>) + Key[<span class="hljs-number">3</span>]);<br>        Mup -= ((Mdown &lt;&lt; <span class="hljs-number">4</span>) + Key[<span class="hljs-number">0</span>]) ^ (Mdown + sum) ^ ((Mdown &gt;&gt; <span class="hljs-number">5</span>) + Key[<span class="hljs-number">1</span>]);<br>        sum -= delta;<br>    &#125;<br>    <br>    EntryData[<span class="hljs-number">0</span>] = Mup;<br>    EntryData[<span class="hljs-number">1</span>] = Mdown;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后输出即可</p><h3 id="五、腾讯TEA算法分析"><a href="#五、腾讯TEA算法分析" class="headerlink" title="五、腾讯TEA算法分析"></a>五、腾讯TEA算法分析</h3><p>每次处理64位数据，使用128位密钥。数据和密钥都分割成32为无符号整型处理。</p><p>不同点：<strong>TEA标准中使用的32轮加密，而腾讯只用了16轮。</strong></p><p>可以看到其他都一样的，就是迭代次数为16次</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">encrypt</span> <span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">uint32_t</span>* k)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], sum=<span class="hljs-number">0</span>, i;           <span class="hljs-comment">/* set up */</span><br>    <span class="hljs-type">uint32_t</span> delta=<span class="hljs-number">0x9e3779b9</span>;                     <span class="hljs-comment">/* a key schedule constant */</span><br>    <span class="hljs-type">uint32_t</span> k0=k[<span class="hljs-number">0</span>], k1=k[<span class="hljs-number">1</span>], k2=k[<span class="hljs-number">2</span>], k3=k[<span class="hljs-number">3</span>];   <span class="hljs-comment">/* cache key */</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++) &#123;                       <span class="hljs-comment">/* basic cycle start */</span><br>        sum += delta;<br>        v0 += ((v1&lt;&lt;<span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="hljs-number">5</span>) + k1);<br>        v1 += ((v0&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="hljs-number">5</span>) + k3);  <br>    &#125;                                              <span class="hljs-comment">/* end cycle */</span><br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span> <span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">uint32_t</span>* k)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], i;  <span class="hljs-comment">/* set up */</span><br>    <span class="hljs-type">uint32_t</span> delta=<span class="hljs-number">0x9e3779b9</span>;                     <span class="hljs-comment">/* a key schedule constant */</span><br>    <span class="hljs-type">uint32_t</span> sum = delta &lt;&lt; <span class="hljs-number">4</span>;<br>    <span class="hljs-type">uint32_t</span> k0=k[<span class="hljs-number">0</span>], k1=k[<span class="hljs-number">1</span>], k2=k[<span class="hljs-number">2</span>], k3=k[<span class="hljs-number">3</span>];   <span class="hljs-comment">/* cache key */</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">16</span>; i++) &#123;                         <span class="hljs-comment">/* basic cycle start */</span><br>        v1 -= ((v0&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="hljs-number">5</span>) + k3);<br>        v0 -= ((v1&lt;&lt;<span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="hljs-number">5</span>) + k1);<br>        sum -= delta;                                   <br>    &#125;                                              <span class="hljs-comment">/* end cycle */</span><br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="XTEA"><a href="#XTEA" class="headerlink" title="XTEA"></a>XTEA</h2><h3 id="一、算法介绍"><a href="#一、算法介绍" class="headerlink" title="一、算法介绍"></a>一、算法介绍</h3><p>XTEA算法也被称作为Corrected Block TEA</p><p>XTEA是TEA的升级版，增加了更多的密钥表，移位和异或操作等等，设计者是Roger Needham, David Wheeler</p><p>之后 TEA 算法被发现存在缺陷，作为回应，设计者提出了一个 TEA 的升级版本——XTEA（有时也被称为”tean”）。XTEA 跟 TEA 使用了相同的简单运算，但它采用了截然不同的顺序，为了阻止密钥表攻击，四个子密钥（在加密过程中，原 128 位的密钥被拆分为 4 个 32 位的子密钥）采用了一种不太正规的方式进行混合，但速度更慢了。</p><h3 id="二、算法图解"><a href="#二、算法图解" class="headerlink" title="二、算法图解"></a>二、算法图解</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo21272254-e1a16f7960617103" alt="img"></h3><h3 id="三、XTEA算法实现"><a href="#三、XTEA算法实现" class="headerlink" title="三、XTEA算法实现"></a>三、XTEA算法实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br> <br><span class="hljs-comment">/* take 64 bits of data in v[0] and v[1] and 128 bits of key[0] - key[3] */</span><br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">encipher</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> num_rounds, <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>], <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], sum=<span class="hljs-number">0</span>, delta=<span class="hljs-number">0x9E3779B9</span>;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; num_rounds; i++) &#123;<br>        v0 += (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>]);<br>        sum += delta;<br>        v1 += (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>    &#125;<br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">decipher</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> num_rounds, <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>], <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], delta=<span class="hljs-number">0x9E3779B9</span>, sum=delta*num_rounds;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; num_rounds; i++) &#123;<br>        v1 -= (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>        sum -= delta;<br>        v0 -= (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>]);<br>    &#125;<br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> k[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r=<span class="hljs-number">32</span>;<span class="hljs-comment">//num_rounds建议取值为32</span><br>    <span class="hljs-comment">// v为要加密的数据是两个32位无符号整数</span><br>    <span class="hljs-comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加密前原始数据：%u %u\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br>    encipher(r, v, k);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加密后的数据：%u %u\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br>    decipher(r, v, k);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;解密后的数据：%u %u\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a>XXTEA</h2><h3 id="一、XXTEA算法介绍"><a href="#一、XXTEA算法介绍" class="headerlink" title="一、XXTEA算法介绍"></a>一、XXTEA算法介绍</h3><p>XXTEA就被称作为Corrected Block TEA。</p><p>特点：原字符串长度可以不是4的倍数了</p><h3 id="二、XXTEA算法图解"><a href="#二、XXTEA算法图解" class="headerlink" title="二、XXTEA算法图解"></a>二、XXTEA算法图解</h3><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo21586953-20220307161956986-999517630.png" alt="img"></p><h3 id="三、XXTEA算法实现"><a href="#三、XXTEA算法实现" class="headerlink" title="三、XXTEA算法实现"></a>三、XXTEA算法实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-meta">#<span class="hljs-keyword">define</span> MX (z&gt;&gt;5^y<span class="hljs-string">&lt;&lt;2) + (y&gt;</span>&gt;3 ^ z&lt;&lt;4)^(sum^y) + (k[ i&amp;3 ^ e] ^ z);</span><br> <br>  <span class="hljs-type">long</span> <span class="hljs-title function_">btea</span><span class="hljs-params">(<span class="hljs-type">long</span>* v, <span class="hljs-type">long</span> n, <span class="hljs-type">long</span>* k)</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> z=v[n<span class="hljs-number">-1</span>], y=v[<span class="hljs-number">0</span>], sum=<span class="hljs-number">0</span>, e, DELTA=<span class="hljs-number">0x9e3779b9</span>;<br>    <span class="hljs-type">long</span> i, q ;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) &#123;         <br>      q = <span class="hljs-number">6</span> + <span class="hljs-number">52</span>/n;<br>      <span class="hljs-keyword">while</span> (q-- &gt; <span class="hljs-number">0</span>) &#123;<br>        sum += DELTA;<br>        e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n<span class="hljs-number">-1</span>; i++)&#123; <br>            y = v[i+<span class="hljs-number">1</span>];<br>            z = v[i] += MX;<br>        &#125; <br>        y = v[<span class="hljs-number">0</span>];<br>        z = v[n<span class="hljs-number">-1</span>] += MX;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> ;<br>    &#125; <br>      <br>      <br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">-1</span>) &#123; <br>      n = -n;<br>      q = <span class="hljs-number">6</span> + <span class="hljs-number">52</span>/n;<br>      sum = q*DELTA ;<br>      <span class="hljs-keyword">while</span> (sum != <span class="hljs-number">0</span>) &#123;<br>        e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">for</span> (i=n<span class="hljs-number">-1</span>; i&gt;<span class="hljs-number">0</span>; i--) &#123;<br>            z = v[i<span class="hljs-number">-1</span>];<br>            y = v[i] -= MX;   <br>        &#125;<br>        z = v[n<span class="hljs-number">-1</span>];<br>        y = v[<span class="hljs-number">0</span>] -= MX;<br>        sum -= DELTA;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> long btea(long* v, long n, long* k)</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">v是要加密的组元的起始地址，以32bit为单位，这里用long来实现。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">n是要加密的组元个数，正数是加密，负数是解密。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">k是密钥的起始地址，长度为4个组元，4*32=128bit。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">返回值为0或1（对应n=0，没有计算）。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">加密的结果会直接写回到v中。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="四、算法标志"><a href="#四、算法标志" class="headerlink" title="四、算法标志"></a>四、算法标志</h3><p><strong>q &#x3D; 6 + 52&#x2F;n;</strong></p><p><strong>e &#x3D; (sum &gt;&gt; 2) &amp; 3;</strong></p>]]></content>
    
    
    <categories>
      
      <category>加密算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
