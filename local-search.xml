<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>0x2 内核的简单食用异闻录</title>
    <link href="/2024/09/25/0x2%E5%86%85%E6%A0%B8%E7%9A%84%E7%AE%80%E5%8D%95%E9%A3%9F%E7%94%A8%E5%BC%82%E9%97%BB%E5%BD%95/"/>
    <url>/2024/09/25/0x2%E5%86%85%E6%A0%B8%E7%9A%84%E7%AE%80%E5%8D%95%E9%A3%9F%E7%94%A8%E5%BC%82%E9%97%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1>0x0 依赖</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br>sudo apt-get install git fakeroot build-essential ncurses-dev xz-utils qemu flex libncurses5-dev libssl-dev bc bison libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev libelf-dev<br></code></pre></td></tr></table></figure><p>虽然但是，我记得即使这里装了qemu，后面还要自己装个x86-64的来着</p><p>pwn相关：</p><p>hxd写了个<a href="https://github.com/t3uk1/pwninstaller">一键安装脚本</a></p><p>不过好像有bug，要自己手动装一下<a href="https://github.com/pwndbg/pwndbg">pwndbg</a></p><p>好像是因为太新了</p><h1>0x1 获取内核镜像</h1><p>大概有如下三种方式：</p><ul><li>下载内核源码后编译</li><li>直接下载现成的的内核镜像，不过这样我们就不能自己魔改内核了2333</li><li>直接使用自己系统的镜像</li></ul><p>arttnba3师傅介绍了三种，但是我只用了第一种</p><h2 id="I-获取内核源码">I.获取内核源码</h2><p>前往<a href="https://www.kernel.org/">Linux Kernel Archive</a>下载对应版本的内核源码</p><h2 id="II-配置编译选项">II.配置编译选项</h2><p>解压我们下载来的内核源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -xvf linux-5.11.tar.xz</span><br></code></pre></td></tr></table></figure><p>完成后进入文件夹内，执行如下命令开始配置编译选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">make menuconfig</span><br></code></pre></td></tr></table></figure><p>进入如下配置界面</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20240924150028795.png" alt="image-20240924150028795"></p><p>保证勾选如下配置（默认都是勾选了的）：</p><ul><li>Kernel hacking —&gt; Kernel debugging</li><li>Kernel hacking —&gt; Compile-time checks and compiler options —&gt; Compile the kernel with debug info</li><li>Kernel hacking —&gt; Generic Kernel Debugging Instruments –&gt; KGDB: kernel debugger</li><li>kernel hacking —&gt; Compile the kernel with frame pointers</li></ul><p>最后这个 Compile the kernel with frame pointers，可能会找不到，需要修改配置文件<code>lib/Kconfig.debug</code>：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">Symbol: ARCH_WANT_FRAME_POINTERS [=y]<br> │ <span class="hljs-keyword">Type</span>  <span class="hljs-type">: </span>bool<br> │ Defined <span class="hljs-keyword">at</span> lib/Kconfig.debug:<span class="hljs-number">383</span><br></code></pre></td></tr></table></figure><p>把这个符号给添加上一行（默认是没有这行的）：</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20240924150422254.png" alt="image-20240924150422254"></p><p>添加上了之后，就能找到：kernel hacking —&gt; Compile the kernel with frame pointers，应该会是开启的状态</p><p>通常保存的路径在当前目录下的 <code>.config</code> 文件中，如果你在生成配置文件后才想起来忘了改某个选项也可以直接编辑这个文件</p><h2 id="III-开始编译">III.开始编译</h2><p>运行如下命令开始编译，生成内核镜像</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>make -j<span class="hljs-variable">$(</span>nproc) bzImage<br></code></pre></td></tr></table></figure><h2 id="IV-可能出现的错误">IV.可能出现的错误</h2><p>我编译时也出现过这个错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make[1]: *** No rule to make target &#x27;debian/canonical-certs.pem&#x27;, needed by &#x27;certs/x509_certificate_list&#x27;.  Stop<br></code></pre></td></tr></table></figure><p>只需要在 <code>.config</code> 文件中找到 <code>CONFIG_SYSTEM_TRUSTED_KEYS</code>，等于号后面的值改为 <code>&quot;&quot;</code></p><h2 id="V-编译结果">V.编译结果</h2><p>完成之后会出现如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Kernel: arch/x86/boot/bzImage is ready  (#1)<br></code></pre></td></tr></table></figure><p>我们主要关注生成的这两个文件：</p><p><strong>vmlinux：原始内核文件</strong></p><p>在当前目录下提取到<code>vmlinux</code>，为编译出来的原始内核文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">file vmlinux</span><br>vmlinux: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=f1fc85f87a5e6f3b5714dad93a8ac55fa7450e06, with debug_info, not stripped<br></code></pre></td></tr></table></figure><p><strong>bzImage：压缩内核镜像</strong></p><p>在当前目录下的<code>arch/x86/boot/</code>目录下提取到<code>bzImage</code>，为压缩后的内核文件，适用于大内核</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">file <span class="hljs-built_in">arch</span>/x86/boot/bzImage</span><br>arch/x86/boot/bzImage: Linux kernel x86 boot executable bzImage, version 5.11.0 (root@iZf3ye3at4zthpZ) #1 SMP Sun Feb <br></code></pre></td></tr></table></figure><blockquote><p>顺带一提，我是在wsl里面编译的，但是在/mnt/的挂载路径中好像会出现编译问题，但是换到用户路径下就一起正常了。</p></blockquote><p>↓看起来是有用的情报</p><blockquote><h6 id="zImage-bzImage">zImage &amp;&amp; bzImage</h6><p>zImage–是vmlinux经过gzip压缩后的文件。<br>bzImage–bz表示“big zImage”，不是用bzip2压缩的，而是要偏移到一个位置，使用gzip压缩的。两者的不同之处在于，zImage解压缩内核到低端内存(第一个 640K)，bzImage解压缩内核到高端内存(1M以上)。如果内核比较小，那么采用zImage或bzImage都行，如果比较大应该用bzImage。</p><p><a href="https://blog.csdn.net/xiaotengyi2012/article/details/8582886">https://blog.csdn.net/xiaotengyi2012/article/details/8582886</a></p></blockquote><h2 id="EXTRA-添加系统调用">EXTRA.添加系统调用</h2><h3 id="1-分配系统调用号">1.分配系统调用号</h3><p>在<code>arch/x86/entry/syscalls/syscall_64.tbl</code>中添加我们自己的系统调用号，这里用CTF常见数字<code>114514</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ASM">114514    64    3zureus_test        sys_3zureus_test<br></code></pre></td></tr></table></figure><h3 id="2-声明系统调用">2.声明系统调用</h3><p>在<code>include/linux/syscalls.h</code>中添加如下函数声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* for 3zureus&#x27;s personal syscall test */</span><br>asmlinkage <span class="hljs-type">long</span> <span class="hljs-title function_">sys_3zureus_test</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><h3 id="3-添加系统调用函数定义">3.添加系统调用函数定义</h3><p>在<code>kernel/sys.c</code>中添加如下代码（放置于最后一行的<code>#endif /* CONFIG_COMPAT */</code>之前）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">SYSCALL_DEFINE0(<span class="hljs-number">3</span>zureus_test)<br>&#123;<br>    printk(<span class="hljs-string">&quot;3zureus\&#x27; syscall has been called!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">114514</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>SYSCALL_DEFINE0()</code>本质上是一个宏，意为<strong>接收0个参数的系统调用</strong>，其第一个参数为系统调用名</p><p>这里定义了一个简单的输出一句话的系统调用，在这里使用了内核态的<code>printk()</code>函数，输出的信息可以使用<code>dmesg</code>进行查看</p><h3 id="4-重新编译内核">4.重新编译内核</h3><p>这一步参照之前的步骤即可，通过这一步我们要将我们自己的系统调用编译到内核当中</p><h3 id="5-测试系统调用">5.测试系统调用</h3><p>我们使用如下的例程测试我们的新系统调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    syscall(<span class="hljs-number">114514</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译，放入磁盘镜像中后重新打包，qemu起内核后尝试运行我们的例程，结果如下：</p><blockquote><p>因为dmesg输出的东西太多，这里还附加用了grep命令过滤</p></blockquote><p>。。。？为啥会no found</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo29d031f4ef6497f8cc421211e4444517.png" alt="9d031f4ef6497f8cc421211e4444517"></p><p>破案了，因为缺少libc的库，在编译的时候补上-static参数即可</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20240924201607257.png" alt="image-20240924201607257"></p><h1>0x2 使用 busybox 构建文件系统</h1><p>BusyBox 是一个集成了三百多个最常用Linux命令和工具的软件，包含了例如ls、cat和echo等一些简单的工具，我们将用 busybox 为我们的内核提供一个基本的用户环境</p><p>没啥好说的，全抄！</p><h2 id="一、编译busybox">一、编译busybox</h2><h4 id="I-获取busybox源码">I.获取busybox源码</h4><p>在<a href="https://busybox.net/downloads/">busybox.net</a>下载自己想要的版本，笔者这里选用<code>busybox-1.33.0.tar.bz2</code>这个版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget https://busybox.net/downloads/busybox-1.33.0.tar.bz2</span><br></code></pre></td></tr></table></figure><blockquote><p>外网下载的速度可能会比较慢，可以在前面下载Linux源码的时候一起下载，也可以选择去国内的镜像站下载</p></blockquote><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -jxvf busybox-1.33.0.tar.bz2</span><br></code></pre></td></tr></table></figure><h4 id="II-编译busybox源码">II.编译busybox源码</h4><p>进入配置界面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash">make menuconfig</span><br></code></pre></td></tr></table></figure><p>勾选 <code>Settings</code> —&gt; <code>Build static binary file (no shared lib)</code></p><blockquote><p>若是不勾选则需要单独配置 libc，比较麻烦</p></blockquote><p>接下来就是编译了，速度会比编译内核快很多</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">make install</span><br></code></pre></td></tr></table></figure><p>编译完成后会生成一个<code>_install</code>目录，接下来我们将会用它来构建我们的磁盘镜像</p><h2 id="二、建立文件系统">二、建立文件系统</h2><h3 id="I-初始化文件系统">I.初始化文件系统</h3><p>一些简单的初始化操作…</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> _install</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> -pv &#123;bin,sbin,etc,proc,sys,home,lib64,lib/x86_64-linux-gnu,usr/&#123;bin,sbin&#125;&#125;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">touch</span> etc/inittab</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> etc/init.d</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">touch</span> etc/init.d/rcS</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x ./etc/init.d/rcS</span><br></code></pre></td></tr></table></figure><h3 id="II-配置初始化脚本">II.配置初始化脚本</h3><p>首先配置 <code>etc/inttab</code> ，写入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">::sysinit:/etc/init.d/rcS<br>::askfirst:/bin/ash<br>::ctrlaltdel:/sbin/reboot<br>::shutdown:/sbin/swapoff -a<br>::shutdown:/bin/umount -a -r<br>::restart:/sbin/init<br></code></pre></td></tr></table></figure><p>在上面的文件中指定了系统初始化脚本，因此接下来配置 <code>etc/init.d/rcS</code>，写入如下内容，主要是挂载各种文件系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>mount -t proc none /proc<br>mount -t sysfs none /sys<br>mount -t devtmpfs devtmpfs /dev<br>mount -t tmpfs tmpfs /tmp<br>mkdir /dev/pts<br>mount -t devpts devpts /dev/pts<br><br>echo -e &quot;\nBoot took $(cut -d&#x27; &#x27; -f1 /proc/uptime) seconds\n&quot;<br>setsid cttyhack setuidgid 1000 sh<br><br>poweroff -d 0  -f<br></code></pre></td></tr></table></figure><p>也可以在根目录下创建 <code>init</code> 文件，写入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>mount -t proc none /proc<br>mount -t sysfs none /sys<br>mount -t devtmpfs devtmpfs /dev<br><br>exec 0&lt;/dev/console<br>exec 1&gt;/dev/console<br>exec 2&gt;/dev/console<br><br>echo -e &quot;\nBoot took $(cut -d&#x27; &#x27; -f1 /proc/uptime) seconds\n&quot;<br>setsid cttyhack setuidgid 1000 sh<br><br>umount /proc<br>umount /sys<br>poweroff -d 0  -f<br></code></pre></td></tr></table></figure><p>别忘了添加可执行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x ./init</span><br></code></pre></td></tr></table></figure><h3 id="III-配置用户组">III.配置用户组</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;root:x:0:0:root:/root:/bin/sh&quot;</span> &gt; etc/passwd</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ctf:x:1000:1000:ctf:/home/ctf:/bin/sh&quot;</span> &gt;&gt; etc/passwd</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;root:x:0:&quot;</span> &gt; etc/group</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ctf:x:1000:&quot;</span> &gt;&gt; etc/group</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;none /dev/pts devpts gid=5,mode=620 0 0&quot;</span> &gt; etc/fstab</span><br></code></pre></td></tr></table></figure><p>在这里建立了两个用户组<code>root</code>和<code>ctf</code>，以及两个用户<code>root</code>和<code>ctf</code></p><h3 id="IV-配置glibc库">IV.配置glibc库</h3><p>将需要的动态链接库拷到相应位置即可</p><blockquote><p>为了方便笔者这里就先不弄了，直接快进到下一步，以后有时间再补充（咕咕咕</p><p>听hxd说有个配好的，看看，等他有点时间发出来</p></blockquote><h2 id="三、打包文件系统为镜像文件">三、打包文件系统为镜像文件</h2><h3 id="I-打包为-cpio-文件">I. 打包为 cpio 文件</h3><p>使用如下命令打包文件系统为 cpio 格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash">find . | cpio -o --format=newc &gt; ../../rootfs.cpio</span><br></code></pre></td></tr></table></figure><p>也可以这么写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash">find . | cpio -o -H newc &gt; ../core.cpio</span><br></code></pre></td></tr></table></figure><h3 id="II-打包为-ext4-镜像">II. 打包为 ext4 镜像</h3><p>这里也可以将文件系统打包为 ext4 镜像格式，首先创建空白 ext4 镜像文件，这里 <code>bs</code> 表示块大小，<code>count</code> 表示块的数量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=rootfs.img bs=1M count=32</span><br></code></pre></td></tr></table></figure><p>之后将其格式化为 ext4 格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash">mkfs.ext4 rootfs.img</span> <br></code></pre></td></tr></table></figure><p>挂载镜像，将文件拷贝进去即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> tmp</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mount rootfs.img ./tmp/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">cp</span> -rfp _install/* ./tmp/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo umount ./tmp</span><br></code></pre></td></tr></table></figure><h2 id="四、向文件系统中添加文件">四、向文件系统中添加文件</h2><p>若是我们后续需要向文件系统中补充一些其他的文件，可以选择在原先的<code>_install</code>文件夹中添加（不过这样的话若是配置多个文件系统则会变得很混乱），也可以解压文件系统镜像后添加文件再重新进行打包</p><h3 id="cpio-文件">cpio 文件</h3><h4 id="I-解压磁盘镜像">I.解压磁盘镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash">cpio -idv &lt; ./rootfs.cpio</span><br></code></pre></td></tr></table></figure><p>该命令会将磁盘镜像中的所有文件解压到当前目录下</p><h4 id="II-重打包磁盘镜像">II.重打包磁盘镜像</h4><p>和打包磁盘镜像的命令一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash">find . | cpio -o --format=newc &gt; ../new_rootfs.cpio</span><br></code></pre></td></tr></table></figure><h3 id="ext4-镜像">ext4 镜像</h3><p>直接 mount 后再 umount jike：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mount rootfs.img ./tmp/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-comment"># do something</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo umount ./tmp</span><br></code></pre></td></tr></table></figure><h1>0x3 使用qemu运行内核</h1><p>终于到了最激动人心的时候了：<strong>我们即将要将这个Linux内核跑起来——用我们自己配置的文件系统与内核</strong></p><p>安全起见，我们并不直接在真机上运行这个内核，而是使用qemu在虚拟机里运行</p><h2 id="配置启动脚本">配置启动脚本</h2><h3 id="I-使用-cpio-文件作为文件系统">I. 使用 cpio 文件作为文件系统</h3><p>首先将先前的<code>bzImage</code>和<code>rootfs.cpio</code>放到同一个目录下</p><p>接下来编写启动脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">touch</span> boot.sh</span><br></code></pre></td></tr></table></figure><p>写入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>qemu-system-x86_64 \<br>    -m 128M \<br>    -kernel ./bzImage \<br>    -initrd  ./rootfs.cpio \<br>    -monitor /dev/null \<br>    -append &quot;root=/dev/ram rdinit=/sbin/init console=ttyS0 oops=panic panic=1 loglevel=3 quiet kaslr&quot; \<br>    -cpu kvm64,+smep \<br>    -smp cores=2,threads=1 \<br>    -nographic \<br>    -s<br></code></pre></td></tr></table></figure><p>部分参数说明如下：</p><ul><li><p><code>-m</code>：虚拟机内存大小</p></li><li><p><code>-kernel</code>：内存镜像路径</p></li><li><p><code>-initrd</code>：磁盘镜像路径</p></li><li><p><code>append</code>：附加参数选项</p><ul><li><code>nokalsr</code>：关闭内核地址随机化，方便我们进行调试</li><li><code>rdinit</code>：指定初始启动进程，<code>/sbin/init</code>进程会默认以 <code>/etc/init.d/rcS</code> 作为启动脚本</li><li><code>loglevel=3 </code>&amp; <code>quiet</code>：不输出log</li><li><code>console=ttyS0</code>：指定终端为<code>/dev/ttyS0</code>，这样一启动就能进入终端界面</li></ul></li><li><p><code>-monitor</code>：将监视器重定向到主机设备<code>/dev/null</code>，这里重定向至null主要是防止CTF中被人给偷了qemu拿flag</p></li><li><p><code>-cpu</code>：设置CPU安全选项，在这里开启了smep保护</p></li><li><p><code>-s</code>：相当于<code>-gdb tcp::1234</code>的简写（也可以直接这么写），后续我们可以通过gdb连接本地端口进行调试</p></li></ul><p>运行<code>boot.sh</code>，成功启动~撒花~🌸🌸🌸</p><h3 id="II-使用-ext4-镜像作为文件系统">II. 使用 ext4 镜像作为文件系统</h3><p>编写如下启动脚本即可，实际上只是将 <code>-initrd</code> 换成了 <code>-hda</code>，这里也可以写成 <code>-drive file=./rootfs.img,format=raw</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>qemu-system-x86_64 \<br>    -m 256M \<br>    -cpu kvm64,+smep,+smap \<br>    -smp cores=2,threads=2 \<br>    -kernel bzImage \<br>    -hda ./rootfs.img \<br>    -nographic \<br>    -monitor /dev/null \<br>    -snapshot \<br>    -append &quot;console=ttyS0 root=/dev/sda rw rdinit=/sbin/init kaslr pti=on quiet oops=panic panic=1&quot; \<br>    -no-reboot \<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x1 基础的知识</title>
    <link href="/2024/09/23/0x1%E5%9F%BA%E7%A1%80%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/09/23/0x1%E5%9F%BA%E7%A1%80%E7%9A%84%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="x00-os基础">0x00 OS基础</h1><p>操作系统本质上是在物理内存中运行的代码+数据</p><p>CPU在执行操作系统内核代码的时候，通常运行在高权限环境，拥有完全对硬件访问的能力</p><p>CPU在执行用户态的代码是，运行在低权限环境，<strong>只有部分/没有</strong>硬件访问能力</p><h2 id="分级保护域">分级保护域</h2><p>(<strong>hierarchical protection domains</strong>) 又称保护环，就是熟知的Rings</p><p>在一些硬件或者微代码级别上提供不同特权态模式的 CPU 架构上，保护环通常都是<strong>硬件强制</strong>的。</p><p>Rings是从最高特权级（通常被叫作0级）到最低特权级（通常对应最大的数字）排列的</p><p>我们熟知的是Intel的CPU，被分为R0、R1、R2、R3，实际上R1、R2不怎么使用，R0拥有最高权限。</p><p>基本上是操作系统内核代码运行在R0。用户进程代码运行在R3。</p><p>经 · 典 · 老 · 图 ：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2yQXZhLEHVn1b3uC.png" alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h2 id="运行态切换">运行态切换</h2><p>操作系统一般用以下两种途径进行特权级的切换</p><ul><li>中断 ：CPU收到一个外部中断时，会切换到R0，并根据中断描述符表索引对应的中断处理代码执行后面的操作。</li><li>特权级相关指令：R0 -&gt; R3，<code>iret</code>指令，R3 -&gt; R0， <code>sysenter</code>指令。</li></ul><p>基于这两种方式，现代操作系统的开发者包装出了<strong>系统调用（SYSCALL）</strong>，作为由“用户态”切换到“内核态”的入口。</p><blockquote><p>用户态：CPU 运行在 ring3 + 用户进程运行环境上下文</p><p>内核态：CPU 运行在 ring0 + 内核代码运行环境上下文</p></blockquote><p>当用户进程想要请求更高权限的服务时，便需要通过由系统提供的应用接口，使用系统调用以<strong>陷入内核态，再由操作系统完成请求</strong></p><h2 id="进程-进程运行环境上下文-内核数据结构">进程 = 进程运行环境上下文 + 内核数据结构</h2><ul><li><p>页表</p><p>每个进程都有自己独立的一组页表集</p></li><li><p>进程调度</p><p>使用时钟中断实现的进程调度</p><p>具体去看操作系统</p></li><li><p>进程控制块（PCB，Process Control Block）</p></li></ul><h1 id="x01-内核种类">0x01 内核种类</h1><h2 id="介绍">介绍</h2><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2eX5h7aRdOrCkb9j.png" alt="Kernel在计算机体系结构中的位置" /><figcaption aria-hidden="true">Kernel在计算机体系结构中的位置</figcaption></figure><p>Kernel的主要功能基本能归为以下三点：</p><ul><li>控制并与硬件进行交互</li><li>提供应用程序运行环境</li><li>调度系统资源</li></ul><p>与一般的应用程式不同，系统内核的发生 crash 通常会引起系统重启</p><h2 id="内核架构微内核-宏内核-混合内核">内核架构：微内核 &amp; 宏内核 &amp; 混合内核</h2><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2eQlyv3DszOjXPuw.png" alt="宏内核&amp;微内核&amp;混合内核" /><figcaption aria-hidden="true">宏内核&amp;微内核&amp;混合内核</figcaption></figure><h3 id="宏内核-monolithic-kernel">1. 宏内核 (Monolithic Kernel)</h3><blockquote><p><strong>宏内核</strong>（英语：Monolithic kernel），也译为<strong>集成式内核</strong>、<strong>单体式内核</strong>，一种<a href="https://zh.wikipedia.org/wiki/内核">操作系统内核</a>架构，此架构的特性是整个内核程序是一个单一二进制可执行文件，在<a href="https://zh.wikipedia.org/wiki/核心空間">内核态</a>以监管者模式（Supervisor Mode）来执行。相对于其他类型的操作系统架构，如<a href="https://zh.wikipedia.org/wiki/微核心">微内核</a>架构或<a href="https://zh.wikipedia.org/wiki/混核心">混合内核</a>架构等，这些内核会定义出一个高阶的虚拟接口，由该接口来涵盖描述整个电脑硬件，这些描述会集合成一组硬件描述用词，有时还会附加一些<a href="https://zh.wikipedia.org/wiki/系统调用">系统调用</a>，如此可以用一个或多个模块来实现各种操作系统服务，如<a href="https://zh.wikipedia.org/wiki/行程">进程</a>管理、并发（Concurrency）控制、<a href="https://zh.wikipedia.org/wiki/記憶體管理">存储器管理</a>等。</p><p><em>from.</em> <a href="https://zh.wikipedia.org/wiki/%E6%95%B4%E5%A1%8A%E6%80%A7%E6%A0%B8%E5%BF%83">维基百科</a></p></blockquote><p>通俗地说，宏内核几乎将一切都集成到了内核当中，并向上层应用程式提供抽象API（通常是以系统调用的形式），例如 Unix 与类 Unix 便通常都是宏内核</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2Kernel-monolithic_zh.svg.png" alt="Kernel-monolithic_zh.svg" /><figcaption aria-hidden="true">Kernel-monolithic_zh.svg</figcaption></figure><h3 id="微内核-micro-kernel">2. 微内核 (Micro Kernel)</h3><blockquote><p>在<a href="https://zh.wikipedia.org/wiki/電腦科學">计算机科学</a>中，<strong>微内核</strong>（英语：Microkernel，μ-kernel），是一种<a href="https://zh.wikipedia.org/wiki/内核">内核</a>的设计架构，由尽可能精简的<a href="https://zh.wikipedia.org/wiki/電腦程式">程序</a>所组成，以实现一个<a href="https://zh.wikipedia.org/wiki/作業系統">操作系统</a>所需要的最基本功能，包括了底层的<a href="https://zh.wikipedia.org/wiki/定址空間">寻址空间</a>管理、<a href="https://zh.wikipedia.org/wiki/執行緒">线程</a>管理、与<a href="https://zh.wikipedia.org/wiki/进程间通讯">进程间通信</a>。</p><p><em>from.</em> <a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E5%85%A7%E6%A0%B8">维基百科</a></p></blockquote><p>对于微内核而言，大部分的系统服务（如文件管理等）都被剥离于内核之外，内核仅仅提供最为基本的一些功能：底层的寻址空间管理、线程管理、进程间通信等</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2Kernel-microkernel-CN.png" alt="Kernel-microkernel-CN" /><figcaption aria-hidden="true">Kernel-microkernel-CN</figcaption></figure><h1 id="x02-分级保护域">0x02 分级保护域</h1><p><strong>分级保护域</strong>（<strong>hierarchical protection domains</strong>）又被称作保护环，简称 Rings ，是一种将计算机不同的资源划分至不同权限的模型</p><p>在一些硬件或者微代码级别上提供不同特权态模式的 CPU 架构上，保护环通常都是硬件强制的。Rings是从最高特权级（通常被叫作0级）到最低特权级（通常对应最大的数字）排列的</p><p>在大多数操作系统中，Ring0 拥有最高特权，并且可以和最多的硬件直接交互（比如CPU，内存）</p><p>内层ring可以任意调用外层ring的资源</p><h2 id="inter环模式">1. Inter环模式</h2><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2yQXZhLEHVn1b3uC.png" alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><p>操作系统本身便是一个运行在内核态的程序，当计算机通电之后首先会载入 ROM（BIOS/UEFI），之后载入第二引导程序（Linux 通常用 GNU Grub），由第二引导程序来将操作内核载入到内存当中并跳转到内核入口点，将控制权移交内核</p><p>内核在完成一系列的初始化过程之后，会启动一些低权限（ring3）的进程以向我们提供用户界面</p><h2 id="虚拟内存空间">2. 虚拟内存空间</h2><p>在现代操作系统中，计算机的虚拟内存地址空间通常被分为两块——供用户进程使用的用户空间（user space）与供操作系统内核使用的内核空间（kernel space），对于 Linux 而言，通常位于较高虚拟地址的虚拟内存空间被分配给内核使用，而位于较低虚拟地址的虚拟内存空间责备分配给用户进程使用</p><ul><li>32位</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2qLsr8xECYNpRbAI.png" alt="qLsr8xECYNpRbAI" /><figcaption aria-hidden="true">qLsr8xECYNpRbAI</figcaption></figure><ul><li>64位</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2k8NHa1ljMEfXQbh.png" alt="k8NHa1ljMEfXQbh" /><figcaption aria-hidden="true">k8NHa1ljMEfXQbh</figcaption></figure><h3 id="用户态-内核态">3. 用户态 &amp; 内核态</h3><ul><li>用户态：CPU 运行在 ring3 + 用户进程运行环境上下文</li><li>内核态：CPU 运行在 ring0 + 内核代码运行环境上下文</li></ul><p>通常情况下，不同用户进程间的用户地址空间是隔离的，但都共享着相同的内核地址空间，<strong>即不同的用户进程在相同的内核虚拟地址空间上都有着一致的对内核物理地址空间的映射</strong></p><h1 id="x03-运行状态切换-控制流转移">0x03 运行状态切换 &amp; 控制流转移</h1><ul><li>用户进程往往需要使用内核所提供的各种功能，此时就需要<strong>通过系统调用等接口</strong>陷入内核，待任务完成之后再“着陆”回用户态</li><li><strong>操作系统往往也需要“主动地”暂停</strong>当前进程的运行，让 CPU 陷入到内核态并获取控制权，这通常是因为有需要内核主动处理的事件（如外部中断）</li></ul><p>一般来说，CPU由用户陷入到内核态主要有以下几种途径：</p><ul><li>系统调用 （一般是int 0x80 / syscall / sysenter )</li><li>异常</li><li>外设产生中断</li></ul><p><strong>用户态 <span class="math inline">\(\rightarrow\)</span> 内核态</strong>：</p><ol type="1"><li><strong>切换GS段寄存器</strong>： 通过 <code>swapgs</code> 切换 GS 段寄存器，将 GS 寄存器值和一个特定位置的值进行交换，目的是保存 GS 值，同时将该位置的值作为内核执行时的 GS 值使用</li><li><strong>保存用户态栈帧信息</strong>： 将当前栈顶（用户空间栈顶）记录在 CPU 独占变量区域里（由 GS 寄存器所指定的<code>percpu</code> 段），将 CPU 独占区域里记录的内核栈顶放入 rsp/esp</li><li><strong>保存用户态寄存器信息</strong>： 通过 push 保存各寄存器值到栈上，以便后续“着陆”回用户态</li><li><strong>通过汇编指令判断是否为32位</strong> （？疑问）</li><li><strong>控制权转交内核，执行相应的操作</strong></li></ol><p><strong>用户态 <span class="math inline">\(\leftarrow\)</span> 内核态</strong>：</p><ol type="1"><li><code>swapgs</code> 指令恢复用户态GS寄存器</li><li><code>sysretq</code> 或者<code>iretq</code> 系列指令让 CPU 运行模式回到 ring 3，恢复用户空间程序的继续运行</li></ol><h2 id="中断">1. 中断</h2><blockquote><p>咕咕咕</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwnnotes-stackOverflow</title>
    <link href="/2024/09/20/pwnnotes-stackOverflow/"/>
    <url>/2024/09/20/pwnnotes-stackOverflow/</url>
    
    <content type="html"><![CDATA[<h1 id="stack-overflow">Stack Overflow</h1><h2 id="basic">Basic</h2><h3 id="ret2shellcode">ret2shellcode</h3><p>需要找一段可写可执行的段</p><p><strong>在新版内核当中引入了较为激进的保护策略，程序中通常不再默认有同时具有可写与可执行的段，这使得传统的 ret2shellcode 手法不再能直接完成利用</strong>。</p><h3 id="ret2syscall">ret2syscall</h3><p>简单说：把对应获取 shell 的系统调用的参数放到对应的寄存器中，那么我们在执行 int 0x80 就可执行对应的系统调用。比如说这里我们利用如下系统调用来获取 shell：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><p>其中，该程序是 32 位，所以我们需要使得:</p><ul><li>系统调用号，即 eax 应该为 0xb</li><li>第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。</li><li>第二个参数，即 ecx 应该为 0</li><li>第三个参数，即 edx 应该为 0</li></ul><p>比如用：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ROPgadget --binary rop --only &#x27;pop|ret&#x27; | grep &#x27;eax&#x27;<br></code></pre></td></tr></table></figure><p>去筛选一下，找方便的地址可以去控制寄存器</p><p>简单的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = flat(<br>    [<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">112</span>, p32(pop_eax_ret), <span class="hljs-number">0xb</span>, p32(pop_edx_ecx_ebx_ret), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, p32(bin_sh), p32(int_0x80)]<br>)<br></code></pre></td></tr></table></figure><h3 id="ret2libc">ret2libc</h3><p>就是找libc的基值，然后通过偏移找到system 和 /bin/sh字符串</p><p>然后栈溢出</p><h2 id="middle">Middle</h2><h3 id="ret2csu">ret2csu</h3><p>在 64 位程序中，函数的前 6 个参数是通过寄存器传递的，但是大多数时候，我们很难找到每一个寄存器对应的 gadgets。 这时候，我们可以利用 x64 下的 __libc_csu_init 中的 gadgets。</p><h3 id="ret2reg">ret2reg</h3><ol type="1"><li>查看溢出函返回时哪个寄存值指向溢出缓冲区空间</li><li>然后反编译二进制，查找 call reg 或者 jmp reg 指令，将 EIP 设置为该指令地址</li><li>reg 所指向的空间上注入 Shellcode (需要确保该空间是可以执行的，但通常都是栈上的)</li></ol><h3 id="brop">BROP</h3><p>（Blind ROP） 于 2014 年由 Standford 的 Andrea Bittau 提出，其相关研究成果发表在 Oakland 2014，其论文题目是 <strong>Hacking Blind</strong>，下面是作者对应的 paper 和 slides, 以及作者相应的介绍</p><ul><li><a href="http://www.scs.stanford.edu/brop/bittau-brop.pdf">paper</a></li><li><a href="http://www.scs.stanford.edu/brop/bittau-brop-slides.pdf">slide</a></li></ul><h4 id="基本思路">基本思路</h4><p>在 BROP 中，基本的遵循的思路如下</p><ul><li>判断栈溢出长度<ul><li>暴力枚举</li></ul></li><li>Stack Reading<ul><li>获取栈上的数据来泄露 canaries，以及 ebp 和返回地址。</li></ul></li><li>Blind ROP<ul><li>找到足够多的 gadgets 来控制输出函数的参数，并且对其进行调用，比如说常见的 write 函数以及 puts 函数。</li></ul></li><li>Build the exploit<ul><li>利用输出函数来 dump 出程序以便于来找到更多的 gadgets，从而可以写出最后的 exploit。</li></ul></li></ul><h4 id="栈溢出长度">栈溢出长度</h4><p>直接从 1 暴力枚举即可，直到发现程序崩溃。</p><h4 id="stack-reading">Stack Reading</h4><p>如下所示，这是目前经典的栈布局</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk">buffer|canary|saved fame pointer|saved returned address<br></code></pre></td></tr></table></figure><p>canary 本身可以通过爆破来获取，但是如果只是愚蠢地枚举所有的数值的话，显然是低效的。</p><p>需要注意的是，攻击条件 2 表明了程序本身并不会因为 crash 有变化，所以每次的 canary 等值都是一样的。所以我们可以按照字节进行爆破。正如论文中所展示的，每个字节最多有 256 种可能，所以在 32 位的情况下，我们最多需要爆破 1024 次，64 位最多爆破 2048 次。</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2stack_reading.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><blockquote><p>突然发现自己好像不需要学会BROP。。有空再摸</p></blockquote><h2 id="high">High</h2><blockquote><p>太高端了，我就了解一下。。</p></blockquote><h3 id="ret2dlresolve">ret2dlresolve</h3><h4 id="原理">原理</h4><p>在 Linux 中，程序使用 <code>_dl_runtime_resolve(link_map_obj, reloc_offset)</code> 来对动态链接的函数进行重定位。那么如果我们可以控制相应的参数及其对应地址的内容是不是就可以控制解析的函数了呢？答案是肯定的。这也是 ret2dlresolve 攻击的核心所在。</p><p>具体的，动态链接器在解析符号地址时所使用的重定位表项、动态符号表、动态字符串表都是从目标文件中的动态节 <code>.dynamic</code> 索引得到的。所以如果我们能够修改其中的某些内容使得最后动态链接器解析的符号是我们想要解析的符号，那么攻击就达成了。</p><h3 id="ret2vdso">ret2VDSO</h3><p>VDSO(Virtual Dynamically-linked Shared Object)</p><p>具体来说，它是将内核态的调用映射到用户地址空间的库。那么它为什么会存在呢？这是因为有些系统调用经常被用户使用，这就会出现大量的用户态与内核态切换的开销。通过 vdso，我们可以大量减少这样的开销，同时也可以使得我们的路径更好。这里路径更好指的是，我们不需要使用传统的 int 0x80 来进行系统调用，不同的处理器实现了不同的快速系统调用指令</p><ul><li>intel 实现了 sysenter，sysexit</li><li>amd 实现了 syscall，sysret</li></ul><p>当不同的处理器架构实现了不同的指令时，自然就会出现兼容性问题，所以 linux 实现了 vsyscall 接口，在底层会根据具体的结构来进行具体操作。而 vsyscall 就实现在 vdso 中。</p><h3 id="srop">SROP</h3><p>利用sigreturn去实现控制</p><h4 id="攻击原理">攻击原理</h4><p>仔细回顾一下内核在 signal 信号处理的过程中的工作，我们可以发现，内核主要做的工作就是为进程保存上下文，并且恢复上下文。这个主要的变动都在 Signal Frame 中。但是需要注意的是：</p><ul><li>Signal Frame 被保存在用户的地址空间中，所以用户是可以读写的。</li><li>由于内核与信号处理程序无关 (kernel agnostic about signal handlers)，它并不会去记录这个 signal 对应的 Signal Frame，所以当执行 sigreturn 系统调用时，此时的 Signal Frame 并不一定是之前内核为用户进程保存的 Signal Frame。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web大学习0x1</title>
    <link href="/2024/08/31/Web%E5%A4%A7%E5%AD%A6%E4%B9%A00x1/"/>
    <url>/2024/08/31/Web%E5%A4%A7%E5%AD%A6%E4%B9%A00x1/</url>
    
    <content type="html"><![CDATA[<h1 id="说在前头">说在前头</h1><p>学学web，刚好有个新生赛，打一打</p><h1 id="http-header">Http Header</h1><ul><li>对于 GET 参数,在路径后加上<code>?</code>, 输入 <code>basectf=w21c%2500me</code>, (<code>%00</code> 表示空字符, 需要对他的百分号进行 URL 转义)</li><li>对于 POST 参数, 先要将数据包改成 POST 形式, 我们需要先改谓词 <code>GET</code> -&gt; <code>POST</code>, 再在请求头中加上 <code>Content-Type: application/x-www-form-urlencoded</code>, 再在请求头后空一行, 写上 <code>Base=fl@g</code></li></ul><p>请注意, BurpSuite 某些版本可能存在自动编码, 需要删除掉最后的空行, 否则可能会给服务端多发送一个空行</p><ul><li>对于 Cookie, Cookie 并不是需要 URL 编码, 所以这里我们可以直接传内容: <code>Cookie: c00k13=i can't eat it</code></li><li>而对于用户代理 (User-Agent) 这个请求头标识了你当前的浏览器信息, 他的内容改成 <code>Base</code></li><li>来源 (Referer) 也是一个请求头, 这个单词的拼写错误还有一段故事, 这个标识的我们从哪个地方发起的这个请求, 在超链接跳转时会带上源网址, 在一个页面发起 XHR 请求时会带上当前页面的内容, 我们这里要把他改成 <code>Base</code></li><li>关于你的 IP, 我们可以尝试通过一些请求头进行伪造, 可以参考: <a href="https://segmentfault.com/a/1190000019197577">这篇文章</a>, 我们这里采用 <code>X-Forwarded-For</code> 进行伪造</li></ul><h1 id="php">PHP</h1><ul><li>eval(): 这个函数，要搞个system(); 去执行cmd命令，记得写分号.</li></ul><h1 id="md5绕过">md5绕过</h1><h2 id="e绕过">1. 0E绕过</h2><p>0E开头的字符串在参与比较的时候会被当成科学计数法，结果转换成0 。</p><p>常见0E开头的字符串：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dns">QNKCDZO<br><span class="hljs-number">240610708</span><br>byGcY<br>sonZ7y<br>aabg7XSs<br>aabC9RqS<br>s878926199a<br>s155964671a<br>s214587387a<br>s1091221200a<br></code></pre></td></tr></table></figure><h2 id="数组绕过">2. 数组绕过</h2><p>MD5不能加密数组，传入参数会报错，但是会继续执行并且返回。</p><p>举个栗子：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240831210728043.png" alt="image-20240831210728043" /><figcaption aria-hidden="true">image-20240831210728043</figcaption></figure><h3 id="md5碰撞">3. md5碰撞</h3><p>如题</p><h2 id="md5-sql-注入">4. md5-sql 注入</h2><p><code>ffifdyop</code> 的MD5加密结果是 <code>276f722736c95d99e921722cf9ed621c</code></p><p>经过MySQL编码后会变成<code>’or’6xxx</code>,使SQL恒成立,相当于万能密码,可以绕过md5()函数的加密</p><h1 id="ssrf">SSRF</h1><h2 id="定义">定义</h2><p>SSRF(Server-Side Request Forgery:<strong>服务器端请求伪造</strong>) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><h2 id="涉及函数">涉及函数</h2><h3 id="curl_exec">curl_exec()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">curl_exec</span>()  curl_exec函数用于执行指定的cURL会话。<br></code></pre></td></tr></table></figure><p>E.P.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-comment">//初始化curl会话</span><br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>); <br><span class="hljs-comment">// 设置URL和相应的选项</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-comment">//// 抓取URL并把它传递给浏览器</span><br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br> <span class="hljs-comment">//关闭cURL资源，并且释放系统资源</span><br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这个时候我们就可以利用url参数，来获取内网的部分文件，直接写<code>127.0.0.1:/flag.php</code>这种即可，赋值给URL</p><h3 id="file_get_contents">file_get_contents()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">file_get_contents</span>() <br><span class="hljs-comment">//file_get_content函数从用户指定的url获取内容，然后指定一个文件名进行保存，并展示给用户。</span><br><span class="hljs-comment">//file_put_content函数把一个字符串写入文件中。</span><br></code></pre></td></tr></table></figure><p>E.P.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>也是URL塞本地文件路径:<code>http://127.0.0.1/xxxxx</code></p><h3 id="fsockopen">fsockopen()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">fsockopen</span>()  fsockopen — 打开一个网络连接或者一个Unix套接字连接<br></code></pre></td></tr></table></figure><p>E.P.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$host</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$host</span>&quot;</span>,<span class="hljs-number">80</span>, <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>,<span class="hljs-number">30</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fp</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$errstr</span> (<span class="hljs-subst">$errno</span>)&lt;br /&gt;\n&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$out</span> =<span class="hljs-string">&quot;GET / HTTP/1.1\r\n&quot;</span>;<br><span class="hljs-variable">$out</span> .=<span class="hljs-string">&quot;Host: <span class="hljs-subst">$host</span>\r\n&quot;</span>;<br><span class="hljs-variable">$out</span> .=<span class="hljs-string">&quot;Connection: Close\r\n\r\n&quot;</span>;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$out</span>);<br><span class="hljs-keyword">while</span>(!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fp</span>,<span class="hljs-number">1024</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="涉及协议">涉及协议</h2><h3 id="file伪协议">file伪协议</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">file:<span class="hljs-regexp">//</span> 协议：<br>        条件 allow_url_fopen:off<span class="hljs-regexp">/on  allow_url_include :off/</span>on<br>        作用：用于访问本地文件系统。在include()/require()等参数可控的情况下<br>             如果导入非php文件也会被解析为php<br>        用法：<br>            <span class="hljs-number">1</span>.file:<span class="hljs-regexp">//</span>[文件的绝对路径和文件名]<br>            <span class="hljs-number">2</span>.[文件的相对路径和文件名]<br>            <span class="hljs-number">3</span>.[http：<span class="hljs-regexp">//</span>网络路径和文件名]<br></code></pre></td></tr></table></figure><h3 id="gopher协议">Gopher协议</h3><p>当探测内网或执行命令时需要发送 POST 请求，我们可以利用 gopher 协议</p><p>协议格式：<code>gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;</code>，这里的gopher-path就相当于是发送的请求数据包</p><h3 id="dict协议">dict协议</h3>]]></content>
    
    
    <categories>
      
      <category>WebLeran</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pwn的Patch小知识</title>
    <link href="/2024/06/09/Pwn%E7%9A%84Patch%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/06/09/Pwn%E7%9A%84Patch%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p>唉，sb比赛，支持LM</p><h1 id="patch">Patch</h1><h2 id="格式化字符串">格式化字符串</h2><p>模板在buu的heap那里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asm">eh_frame:0000000000001478                               myPrintf proc near                      ; CODE XREF: banner+58↑p<br>.eh_frame:0000000000001478                                                                       ; banner+69↑p<br>.eh_frame:0000000000001478 55                            push    rbp<br>.eh_frame:0000000000001479 48 89 E5                      mov     rbp, rsp<br>.eh_frame:000000000000147C 48 89 FE                      mov     rsi, rdi<br>.eh_frame:000000000000147F 48 8D 3D 37 FE FF FF          lea     rdi, aS                         ; &quot;%s&quot;<br>.eh_frame:0000000000001486 E8 65 F4 FF FF                call    _printf<br>.eh_frame:0000000000001486<br>.eh_frame:000000000000148B C9                            leave<br>.eh_frame:000000000000148C C3                            retn<br></code></pre></td></tr></table></figure><h2 id="uaf">UAF</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asm">.eh_frame:08048CEC                         myFree          proc near<br>.eh_frame:08048CEC<br>.eh_frame:08048CEC                         arg_0           = dword ptr  8<br>.eh_frame:08048CEC<br>.eh_frame:08048CEC 55                                      push    ebp<br>.eh_frame:08048CED 89 E5                                   mov     ebp, esp<br>.eh_frame:08048CEF 8B 45 08                                mov     eax, [ebp+arg_0]<br>.eh_frame:08048CF2 8B 00                                   mov     eax, [eax]<br>.eh_frame:08048CF4 50                                      push    eax             ; ptr<br>.eh_frame:08048CF5 E8 76 F7 FF FF                          call    _free<br>.eh_frame:08048CFA 8B 45 08                                mov     eax, [ebp+arg_0]<br>.eh_frame:08048CFD 90                                      nop<br>.eh_frame:08048CFE 90                                      nop<br>.eh_frame:08048CFF C7 00 00 00 00 00                       mov     dword ptr [eax], 0<br>.eh_frame:08048D05 C9                                      leave<br>.eh_frame:08048D06 C3                                      retn<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:08048863 83 C4 10                                add     esp, 10h<br>.text:08048866 C7 C0 48 A0 04 08                       mov     eax, offset notelist<br>.text:0804886C 8B 55 F4                                mov     edx, [ebp+var_C]<br>.text:0804886F 8D 04 90                    patch  --&gt;  lea     eax, [eax+edx*4]<br>.text:08048872 83 EC 0C                                sub     esp, 0Ch<br>.text:08048875 50                                      push    eax             ; ptr<br>.text:08048876 E8 71 04 00 00              patch  --&gt;  call    myFree<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( result )<br>&#123;<br>  <span class="hljs-built_in">free</span>(*(<span class="hljs-type">void</span> **)(notelist[v2] + <span class="hljs-number">4</span>));<br>  myFree((<span class="hljs-type">void</span> **)&amp;notelist[v2]);&lt;-- 一定修这个，上面那个可修可不修<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Success&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="跳转指令">跳转指令</h2><p>无符号跳转</p><table><thead><tr class="header"><th style="text-align: center;">汇编指令</th><th style="text-align: center;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">JA</td><td style="text-align: center;">无符号大于则跳转</td></tr><tr class="even"><td style="text-align: center;">JNA</td><td style="text-align: center;">无符号不大于则跳转</td></tr><tr class="odd"><td style="text-align: center;">JAE</td><td style="text-align: center;">无符号大于等于则跳转（同JNB）</td></tr><tr class="even"><td style="text-align: center;">JNAE</td><td style="text-align: center;">无符号不大于等于则跳转（同JB）</td></tr><tr class="odd"><td style="text-align: center;">JB</td><td style="text-align: center;">无符号小于则跳转</td></tr><tr class="even"><td style="text-align: center;">JNB</td><td style="text-align: center;">无符号不小于则跳转</td></tr><tr class="odd"><td style="text-align: center;">JBE</td><td style="text-align: center;">无符号小于等于则跳转（同JNA）</td></tr><tr class="even"><td style="text-align: center;">JBNE</td><td style="text-align: center;">无符号不小于等于则跳转（同JA）</td></tr></tbody></table><p>有符号跳转</p><table><thead><tr class="header"><th style="text-align: center;">汇编指令</th><th style="text-align: center;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">JG</td><td style="text-align: center;">有符号大于则跳转</td></tr><tr class="even"><td style="text-align: center;">JNG</td><td style="text-align: center;">有符号不大于则跳转</td></tr><tr class="odd"><td style="text-align: center;">JGE</td><td style="text-align: center;">有符号大于等于则跳转（同JNL）</td></tr><tr class="even"><td style="text-align: center;">JNGE</td><td style="text-align: center;">有符号不大于等于则跳转（同JL）</td></tr><tr class="odd"><td style="text-align: center;">JL</td><td style="text-align: center;">有符号小于则跳转</td></tr><tr class="even"><td style="text-align: center;">JNL</td><td style="text-align: center;">有符号不小于则跳转</td></tr><tr class="odd"><td style="text-align: center;">JLE</td><td style="text-align: center;">有符号小于等于则跳转（同JNG）</td></tr><tr class="even"><td style="text-align: center;">JNLE</td><td style="text-align: center;">有符号不小于等于则跳转（同JG）</td></tr></tbody></table><h1 id="patch-在pe上的问题">Patch 在Pe上的问题</h1><p>这次patch改eh_frame段权限没用，赛后问烧麦师傅，得到了一些知识了解</p><p>XMAN：就是linux他实际上看内存的权限检查的是segment，你只修了section但是segment的包含那段内存的部分还是可读。逆向也是遇到过很多次，section全部patch成0程序是能正常识别的，就是因为实际上是取segment里的数据去搞的。这样是把这个section分到load的segment那一类，然后load是rwx的吧</p><p>xia0：改eh_frame那个segment也可以，换成PT_LOAD就可以了，这样，改eh_frame那个seg就也能exec</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Pwn</tag>
      
      <tag>PE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ELF文件</title>
    <link href="/2024/03/30/ELF%E6%96%87%E4%BB%B6/"/>
    <url>/2024/03/30/ELF%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="简介">简介</h1><p>ELF （Executable and Linkable Format）文件，也就是在 Linux 中的目标文件，主要有以下三种类型</p><ul><li>可重定位文件（Relocatable File），包含由编译器生成的代码以及数据。链接器会将它与其它目标文件链接起来从而创建可执行文件或者共享目标文件。在 Linux 系统中，这种文件的后缀一般为 <code>.o</code> 。</li><li>可执行文件（Executable File），就是我们通常在 Linux 中执行的程序。</li><li>共享目标文件（Shared Object File），包含代码和数据，这种文件是我们所称的库文件，一般以 <code>.so</code> 结尾。一般情况下，它有以下两种使用情景</li><li>链接器（Link eDitor, ld）可能会处理它和其它可重定位文件以及共享目标文件，生成另外一个目标文件。</li><li>动态链接器（Dynamic Linker）将它与可执行文件以及其它共享目标组合在一起生成进程镜像。</li></ul><h2 id="文件格式">文件格式</h2><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2object_file_format.png" alt="object_file_format" /><figcaption aria-hidden="true">object_file_format</figcaption></figure><p>首先，我们来<strong>关注一下链接视图</strong>。</p><p>文件开始处是ELF 头部（ <strong>ELF Header</strong>），它给出了整个文件的组织情况。</p><p>如果<strong>程序头部表（Program Header Table）</strong>存在的话，它会告诉系统如何创建进程。用于生成进程的目标文件必须具有程序头部表，但是重定位文件不需要这个表。</p><p>节区 (Section) 部分包含在链接视图中要使用的大部分信息：指令、数据、符号表、重定位信息等等。</p><p><strong>节区头部表（Section Header Table）</strong>包含了描述文件节区的信息，每个节区在表中都有一个表项，会给出节区名称、节区大小等信息。用于<strong>链接的目标文件必须有节区头部表</strong>，其它目标文件则无所谓，可以有，也可以没有。</p><p>下图为链接视图比较形象的展示：</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2elf-layout.png" style="zoom:80%;" /></p><h2 id="数据形式">数据形式</h2><table><thead><tr class="header"><th>名称</th><th>长度</th><th>对齐方式</th><th>用途</th></tr></thead><tbody><tr class="odd"><td>Elf32_Addr</td><td>4</td><td>4</td><td>无符号程序地址</td></tr><tr class="even"><td>Elf32_Half</td><td>2</td><td>2</td><td>无符号半整型</td></tr><tr class="odd"><td>Elf32_Off</td><td>4</td><td>4</td><td>无符号文件偏移</td></tr><tr class="even"><td>Elf32_Sword</td><td>4</td><td>4</td><td>有符号大整型</td></tr><tr class="odd"><td>Elf32_Word</td><td>4</td><td>4</td><td>无符号大整型</td></tr><tr class="even"><td>unsigned char</td><td>1</td><td>1</td><td>无符号小整型</td></tr></tbody></table><h1 id="elf-header">ELF Header</h1><p>ELF Header 描述了 ELF 文件的概要信息，利用这个数据结构可以索引到 ELF 文件的全部信息，数据结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> EI_NIDENT   16</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>   e_ident[EI_NIDENT];<br>    ELF32_Half      e_type;<br>    ELF32_Half      e_machine;<br>    ELF32_Word      e_version;<br>    ELF32_Addr      e_entry;<br>    ELF32_Off       e_phoff;<br>    ELF32_Off       e_shoff;<br>    ELF32_Word      e_flags;<br>    ELF32_Half      e_ehsize;<br>    ELF32_Half      e_phentsize;<br>    ELF32_Half      e_phnum;<br>    ELF32_Half      e_shentsize;<br>    ELF32_Half      e_shnum;<br>    ELF32_Half      e_shstrndx;<br>&#125; Elf32_Ehdr;<br></code></pre></td></tr></table></figure><h2 id="e_ident">e_ident</h2><p>该变量给出了用于解码和解释文件中与机器无关的数据的方式。</p><p>这个数组对于不同的下标的含义如下：</p><table><thead><tr class="header"><th style="text-align: left;">宏名称</th><th style="text-align: left;">下标</th><th style="text-align: left;">目的</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">EI_MAG0</td><td style="text-align: left;">0</td><td style="text-align: left;">文件标识</td></tr><tr class="even"><td style="text-align: left;">EI_MAG1</td><td style="text-align: left;">1</td><td style="text-align: left;">文件标识</td></tr><tr class="odd"><td style="text-align: left;">EI_MAG2</td><td style="text-align: left;">2</td><td style="text-align: left;">文件标识</td></tr><tr class="even"><td style="text-align: left;">EI_MAG3</td><td style="text-align: left;">3</td><td style="text-align: left;">文件标识</td></tr><tr class="odd"><td style="text-align: left;">EI_CLASS</td><td style="text-align: left;">4</td><td style="text-align: left;">文件类</td></tr><tr class="even"><td style="text-align: left;">EI_DATA</td><td style="text-align: left;">5</td><td style="text-align: left;">数据编码</td></tr><tr class="odd"><td style="text-align: left;">EI_VERSION</td><td style="text-align: left;">6</td><td style="text-align: left;">文件版本</td></tr><tr class="even"><td style="text-align: left;">EI_PAD</td><td style="text-align: left;">7</td><td style="text-align: left;">补齐字节开始处</td></tr></tbody></table><p>E.P.</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240330214810326.png" alt="image-20240330214810326" /><figcaption aria-hidden="true">image-20240330214810326</figcaption></figure><ul><li><code>e_ident[EI_MAG0]</code> 到 <code>e_ident[EI_MAG3]</code>，即文件的头4个字节，被称作“魔数”，标识该文件是一个ELF目标文件。</li></ul><table><thead><tr class="header"><th style="text-align: left;">名称</th><th style="text-align: left;">值</th><th style="text-align: left;">位置</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">ELFMAG0</td><td style="text-align: left;">0x7f</td><td style="text-align: left;">e_ident[EI_MAG0]</td></tr><tr class="even"><td style="text-align: left;">ELFMAG1</td><td style="text-align: left;">‘E’</td><td style="text-align: left;">e_ident[EI_MAG1]</td></tr><tr class="odd"><td style="text-align: left;">ELFMAG2</td><td style="text-align: left;">‘L’</td><td style="text-align: left;">e_ident[EI_MAG2]</td></tr><tr class="even"><td style="text-align: left;">ELFMAG3</td><td style="text-align: left;">‘F’</td><td style="text-align: left;">e_ident[EI_MAG3]</td></tr></tbody></table><ul><li><code>e_ident[EI_CLASS]</code>, 标识文件的类型或容量:</li></ul><table><thead><tr class="header"><th style="text-align: left;">名称</th><th style="text-align: left;">值</th><th style="text-align: left;">意义</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">ELFCLASSNONE</td><td style="text-align: left;">0</td><td style="text-align: left;">无效类型</td></tr><tr class="even"><td style="text-align: left;">ELFCLASS32</td><td style="text-align: left;">1</td><td style="text-align: left;">32位文件</td></tr><tr class="odd"><td style="text-align: left;">ELFCLASS64</td><td style="text-align: left;">2</td><td style="text-align: left;">64位文件</td></tr></tbody></table><ul><li><code>e_ident[EI_DATA]</code>字节给出了目标文件中的特定处理器数据的编码方式。下面是目前已定义的编码：</li></ul><table><thead><tr class="header"><th style="text-align: left;">名称</th><th style="text-align: left;">值</th><th style="text-align: left;">意义</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">ELFDATANONE</td><td style="text-align: left;">0</td><td style="text-align: left;">无效数据编码</td></tr><tr class="even"><td style="text-align: left;">ELFDATA2LSB</td><td style="text-align: left;">1</td><td style="text-align: left;">小端</td></tr><tr class="odd"><td style="text-align: left;">ELFDATA2MSB</td><td style="text-align: left;">2</td><td style="text-align: left;">大端</td></tr></tbody></table><ul><li><code>e_ident[EI_PAD]</code> 给出了<code>e_ident</code>中未使用字节的开始地址。这些字节被保留并置为0；处理目标文件的程序应该忽略它们。如果之后这些字节被使用，<code>EI_PAD</code>的值就会改变。</li></ul><h2 id="e_type">e_type</h2><p><code>e_type</code> 标识目标文件类型。</p><table><thead><tr class="header"><th style="text-align: left;">名称</th><th style="text-align: left;">值</th><th style="text-align: left;">意义</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">ET_NONE</td><td style="text-align: left;">0</td><td style="text-align: left;">无文件类型</td></tr><tr class="even"><td style="text-align: left;">ET_REL</td><td style="text-align: left;">1</td><td style="text-align: left;">可重定位文件</td></tr><tr class="odd"><td style="text-align: left;">ET_EXEC</td><td style="text-align: left;">2</td><td style="text-align: left;">可执行文件</td></tr><tr class="even"><td style="text-align: left;">ET_DYN</td><td style="text-align: left;">3</td><td style="text-align: left;">共享目标文件</td></tr><tr class="odd"><td style="text-align: left;">ET_CORE</td><td style="text-align: left;">4</td><td style="text-align: left;">核心转储文件</td></tr><tr class="even"><td style="text-align: left;">ET_LOPROC</td><td style="text-align: left;">0xff00</td><td style="text-align: left;">处理器指定下限</td></tr><tr class="odd"><td style="text-align: left;">ET_HIPROC</td><td style="text-align: left;">0xffff</td><td style="text-align: left;">处理器指定上限</td></tr></tbody></table><h2 id="e_machine">e_machine</h2><p>这一项指定了当前文件可以运行的机器架构。</p><table><thead><tr class="header"><th style="text-align: left;">名称</th><th style="text-align: left;">值</th><th style="text-align: left;">意义</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">EM_NONE</td><td style="text-align: left;">0</td><td style="text-align: left;">无机器类型</td></tr><tr class="even"><td style="text-align: left;">EM_M32</td><td style="text-align: left;">1</td><td style="text-align: left;">AT&amp;T WE 32100</td></tr><tr class="odd"><td style="text-align: left;">EM_SPARC</td><td style="text-align: left;">2</td><td style="text-align: left;">SPARC</td></tr><tr class="even"><td style="text-align: left;">EM_386</td><td style="text-align: left;">3</td><td style="text-align: left;">Intel 80386</td></tr><tr class="odd"><td style="text-align: left;">EM_68K</td><td style="text-align: left;">4</td><td style="text-align: left;">Motorola 68000</td></tr><tr class="even"><td style="text-align: left;">EM_88K</td><td style="text-align: left;">5</td><td style="text-align: left;">Motorola 88000</td></tr><tr class="odd"><td style="text-align: left;">EM_860</td><td style="text-align: left;">7</td><td style="text-align: left;">Intel 80860</td></tr><tr class="even"><td style="text-align: left;">EM_MIPS</td><td style="text-align: left;">8</td><td style="text-align: left;">MIPS RS3000</td></tr></tbody></table><h2 id="e_version">e_version</h2><p>标识目标文件的版本。</p><table><thead><tr class="header"><th style="text-align: left;">名称</th><th style="text-align: left;">值</th><th style="text-align: left;">意义</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">EV_NONE</td><td style="text-align: left;">0</td><td style="text-align: left;">无效版本</td></tr><tr class="even"><td style="text-align: left;">EV_CURRENT</td><td style="text-align: left;">1</td><td style="text-align: left;">当前版本</td></tr></tbody></table><h2 id="e_entry">e_entry</h2><p>这一项为系统转交控制权给 ELF 中<strong>相应代码的虚拟地址</strong>。如果没有相关的入口项，则这一项为0。</p><h2 id="e_phoff">e_phoff</h2><p>这一项给出<strong>程序头部表</strong>在文件中的字节偏移（<strong>Program Header table OFFset</strong>）。如果文件中没有程序头部表，则为0。</p><h2 id="e_shoff">e_shoff</h2><p>这一项给出<strong>节头表</strong>在文件中的字节偏移（ <strong>Section Header table OFFset</strong> ）。如果文件中没有节头表，则为0。</p><h2 id="e_flags">e_flags</h2><p>这一项给出文件中与特定处理器相关的标志，这些标志命名格式为<code>EF_machine_flag</code>。</p><h2 id="e_ehsize">e_ehsize</h2><p>这一项给出 ELF 文件头部的字节长度（ELF Header Size）。</p><h2 id="e_phentsize">e_phentsize</h2><p>这一项给出程序头部表中每个表项的字节长度（<strong>Program Header ENTry SIZE</strong>）。每个表项的大小相同。</p><h2 id="e_phnum">e_phnum</h2><p>这一项给出程序头部表的项数（ <strong>Program Header entry NUMber</strong> ）。因此，<code>e_phnum</code> 与 <code>e_phentsize</code> 的乘积即为程序头部表的字节长度。如果文件中没有程序头部表，则该项值为0</p><h2 id="e_shentsize">e_shentsize</h2><p>这一项给出节头的字节长度（<strong>Section Header ENTry SIZE</strong>）。一个节头是节头表中的一项；节头表中所有项占据的空间大小相同。</p><h2 id="e_shnum">e_shnum</h2><p>这一项给出节头表中的项数（<strong>Section Header NUMber</strong>）。因此， <code>e_shnum</code> 与 <code>e_shentsize</code> 的乘积即为节头表的字节长度。如果文件中没有节头表，则该项值为0。</p><h2 id="e_shstrndx">e_shstrndx</h2><p>这一项给出节头表中与节名字符串表相关的表项的索引值（<strong>Section Header table InDeX related with section name STRing table</strong>）。如果文件中没有节名字符串表，则该项值为<code>SHN_UNDEF</code>。关于细节的介绍，请参考后面的“节”和“字符串表”部分。</p><h1 id="program-header-table">Program Header Table</h1><h2 id="概述">概述</h2><p>Program Header Table 是一个结构体数组，每一个元素的类型是 <code>Elf32_Phdr</code>，描述了一个段或者其它系统在准备程序执行时所需要的信息。</p><p>其中，ELF 头中的 <code>e_phentsize</code> 和 <code>e_phnum</code> 指定了该数组每个元素的大小以及元素个数。一个目标文件的段包含一个或者多个节。</p><p><strong>程序的头部只有对于可执行文件和共享目标文件有意义。</strong></p><p>可以说，Program Header Table 就是专门为 ELF 文件运行时中的段所准备的。</p><p><code>Elf32_Phdr</code> 的数据结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    ELF32_Word  p_type;<br>    ELF32_Off   p_offset;<br>    ELF32_Addr  p_vaddr;<br>    ELF32_Addr  p_paddr;<br>    ELF32_Word  p_filesz;<br>    ELF32_Word  p_memsz;<br>    ELF32_Word  p_flags;<br>    ELF32_Word  p_align;<br>&#125; Elf32_Phdr;<br></code></pre></td></tr></table></figure><p>每个字段的说明如下</p><table><thead><tr class="header"><th style="text-align: left;">字段</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">p_type</td><td style="text-align: left;">该字段为段的类型，或者表明了该结构的相关信息。</td></tr><tr class="even"><td style="text-align: left;">p_offset</td><td style="text-align: left;">该字段给出了从文件开始到该段开头的第一个字节的偏移。</td></tr><tr class="odd"><td style="text-align: left;">p_vaddr</td><td style="text-align: left;">该字段给出了该段第一个字节在内存中的虚拟地址。</td></tr><tr class="even"><td style="text-align: left;">p_paddr</td><td style="text-align: left;">该字段仅用于物理地址寻址相关的系统中， 由于”System V”忽略了应用程序的物理寻址，可执行文件和共享目标文件的该项内容并未被限定。</td></tr><tr class="odd"><td style="text-align: left;">p_filesz</td><td style="text-align: left;">该字段给出了文件镜像中该段的大小，可能为0。</td></tr><tr class="even"><td style="text-align: left;">p_memsz</td><td style="text-align: left;">该字段给出了内存镜像中该段的大小，可能为0。</td></tr><tr class="odd"><td style="text-align: left;">p_flags</td><td style="text-align: left;">该字段给出了与段相关的标记。</td></tr><tr class="even"><td style="text-align: left;">p_align</td><td style="text-align: left;">可加载的程序的段的 p_vaddr 以及 p_offset 的大小必须是 page 的整数倍。该成员给出了段在文件以及内存中的对齐方式。如果该值为 0 或 1 的话，表示不需要对齐。除此之外，p_align 应该是 2 的整数指数次方，并且 p_vaddr 与 p_offset 在模 p_align 的意义下，应该相等。</td></tr></tbody></table><h2 id="段类型-p_type">段类型 p_type</h2><table><thead><tr class="header"><th style="text-align: left;">名字</th><th style="text-align: left;">取值</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">PT_NULL</td><td style="text-align: left;">0</td><td style="text-align: left;">表明段未使用，其结构中其他成员都是未定义的。</td></tr><tr class="even"><td style="text-align: left;">PT_LOAD</td><td style="text-align: left;">1</td><td style="text-align: left;">此类型段为一个可加载的段，大小由 p_filesz 和 p_memsz 描述。文件中的字节被映射到相应内存段开始处。如果 p_memsz 大于 p_filesz，“剩余”的字节都要被置为0。p_filesz 不能大于 p_memsz。可加载的段在程序头部中按照 p_vaddr 的升序排列。</td></tr><tr class="odd"><td style="text-align: left;">PT_DYNAMIC</td><td style="text-align: left;">2</td><td style="text-align: left;">此类型段给出动态链接信息。</td></tr><tr class="even"><td style="text-align: left;">PT_INTERP</td><td style="text-align: left;">3</td><td style="text-align: left;">此类型段给出了一个以 NULL 结尾的字符串的位置和长度，该字符串将被当作解释器调用。这种段类型仅对可执行文件有意义（也可能出现在共享目标文件中）。此外，这种段在一个文件中最多出现一次。而且这种类型的段存在的话，它必须在所有可加载段项的前面。</td></tr><tr class="odd"><td style="text-align: left;">PT_NOTE</td><td style="text-align: left;">4</td><td style="text-align: left;">此类型段给出附加信息的位置和大小。</td></tr><tr class="even"><td style="text-align: left;">PT_SHLIB</td><td style="text-align: left;">5</td><td style="text-align: left;">该段类型被保留，不过语义未指定。而且，包含这种类型的段的程序不符合ABI标准。</td></tr><tr class="odd"><td style="text-align: left;">PT_PHDR</td><td style="text-align: left;">6</td><td style="text-align: left;">该段类型的数组元素如果存在的话，则给出了程序头部表自身的大小和位置，既包括在文件中也包括在内存中的信息。此类型的段在文件中最多出现一次。<strong>此外，只有程序头部表是程序的内存映像的一部分时，它才会出现</strong>。如果此类型段存在，则必须在所有可加载段项目的前面。</td></tr><tr class="even"><td style="text-align: left;">PT_LOPROC~PT_HIPROC</td><td style="text-align: left;">0x70000000 ~0x7fffffff</td><td style="text-align: left;">此范围的类型保留给处理器专用语义。</td></tr></tbody></table><h2 id="基地址-base-address">基地址 Base Address</h2><p>程序头部的虚拟地址可能并不是程序内存镜像中实际的虚拟地址。通常来说，可执行程序都会包含绝对地址的代码。为了使得程序可以正常执行，段必须在相应的虚拟地址处。另一方面，共享目标文件通常来说包含与地址无关的代码。这可以使得共享目标文件可以被多个进程加载，同时保持程序执行的正确性。尽管系统会为不同的进程选择不同的虚拟地址，但是它仍然保留段的相对地址，<strong>因为地址无关代码使用段之间的相对地址来进行寻址，内存中的虚拟地址之间的差必须与文件中的虚拟地址之间的差相匹配</strong>。内存中任何段的虚拟地址与文件中对应的虚拟地址之间的差值对于任何一个可执行文件或共享对象来说是一个单一常量值。这个差值就是基地址，基地址的一个用途就是在动态链接期间重新定位程序。</p><p>可执行文件或者共享目标文件的基地址是在执行过程中由以下三个数值计算的</p><ul><li>虚拟内存加载地址</li><li>最大页面大小</li><li>程序可加载段的最低虚拟地址</li></ul><p>要计算基地址，首先要确定可加载段中 p_vaddr 最小的内存虚拟地址，之后把该内存虚拟地址缩小为与之最近的最大页面的整数倍即是基地址。根据要加载到内存中的文件的类型，内存地址可能与 p_vaddr 相同也可能不同。</p>]]></content>
    
    
    <categories>
      
      <category>Re学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android的JNI_OnLoad</title>
    <link href="/2024/03/28/Android%E7%9A%84JNI-OnLoad/"/>
    <url>/2024/03/28/Android%E7%9A%84JNI-OnLoad/</url>
    
    <content type="html"><![CDATA[<h1 id="一jni_onload简介">一、JNI_OnLoad简介</h1><p>Java JNI有两种方法，一种是通过javah,获取一组带签名函数，然后实现这些函数。 这种方法很常用，也是官方推荐的方法。 还有一种就是JNI_OnLoad方法。</p><p>当Android的VM(Virtual Machine)执行到C组件(即so档)里的System.loadLibrary()函数时，</p><p>首先会去执行C组件里的JNI_OnLoad()函数。</p><p>它的用途有二：</p><ul><li><p>告诉VM此C组件使用那一个JNI版本。 如果你的.so档没有提供JNI_OnLoad()函数，VM会默认该*.so档是使用最老的JNI 1.1版本。 由于新版的JNI做了许多扩充，如果需要使用JNI的新版功能， 例如JNI 1.4的java.nio.ByteBuffer,就必须藉由JNI_OnLoad()函数来告知VM。</p></li><li><p>由于VM执行到System.loadLibrary()函数时，就会立即先呼叫JNI_OnLoad()， 所以C组件的开发者可以藉由JNI_OnLoad()来进行C组件内的初期值之设定(Initialization) 。</p></li></ul><p>其实Android中的so文件就像是Windows下的DLL一样，JNI_OnLoad和JNI_OnUnLoad函数 就像是DLL中的PROCESS ATTATCH和DEATTATCH的过程一样，可以同样做一些初始化和反初始化的动作。</p><h1 id="二android系统加载jni-lib的方式">二、Android系统加载JNI Lib的方式</h1><h2 id="android系统加载jni-lib的方式">1.Android系统加载JNI Lib的方式</h2><p>Android系统加载JNI Lib的方式有如下两种：</p><ol type="1"><li>通过JNI_OnLoad</li><li>如果JNI Lib没有定义JNI_OnLoad，则dvm调用dvmResolveNativeMethod进行动态解析</li></ol><h2 id="jni_onload方法">2. JNI_OnLoad方法</h2><p>System.loadLibrary调用流程如下所示： <figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xl">S<span class="hljs-function"><span class="hljs-title">ystem</span>.loadLibrary-&gt;</span><br>   R<span class="hljs-function"><span class="hljs-title">untime</span>.loadLibrary-&gt;</span>(Java)<br>     <span class="hljs-function"><span class="hljs-title">nativeLoad</span>-&gt;</span>(C: java_lang_Runtime.cpp)<br>       D<span class="hljs-function"><span class="hljs-title">alvik_java_lang_Runtime_nativeLoad</span>-&gt;</span><br>          <span class="hljs-function"><span class="hljs-title">dvmLoadNativeCode</span>-&gt;</span> (dalvik/vm/Native.cpp)<br>              <span class="hljs-number">1</span>) dlopen(pathName, RTLD_LAZY) (把.so mmap到进程空间，并把func等相关信息填充到soinfo中)<br>              <span class="hljs-number">2</span>) dlsym(handle, <span class="hljs-string">&quot;JNI_OnLoad&quot;</span>)<br>              <span class="hljs-number">3</span>) JNI_O<span class="hljs-function"><span class="hljs-title">nLoad</span>-&gt;</span><br>                      R<span class="hljs-function"><span class="hljs-title">egisterNatives</span>-&gt;</span><br>                         dvmRegisterJNIMethod(ClassObject* clazz, const char* methodName,<br>                                                <span class="hljs-function"><span class="hljs-title">const</span> char* signature, void* fnPtr)-&gt;</span><br>                            <span class="hljs-function"><span class="hljs-title">dvmUseJNIBridge</span>(method, fnPtr)-&gt;</span>  (<span class="hljs-function"><span class="hljs-title">method</span>-&gt;</span>nativeFunc = func)<br></code></pre></td></tr></table></figure> JNI函数在进程空间中的起始地址被保存在ClassObject-&gt;directMethods中。·、 <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">struct ClassObject : <span class="hljs-keyword">Object</span> &#123;  <br>    <span class="hljs-comment">/* static, private, and &lt;init&gt; methods */</span>  <br>    <span class="hljs-type">int</span>             directMethodCount;  <br>    <span class="hljs-keyword">Method</span>*         directMethods;  <br><br>    <span class="hljs-comment">/* virtual methods defined in this class; invoked through vtable */</span>  <br>    <span class="hljs-type">int</span>             virtualMethodCount;  <br>    <span class="hljs-keyword">Method</span>*         virtualMethods;  <br>&#125;  <br></code></pre></td></tr></table></figure> 此ClassObject通过gDvm.jniGlobalRefTable或gDvm.jniWeakGlobalRefLock获取。</p><h2 id="dvmresolvenativemethod延迟解析机制">3.dvmResolveNativeMethod延迟解析机制</h2><p>如果JNI Lib中没有JNI_OnLoad，即在执行System.loadLibrary时， 无法把此JNI Lib实现的函数在进程中的地址增加到ClassObject-&gt;directMethods。 则直到需要调用的时候才会解析这些javah风格的函数 。 这样的函数dvmResolveNativeMethod(dalvik/vm/Native.cpp)来进行解析， 其执行流程如下所示： <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">void dvmResolveNativeMethod(<span class="hljs-keyword">const</span> u4* args, JValue* pResult,<br>       <span class="hljs-keyword">const</span> <span class="hljs-keyword">Method</span>* <span class="hljs-title function_">method</span>, <span class="hljs-title function_">Thread</span>* <span class="hljs-title function_">self</span>)  --&gt; <span class="hljs-params">(Resolve a native <span class="hljs-keyword">method</span> <span class="hljs-keyword">and</span> invoke it.)</span><br><br>   1) <span class="hljs-title function_">void</span>* <span class="hljs-title function_">func</span> = <span class="hljs-title function_">lookupSharedLibMethod</span><span class="hljs-params">(<span class="hljs-keyword">method</span>)</span><span class="hljs-params">(根据signature在所有已经打开的.so中寻找此函数实现)</span><br>           <span class="hljs-title function_">dvmHashForeach</span><span class="hljs-params">(gDvm.nativeLibs, findMethodInLib,(void*)</span> <span class="hljs-title function_">method</span>)-&gt;<br>                <span class="hljs-title function_">findMethodInLib</span><span class="hljs-params">(void* vlib, void* vmethod)</span>-&gt;<br>                   <span class="hljs-title function_">dlsym</span><span class="hljs-params">(pLib-&gt;handle, mangleCM)</span><br><br>  2) <span class="hljs-title function_">dvmUseJNIBridge</span><span class="hljs-params">((<span class="hljs-keyword">Method</span>*)</span> <span class="hljs-title function_">method</span>, <span class="hljs-title function_">func</span>);<br>  <span class="hljs-number">3</span>) <span class="hljs-comment">(*method-&gt;nativeFunc)(args, pResult, method, self);  (调用执行)</span><br></code></pre></td></tr></table></figure></p><hr /><p>2024.3.28更新</p><h1 id="三jni_onload动态注册流程与逆向分析">三、JNI_OnLoad动态注册流程与逆向分析</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//第一步，实现JNI_OnLoad方法</span><br>JNIEXPORT jint <span class="hljs-title function_">JNI_OnLoad</span><span class="hljs-params">(JavaVM* jvm, <span class="hljs-type">void</span>* reserved)</span>&#123;<br>    <span class="hljs-comment">//第二步，获取JNIEnv</span><br>    JNIEnv* env = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span>(jvm-&gt;GetEnv((<span class="hljs-type">void</span>**)&amp;env, JNI_VERSION_1_6) != JNI_OK)&#123;<br>        <span class="hljs-keyword">return</span> JNI_FALSE;<br>    &#125;<br>    <span class="hljs-comment">//第三步，获取注册方法所在Java类的引用</span><br>    jclass clazz = env-&gt;FindClass(<span class="hljs-string">&quot;com/curz0n/MainActivity&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!clazz)&#123;<br>        <span class="hljs-keyword">return</span> JNI_FALSE;<br>    &#125;<br>    <span class="hljs-comment">//第四步，动态注册native方法</span><br>    <span class="hljs-keyword">if</span>(env-&gt;RegisterNatives(clazz, gMethods, <span class="hljs-keyword">sizeof</span>(gMethods)/<span class="hljs-keyword">sizeof</span>(gMethods[<span class="hljs-number">0</span>])))&#123;<br>        <span class="hljs-keyword">return</span> JNI_FALSE;<br>    &#125;<br>    <span class="hljs-keyword">return</span> JNI_VERSION_1_6;<br>&#125;<br></code></pre></td></tr></table></figure><p>大概就是这样子的：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo21711613380558.png" alt="1711613380558" /><figcaption aria-hidden="true">1711613380558</figcaption></figure><p><code>gMethods</code>变量是<code>JNINativeMethod</code>结构体，用于映射Java方法与C/C++函数的关系，其定义如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* name; <span class="hljs-comment">//动态注册的Java方法名</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* signature; <span class="hljs-comment">//描述方法参数和返回值</span><br>    <span class="hljs-type">void</span>*       fnPtr; <span class="hljs-comment">//指向实现Java方法的C/C++函数指针</span><br>&#125; JNINativeMethod;<br></code></pre></td></tr></table></figure><p>所以就能从off_43CC8附近就能找到指向的函数。</p><h2 id="jninativemethod结构体分析">JNINativeMethod结构体分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* name; <span class="hljs-comment">//动态注册的Java方法名</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* signature; <span class="hljs-comment">//描述方法参数和返回值</span><br>    <span class="hljs-type">void</span>*       fnPtr; <span class="hljs-comment">//指向实现Java方法的C/C++函数指针</span><br>&#125; JNINativeMethod;<br></code></pre></td></tr></table></figure><p><strong>主要分析第二个参数signature</strong>：</p><p>java有自己的基本数据类型，但是java的数据类型是不能直接和c/c++交互的，为了统一这个问题，jni也 给出了一套数据类型的于Java一一对应。</p><table><thead><tr class="header"><th>字符</th><th>c/c++类型</th><th>Java类型</th></tr></thead><tbody><tr class="odd"><td>V</td><td>void</td><td>void</td></tr><tr class="even"><td>Z</td><td>jboolean</td><td>boolean</td></tr><tr class="odd"><td>I</td><td>jint</td><td>int</td></tr><tr class="even"><td>J</td><td>jlong</td><td>long</td></tr><tr class="odd"><td>D</td><td>jdouble</td><td>double</td></tr><tr class="even"><td>F</td><td>jfloat</td><td>float</td></tr><tr class="odd"><td>B</td><td>jbyte</td><td>byte</td></tr><tr class="even"><td>C</td><td>jchar</td><td>char</td></tr><tr class="odd"><td>S</td><td>jshort</td><td>short</td></tr><tr class="even"><td>[I</td><td>jintArray</td><td>int[]</td></tr><tr class="odd"><td>[F</td><td>jfloatArray</td><td>float[]</td></tr><tr class="even"><td>[B</td><td>jbyteArray</td><td>byte[]</td></tr><tr class="odd"><td>[C</td><td>jcharArray</td><td>char[]</td></tr><tr class="even"><td>[S</td><td>jshortArray</td><td>short[]</td></tr><tr class="odd"><td>[D</td><td>jdoubleArray</td><td>double[]</td></tr><tr class="even"><td>[J</td><td>jlongArray</td><td>long[]</td></tr><tr class="odd"><td>[Z</td><td>jbooleanArray</td><td>boolean[]</td></tr></tbody></table><p>如果Java函数的参数是class，则以"L"开头，以";" 结尾中间是用"/" 隔开的包及类名。而其对应的C函数名的参数则为jobject.</p><p>举一个例子:Java是String类，其对应的类为jstring：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">Ljava<span class="hljs-regexp">/lang/</span>String; String jstring<br>Ljava<span class="hljs-regexp">/net/</span>Socket; Socket jobject<br></code></pre></td></tr></table></figure><p>如果JAVA函数位于一个嵌入类，则用$作为类名间的分隔符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">例如 <span class="hljs-string">&quot;(Ljava/lang/String;Landroid/os/Utils<span class="hljs-variable">$UtilsStatus</span>;)Z&quot;</span><br></code></pre></td></tr></table></figure><p>对于signature的值，括号里面表示参数的类型，括号后面表示返回值。</p>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>米奇妙妙Frida小函数</title>
    <link href="/2024/03/26/%E7%B1%B3%E5%A5%87%E5%A6%99%E5%A6%99Frida%E5%B0%8F%E5%87%BD%E6%95%B0/"/>
    <url>/2024/03/26/%E7%B1%B3%E5%A5%87%E5%A6%99%E5%A6%99Frida%E5%B0%8F%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="traversemodules">TraverseModules</h1><p><code>TraverseModules</code> 是 Frida 提供的一个用于遍历模块的函数。它接受两个参数：<code>scope</code> 和 <code>callbacks</code>。</p><ul><li><code>scope</code> 参数指定了遍历的范围，可以是 "single"、"all" 或 "exports"。在这段代码中，使用了 "single"，表示只遍历当前进程加载的模块。</li><li><code>callbacks</code> 参数是一个包含各种回调函数的对象，用于处理遍历过程中的不同事件和结果。这段代码并未提供具体的回调函数，因此默认使用 Frida 的默认回调函数。</li></ul><p>EP.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> libil2cpp = <span class="hljs-title class_">TraverseModules</span>(<span class="hljs-string">&#x27;single&#x27;</span>, &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;libil2cpp.so&#x27;</span>&#125;);<br></code></pre></td></tr></table></figure><p>通过传递 <code>&#123;name: 'libil2cpp.so'&#125;</code> 作为筛选条件，代码指定了要查找的目标模块的名称为 "libil2cpp.so"。</p>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Andriod</tag>
      
      <tag>frida</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sec2023安卓初赛复现</title>
    <link href="/2024/03/25/sec2023%E5%AE%89%E5%8D%93%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/03/25/sec2023%E5%AE%89%E5%8D%93%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="安装运行后检测绕过">安装运行后检测绕过</h1><p>adb安装，打开发现：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240326145930896.png" alt="image-20240326145930896" /><figcaption aria-hidden="true">image-20240326145930896</figcaption></figure><p>楽，估计是检测到了什么。</p><p>猜基本都是什么frida、idaserver什么的，先进shell重命名一下：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240326150345827.png" alt="image-20240326150345827" /><figcaption aria-hidden="true">image-20240326150345827</figcaption></figure><p>再开发现还是会，个人觉得是这个<code>android_server64</code>(ida远程调试服务器)被检测到了，删除后发现能够正常运行，不过我自己把ida_server放在子文件夹下没有被抓到（</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240326150610784.png" alt="image-20240326150610784" /><figcaption aria-hidden="true">image-20240326150610784</figcaption></figure><p>算是先过了一开始的检测，能够运行了。</p><h1 id="用jadx对包体进行分析">用jadx对包体进行分析</h1><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240326150858235.png" alt="image-20240326150858235" /><figcaption aria-hidden="true">image-20240326150858235</figcaption></figure><p>发现是使用Unity3D</p><ul><li>包名：<code>com.com.sec2023.rocketmouse.mouse</code></li><li>入口点：<code>com.unity3d.player.UnityPlayerActivity</code></li></ul><p>不过此前自己是没有逆向过Unity制作的安卓游戏的，上来直接挑战这个，楽</p><h1 id="解压看so">解压看so</h1><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240326151240788.png" alt="image-20240326151240788" /><figcaption aria-hidden="true">image-20240326151240788</figcaption></figure><p>Unity的游戏都有着libil2cpp.so，github上有个开源的项目<a href="https://github.com/Perfare/Il2CppDumper">Il2CppDumper</a>可以获取实现获取符号表</p><p>解压进入目录中，拿到<code>libil2cpp.so</code>与<code>global-metadata.dat</code>。 <code>libil2cpp.so</code>: <code>\lib\armeabi-v7a\libil2cpp.so</code> <code>global-metadata.dat</code>: <code>\assets\bin\Data\Managed\Metadata\global-metadata.dat</code></p><p>我去，着IL2CppDumper还有调用选择文件的API，不用自己手写文件路径，好评。</p><p>不过和复现的WP一样是失败了：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240326152711549.png" alt="image-20240326152711549" /><figcaption aria-hidden="true">image-20240326152711549</figcaption></figure><p>跑010模板也对的上，应该是没有加密的：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240326152920430.png" alt="image-20240326152920430" /><figcaption aria-hidden="true">image-20240326152920430</figcaption></figure><p>至于libil2cpp.so，反编译也是依托：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240326153239591.png" alt="image-20240326153239591" /><figcaption aria-hidden="true">image-20240326153239591</figcaption></figure><p>符号表除了一些API之外，剩下的就是纯乱，但是运行的时候不可能会这样的，准备使用frida把它自解密后的数据dump下来</p><h1 id="dump数据">dump数据</h1><p>在开启frida_server之后，又出现一样的heck detect的提示，盲猜是检测了frida端口，关掉进程之后又能运行，尝试换端口启动</p><p><code>./frs16 -l 0.0.0.0:27041</code></p><p>能跑起来来了</p><p>根据多个师傅的WP，dump内存的方法多种多样，复现就是为了学习，全部做一遍：</p><h2 id="gg修改器-dump">gg修改器 dump</h2><p>起点：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240326161127735.png" alt="image-20240326161127735" /><figcaption aria-hidden="true">image-20240326161127735</figcaption></figure><p>终点</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240326161044469.png" alt="image-20240326161044469" /><figcaption aria-hidden="true">image-20240326161044469</figcaption></figure><p>再用IL2CppDump看看：</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240326161740481.png" /></p><p>好！</p><p>能从exe目录下得到</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240326205619243.png" alt="image-20240326205619243" /><figcaption aria-hidden="true">image-20240326205619243</figcaption></figure><p>但是dump下来的文件没有导入导出函数的符号</p><p>而 il2cpp 符号的脚本又是针对于 dump 文件的</p><p>所以修复一下dump的文件头之类的</p><p>.....修不懂。。</p><p>挖个坑，自己PE没看完呢</p><hr /><p>Fallw1nd师傅那个dump下来怪怪的，接着这边了</p><h3 id="修复dump数据">修复dump数据</h3><p>首先是先将每个program_table的每一个p_offset改成p_vaddr</p><p>同时也将每一个p_filesz改成p_memsz（因为原先是进行了加固，现在这个是在内存中dump下来的，现在对应的段已经解压到内存的对应地址）</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240403235731355.png" alt="image-20240403235731355" /><figcaption aria-hidden="true">image-20240403235731355</figcaption></figure><p>然后注意最后一个表，这个表的结尾地址就是SECTION_HEADER的开头，所以SECTION_HEADER本来就应该是0x13BC000+63352 = 0x13CB778，所以填到文件的地址</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240404000021360.png" alt="image-20240404000021360" /><figcaption aria-hidden="true">image-20240404000021360</figcaption></figure><p>修改完按 program_table 按一下 F5 就会重新分析了,也可以看到一片空白的 section_header：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240404000107492.png" alt="image-20240404000107492" /><figcaption aria-hidden="true">image-20240404000107492</figcaption></figure><p>直接将原版的复制到dump下来的(Ctrl+shift+C Ctrl+shift+V)</p><p>再 F5 刷新</p><p>刷新后，发现section header table乱码，和旁边的完全不同</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240409213702661.png" alt="image-20240409213702661" /><figcaption aria-hidden="true">image-20240409213702661</figcaption></figure><p>这部分的值是根据header的e_shtrndx的值，去寻找section header对应的块，再去寻找对应的符号：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240409213901334.png" alt="image-20240409213901334" /><figcaption aria-hidden="true">image-20240409213901334</figcaption></figure><p>这里的值是26，指的是section_table_element[26]</p><p><code>ection_header_table-&gt;section_table_element[26]</code>中<code>s_offset</code>的值决定了section的名称将从<code>1199370h</code>去索引</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240409214010117.png" alt="image-20240409214010117" /><figcaption aria-hidden="true">image-20240409214010117</figcaption></figure><p>就是分析的data块，section的所有名称都在这个地方，把原来的复制过去就行，再F5刷新一下就行</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240409214135598.png" alt="image-20240409214135598" /><figcaption aria-hidden="true">image-20240409214135598</figcaption></figure><p>但是模板还是没分析出来，接下来就要修复section的偏移：</p><p>节(section) 的位置和大小由节头表(secion_header_table)中这两个成员决定</p><table><thead><tr class="header"><th>成员名称</th><th>含义</th></tr></thead><tbody><tr class="odd"><td>s_addr</td><td>如果此 section 需要映射到进程空间,此成员指定映射的起始地址;如不需映射,此值为 0</td></tr><tr class="even"><td>s_offset</td><td>此 section 相对于文件开头的字节偏移量.如果 section 类型为 <code>SHT_NOBITS</code>,表明该 section 在文件中不占空间,这时 sh_offset 没什么用</td></tr></tbody></table><p>修正 节(section) 的偏移有两条规则</p><ul><li>如果s_addr为0,无需修改s_offset</li><li>如果s_addr不为0,则将s_addr的值复制给s_offset</li></ul><p>修正完成后,按下<code>F5</code>重新运行模板<code>ELF.bt</code>,可以发现section的名称已经恢复,同时也有了<code>dynamic_symbol_table</code></p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240409214517506.png" alt="image-20240409214517506" /><figcaption aria-hidden="true">image-20240409214517506</figcaption></figure><p>然后就可以丢到ida分析了</p><h2 id="frida-hook-dlopen">Frida hook dlopen</h2><p>看懂了Fallw1nd师傅的脚本。。至福</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">WriteMemToFile</span>(<span class="hljs-params">addr, size, file_path</span>) &#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//   var prefix = &#x27;/data/data/com.com.sec2023.rocketmouse.mouse/files/&#x27;</span><br>      <span class="hljs-keyword">var</span> prefix = <span class="hljs-string">&#x27;/storage/emulated/0/dump/&#x27;</span><br>    <br>      <span class="hljs-keyword">var</span> mkdir = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&#x27;libc.so&#x27;</span>, <span class="hljs-string">&#x27;mkdir&#x27;</span>);<br>      <span class="hljs-keyword">var</span> chmod = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&#x27;libc.so&#x27;</span>, <span class="hljs-string">&#x27;chmod&#x27;</span>);<br>      <span class="hljs-keyword">var</span> fopen = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&#x27;libc.so&#x27;</span>, <span class="hljs-string">&#x27;fopen&#x27;</span>);<br>      <span class="hljs-keyword">var</span> fwrite = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&#x27;libc.so&#x27;</span>, <span class="hljs-string">&#x27;fwrite&#x27;</span>);<br>      <span class="hljs-keyword">var</span> fclose = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&#x27;libc.so&#x27;</span>, <span class="hljs-string">&#x27;fclose&#x27;</span>);<br>   <br>      <span class="hljs-keyword">var</span> call_mkdir = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(mkdir, <span class="hljs-string">&#x27;int&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>]);<br>      <span class="hljs-keyword">var</span> call_chmod = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(chmod, <span class="hljs-string">&#x27;int&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>]);<br>      <span class="hljs-keyword">var</span> call_fopen =<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(fopen, <span class="hljs-string">&#x27;pointer&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>, <span class="hljs-string">&#x27;pointer&#x27;</span>]);<br>      <span class="hljs-keyword">var</span> call_fwrite =<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(fwrite, <span class="hljs-string">&#x27;int&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;pointer&#x27;</span>]);<br>      <span class="hljs-keyword">var</span> call_fclose = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(fclose, <span class="hljs-string">&#x27;int&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>]);<br>   <br>      <span class="hljs-title function_">call_mkdir</span>(<span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">allocUtf8String</span>(prefix), <span class="hljs-number">0x1FF</span>);<br>      <span class="hljs-title function_">call_chmod</span>(<span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">allocUtf8String</span>(prefix), <span class="hljs-number">0x1FF</span>);<br>      <span class="hljs-keyword">var</span> fp = <span class="hljs-title function_">call_fopen</span>(<br>          <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">allocUtf8String</span>(prefix + file_path),<br>          <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">allocUtf8String</span>(<span class="hljs-string">&#x27;wb&#x27;</span>));<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title function_">call_fwrite</span>(addr, <span class="hljs-number">1</span>, size, fp)) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;[+] Write file success, file path: &#x27;</span> + prefix + file_path);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;[x] Write file failed&#x27;</span>);<br>      &#125;<br>   <br>      <span class="hljs-title function_">call_fclose</span>(fp);<br>    &#125;);<br>  &#125;<br>   <br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">HookLibWithCallback</span>(<span class="hljs-params">name, callback</span>) &#123;<br>    <span class="hljs-keyword">var</span> dlopen = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&#x27;libdl.so&#x27;</span>, <span class="hljs-string">&#x27;dlopen&#x27;</span>);<br>    <span class="hljs-keyword">var</span> detach_listener = <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(dlopen, &#123;<br>      <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>) &#123;<br>        <span class="hljs-keyword">var</span> cur = args[<span class="hljs-number">0</span>].<span class="hljs-title function_">readCString</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;[+] dlopen called, name: &#x27;</span> + cur);<br>        <span class="hljs-keyword">if</span> (cur.<span class="hljs-title function_">indexOf</span>(name) != -<span class="hljs-number">1</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">hook</span> = <span class="hljs-literal">true</span>;<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">hook</span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;[+] Hook Lib success, name:&#x27;</span>, name);<br>          <span class="hljs-title function_">callback</span>();<br>          detach_listener.<span class="hljs-title function_">detach</span>();<br>        &#125;<br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">LogModule</span>(<span class="hljs-params"><span class="hljs-variable language_">module</span></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Module name: &#x27;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Module base: &#x27;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Module size: &#x27;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">size</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">TraverseModules</span>(<span class="hljs-params">mode, &#123;name = <span class="hljs-string">&#x27;&#x27;</span>, name_array = []&#125;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (mode == <span class="hljs-string">&#x27;all&#x27;</span>) &#123;<br>      <span class="hljs-keyword">var</span> modules = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">enumerateModules</span>();<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; modules.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = modules[i];<br>        <span class="hljs-comment">// LogModule(module);</span><br>      &#125;<br>      <span class="hljs-keyword">return</span> modules;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mode == <span class="hljs-string">&#x27;single&#x27;</span>) &#123;<br>      <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">getModuleByName</span>(name);<br>      <span class="hljs-title class_">LogModule</span>(<span class="hljs-variable language_">module</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mode == <span class="hljs-string">&#x27;multiple&#x27;</span>) &#123;<br>      <span class="hljs-keyword">var</span> modules = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">enumerateModules</span>();<br>      <span class="hljs-keyword">var</span> target_modules = [];<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; modules.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = modules[i];<br>        <span class="hljs-keyword">if</span> (name_array.<span class="hljs-title function_">indexOf</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span>) != -<span class="hljs-number">1</span>) &#123;<br>          <span class="hljs-title class_">LogModule</span>(<span class="hljs-variable language_">module</span>);<br>          target_modules.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">module</span>);<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> target_modules;<br>    &#125;<br>  &#125;<br>   <br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">DumpIL2CPP</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> libil2cpp = <span class="hljs-title class_">TraverseModules</span>(<span class="hljs-string">&#x27;single&#x27;</span>, &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;libil2cpp.so&#x27;</span>&#125;);<br>    <span class="hljs-title class_">WriteMemToFile</span>(libil2cpp.<span class="hljs-property">base</span>, libil2cpp.<span class="hljs-property">size</span>, <span class="hljs-string">&#x27;libil2cpp.so&#x27;</span>);<br>  &#125;<br>   <br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">HookLibWithCallback</span>(<span class="hljs-string">&#x27;libil2cpp.so&#x27;</span>, <span class="hljs-title class_">DumpIL2CPP</span>);<br>  &#125;<br>   <br>  <span class="hljs-title function_">main</span>();<br></code></pre></td></tr></table></figure><p>根据自己的情况把dump的地址改了，不知道为什么我这边有root权限但是搞不到里面的文件，只能这样子保存然后dump下来</p><p>怪哦，这个好像dump的不多。</p><h1 id="ida分析dump的libil2cpp">ida分析dump的libil2cpp</h1><p>将 dump 文件载入 ida 之后,最好是 Rebase 一下,因为是运行态文件,可能有些内存值已经被重定位,因此 Rebase 之后可能得到更多符号, Rebase 的值就是 dump 文件的载入地址,文件名上就有,比如我的是 0x7495598000</p>]]></content>
    
    
    <categories>
      
      <category>安卓实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>近期目标2024-3-25</title>
    <link href="/2024/03/25/%E8%BF%91%E6%9C%9F%E7%9B%AE%E6%A0%872024-3-25/"/>
    <url>/2024/03/25/%E8%BF%91%E6%9C%9F%E7%9B%AE%E6%A0%872024-3-25/</url>
    
    <content type="html"><![CDATA[<p>简单写一下最近的目标吧</p><h1 id="最重要的历年腾讯游戏安全竞赛复现">（最重要的）历年腾讯游戏安全竞赛复现：</h1><p>2023-初赛：</p><p>https://bbs.kanxue.com/thread-278648.htm</p><p>https://bbs.kanxue.com/thread-276949.htm</p><p>2023-决赛：</p><p>https://bbs.kanxue.com/thread-279011.htm</p><p>https://bbs.kanxue.com/thread-276956.htm</p><p>2023官方网址：</p><p>https://gslab.qq.com/html/competition/2023/index.htm</p><hr /><p>2022-初赛：</p><p>https://bbs.kanxue.com/thread-272518.htm</p><p>2022-决赛：</p><p>https://bbs.kanxue.com/thread-272519.htm</p><p>2022官方网址：</p><p>https://gslab.qq.com/html/competition/2022/race-pre.htm</p><hr /><p>2021官方网址：</p><p>https://gslab.qq.com/html/competition/2021/index.htm</p><p>相关连接：</p><p>https://www.52pojie.cn/forum-77-1.html</p><h1 id="unidbg学习">UniDBG学习：</h1><p>https://bbs.kanxue.com/thread-277086.htm</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓这档事08</title>
    <link href="/2024/03/25/%E5%AE%89%E5%8D%93%E8%BF%99%E6%A1%A3%E4%BA%8B08/"/>
    <url>/2024/03/25/%E5%AE%89%E5%8D%93%E8%BF%99%E6%A1%A3%E4%BA%8B08/</url>
    
    <content type="html"><![CDATA[<h1 id="frida写数据">Frida写数据</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//一般写在app的私有目录里，不然会报错:failed to open file (Permission denied)(实际上就是权限不足)</span><br><span class="hljs-keyword">var</span> file_path = <span class="hljs-string">&quot;/data/user/0/com.zj.wuaipojie/test.txt&quot;</span>;<br><span class="hljs-keyword">var</span> file_handle = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(file_path, <span class="hljs-string">&quot;wb&quot;</span>);<br><span class="hljs-keyword">if</span> (file_handle &amp;&amp; file_handle != <span class="hljs-literal">null</span>) &#123;<br>        file_handle.<span class="hljs-title function_">write</span>(data); <span class="hljs-comment">//写入数据</span><br>        file_handle.<span class="hljs-title function_">flush</span>(); <span class="hljs-comment">//刷新</span><br>        file_handle.<span class="hljs-title function_">close</span>(); <span class="hljs-comment">//关闭</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="frida_inlinehook与读写汇编">Frida_inlineHook与读写汇编</h1><p>Inline hook（内联钩子）是一种在程序运行时修改函数执行流程的技术。<strong>它通过修改函数的原始代码，将目标函数的执行路径重定向到自定义的代码段，从而实现对目标函数的拦截和修改。</strong></p><p>简单来说就是可以对任意地址的指令进行hook读写操作</p><div class="note note-primary">            <p>常见inlinehook框架: <a href="https://github.com/ele7enxxh/Android-Inline-Hook">Android-Inline-Hook</a> <a href="https://github.com/asLody/whale">whale</a> <a href="https://github.com/jmpews/Dobby">Dobby</a> <a href="http://www.cydiasubstrate.com/">substrate</a></p><p>找个时间看看（</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">inline_hook</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> soAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>);<br>    <span class="hljs-keyword">if</span> (soAddr) &#123;<br>        <span class="hljs-keyword">var</span> func_addr = soAddr.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x10428</span>);<br>        <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(func_addr, &#123;<br>                <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-property">x22</span>); <span class="hljs-comment">//注意此时就没有args概念了</span><br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-property">x22</span> = <span class="hljs-title function_">ptr</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">//赋值方法参考上一节课</span><br>                &#125;,<br>                <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123;<br>                &#125;<br>            &#125;<br>            )<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这个是将运行到指定地址，然后再修改寄存器：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240325213431747.png" alt="image-20240325213431747" /><figcaption aria-hidden="true">image-20240325213431747</figcaption></figure><p>因为是onEnter，所以是运行到这一行，然后把W22修改成1</p><h2 id="将目标地址的汇编解析成指令">将目标地址的汇编解析成指令</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> soAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>);<br><span class="hljs-keyword">var</span> codeAddr = <span class="hljs-title class_">Instruction</span>.<span class="hljs-title function_">parse</span>(soAddr.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x10428</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(codeAddr.<span class="hljs-title function_">toString</span>());<br></code></pre></td></tr></table></figure><p>使用Frida提供的Instruction库</p><h2 id="在目标地址覆写汇编指令">在目标地址覆写汇编指令</h2><p>有个用于将ARM汇编转为16进制数据的<a href="https://armconverter.com/">网站</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> soAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>);<br>    <span class="hljs-keyword">var</span> codeAddr = soAddr.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x10428</span>);<br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">patchCode</span>(codeAddr,<span class="hljs-number">4</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">code</span>)&#123;<br>        <span class="hljs-keyword">const</span> writer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Arm64Writer</span>(code,&#123;<span class="hljs-attr">pc</span>:codeAddr&#125;);<br>        <span class="hljs-keyword">var</span> res = <span class="hljs-title function_">hexToBytes</span>(<span class="hljs-string">&quot;20008052&quot;</span>);<span class="hljs-comment">//这个是arm指令转的16进制字符串</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>        writer.<span class="hljs-title function_">putBytes</span>(res);<br>        writer.<span class="hljs-title function_">flush</span>();<br>    &#125;<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="普通native函数的主动调用">普通Native函数的主动调用</h1><table><thead><tr class="header"><th style="text-align: left;">数据类型</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">void</td><td style="text-align: left;">无返回值</td></tr><tr class="even"><td style="text-align: left;">pointer</td><td style="text-align: left;">指针</td></tr><tr class="odd"><td style="text-align: left;">int</td><td style="text-align: left;">整数</td></tr><tr class="even"><td style="text-align: left;">long</td><td style="text-align: left;">长整数</td></tr><tr class="odd"><td style="text-align: left;">char</td><td style="text-align: left;">字符</td></tr><tr class="even"><td style="text-align: left;">float</td><td style="text-align: left;">浮点数</td></tr><tr class="odd"><td style="text-align: left;">double</td><td style="text-align: left;">双精度浮点数</td></tr><tr class="even"><td style="text-align: left;">bool</td><td style="text-align: left;">布尔值</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// jni主动调用：</span><br>    <span class="hljs-keyword">var</span> soAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>)<br>    <span class="hljs-keyword">var</span> funAddr = soAddr.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x0000e85c</span>);   <span class="hljs-comment">//  char* AES_ECB_PKCS7_Decrypt(char* arg1, char* arg2)</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">AESAddr</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(funAddr, <span class="hljs-string">&#x27;pointer&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>, <span class="hljs-string">&#x27;pointer&#x27;</span>])<br>    <span class="hljs-keyword">var</span> encTxt = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">allocUtf8String</span>(<span class="hljs-string">&quot;OOmGYpk6s0qPSXEPp4X31g==&quot;</span>)<br>    <span class="hljs-keyword">var</span> key = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">allocUtf8String</span>(<span class="hljs-string">&quot;wuaipojie0123456&quot;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">AESAddr</span>(encTxt, key).<span class="hljs-title function_">readCString</span>())<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="常见的trace工具">常见的Trace工具</h1><table><thead><tr class="header"><th style="text-align: left;">工具名称</th><th style="text-align: left;">描述</th><th style="text-align: left;">链接</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">jnitrace</td><td style="text-align: left;">老牌，经典，信息全，携带方便</td><td style="text-align: left;"><a href="https://github.com/chame1eon/jnitrace">jnitrace</a></td></tr><tr class="even"><td style="text-align: left;">jnitrace-engine</td><td style="text-align: left;">基于jnitrace，可定制化</td><td style="text-align: left;"><a href="https://github.com/chame1eon/jnitrace-engine">jnitrace-engine</a></td></tr><tr class="odd"><td style="text-align: left;">jtrace</td><td style="text-align: left;">定制方便，信息全面，直接在_agent.js或者_agent_stable.js 里面加自己的逻辑就行</td><td style="text-align: left;"><a href="https://github.com/SeeFlowerX/jtrace">jtrace</a></td></tr><tr class="even"><td style="text-align: left;">hook_art.js</td><td style="text-align: left;">可提供jni trace，可以灵活的增加你需要hook的函数</td><td style="text-align: left;"><a href="https://github.com/lasting-yang/frida_hook_libart">hook_art.js</a></td></tr><tr class="odd"><td style="text-align: left;">JNI-Frida-Hook</td><td style="text-align: left;">函数名已定义，方便定位</td><td style="text-align: left;"><a href="https://github.com/Areizen/JNI-Frida-Hook">JNI-Frida-Hook</a></td></tr><tr class="even"><td style="text-align: left;">findhash</td><td style="text-align: left;">ida插件，可用于检测加解密函数，也可作为Native Trace库</td><td style="text-align: left;"><a href="https://github.com/Pr0214/findhash">findhash</a></td></tr><tr class="odd"><td style="text-align: left;">Stalker</td><td style="text-align: left;">frida官方提供的代码跟踪引擎，可以在Native层方法级别，块级别，指令级别实现代码修改，代码跟踪</td><td style="text-align: left;"><a href="https://frida.re/docs/stalker/">Stalker</a></td></tr><tr class="even"><td style="text-align: left;">sktrace</td><td style="text-align: left;">类似 ida 指令 trace 功能</td><td style="text-align: left;"><a href="https://github.com/bmax121/sktrace">sktrace</a></td></tr><tr class="odd"><td style="text-align: left;">frida-qbdi-tracer</td><td style="text-align: left;">速度比frida stalker快，免补环境</td><td style="text-align: left;"><a href="https://github.com/lasting-yang/frida-qbdi-tracer">frida-qbdi-tracer</a></td></tr></tbody></table><p>有空看Stalker</p><h2 id="frida-trace">frida-trace</h2><p>官网文档</p><ul><li><a href="https://frida.re/docs/frida-trace/">frida-trace</a></li></ul><p>官网代码</p><ul><li><a href="https://github.com/frida/frida-tools/blob/main/frida_tools/tracer.py">frida-tools/frida_tools/tracer.py</a></li></ul><p><code>frida-trace</code>去hook调试的目标的写法，是和<code>frida</code>是一样的</p><p>命令例子：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">frida-trace.exe -U -F -I &quot;lib52pojie.so&quot; -i &quot;Java_&quot;  <br>#附加当前进程并追踪lib52pojie.so里的所有Java_开头的jni导出函数<br></code></pre></td></tr></table></figure><p>-U -F和frida是一样的，这里不再解释</p><ul><li><code>-i</code> / <code>-a</code>: 跟踪 C 函数或 so 库中的函数。 PS:-a 包含模块+偏移跟踪，一般用于追踪未导出函数，例子：-a "lib52pojie.so!0x4793c"</li></ul><p>包含/排除模块或函数：</p><ul><li><code>-I</code> : 包含指定模块。</li><li><code>-X</code> : 排除指定模块</li></ul><p>Java 方法跟踪：</p><ul><li><code>-j JAVA_METHOD</code>: 包含 Java 方法。</li><li><code>-J JAVA_METHOD</code>: 排除 Java 方法。</li></ul><p>附加方式:</p><ul><li><code>-f</code>:通过 spwan 方式启动</li><li><code>-F</code>:通过 attach 方式附加当前进程</li></ul><p>日志输出:</p><ul><li><code>-o</code>:日志输出到文件</li></ul>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DDMS</title>
    <link href="/2024/03/13/DDMS/"/>
    <url>/2024/03/13/DDMS/</url>
    
    <content type="html"><![CDATA[<h1 id="一ddms是什么">一、DDMS是什么？</h1><p>DDMS（Dalvik Debug Monitor Service），是 Android 开发环境中的Dalvik虚拟机调试监控服务。</p><p>可以进行的操作有：为测试设备截屏，查看特定行程中正在运行的线程以及堆信息、Logcat、广播状态信息、模拟电话呼叫、接收SMS、虚拟地理坐标等，功能非常强大，对于安卓开发者来说是一个非常好的工具，下面我们来看看其具体用法。</p><h1 id="二ddms工作原理">二、DDMS工作原理</h1><p>DDMS将搭建起IDE与测试终端（Emulator 或者connected device）的链接，它们应用各自独立的端口监听调试器的信息，DDMS可以实时监测到测试终端的连接情况。</p><p>当有新的测试终端连接后，DDMS将捕捉到终端的ID，并通过adb建立调试器，从而实现发送指令到测试终端的目的。这也正是为什么DDMS启动时会出现Android Studio无法部署应用的情况，因为占用了ADB，所以要重新部署的话必须得先关闭DDMS。</p><h1 id="三ddms使用方法">三、DDMS使用方法</h1><div class="note note-danger">            <p>因为Android Device Monitor<strong>在 Android Studio 3.1 中已弃用，并从 Android Studio 3.2 中删除</strong></p><p>可以通过 Android 设备监视器使用的功能已被新功能取代。</p>          </div><h2 id="启动方式">启动方式</h2><p>在<code>android-sdk/tools/</code>文件夹中在命令行中使用以下指令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">monitor<br></code></pre></td></tr></table></figure><hr /><p>3/13 更新</p><p>如果有把<code>android-sdk/tools/</code>添加到环境变量，可以直接在命令行执行上述指令即可</p><h2 id="页面分析">页面分析</h2><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240312000939881.png" alt="image-20240312000939881" /><figcaption aria-hidden="true">image-20240312000939881</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android镜像站-2022记录</title>
    <link href="/2024/03/11/android%E9%95%9C%E5%83%8F%E7%AB%99-2022%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/03/11/android%E9%95%9C%E5%83%8F%E7%AB%99-2022%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="android-sdk镜像服务器">Android SDK镜像服务器</h2><p>1.阿里云镜像站地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">mirrors.aliyun.com 端口：80<br></code></pre></td></tr></table></figure><p>2.清华大学镜像站地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">mirrors.tuna.tsinghua.edu.cn 端口：80<br></code></pre></td></tr></table></figure><p>3.北京外国语大学镜像站地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">mirror.bfsu.edu.cn 端口：80<br></code></pre></td></tr></table></figure><p>4.中国科学院开源协会镜像站地址:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs none">IPV4/IPV6: mirrors.opencas.cn 端口：80<br><br>IPV4/IPV6: mirrors.opencas.org 端口：80<br><br>IPV4/IPV6: mirrors.opencas.ac.cn 端口：80<br></code></pre></td></tr></table></figure><p>5.上海GDG镜像服务器地址:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">sdk.gdgshanghai.com 端口：8000<br></code></pre></td></tr></table></figure><p>6.北京化工大学镜像服务器地址:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs none">IPv4: ubuntu.buct.edu.cn/ 端口：80<br><br>IPv4: ubuntu.buct.cn/ 端口：80<br><br>IPv6: ubuntu.buct6.edu.cn/ 端口：80<br></code></pre></td></tr></table></figure><p>7.大连东软信息学院镜像服务器地址:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">mirrors.neusoft.edu.cn 端口：80<br></code></pre></td></tr></table></figure><p>8.腾讯Bugly 镜像:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">android-mirror.bugly.qq.com 端口：8080<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ida调试so学习</title>
    <link href="/2024/03/11/ida%E8%B0%83%E8%AF%95so%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/03/11/ida%E8%B0%83%E8%AF%95so%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="复制android_server至目标设备">复制android_server至目标设备</h2><p>将ida的根目录下的dbgsrv文件夹中的<code>android_server</code>按照目标设备的架构选择对应版本</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmd">//复制到设备上<br>adb push android_server64 /data/local/tmp<br> <br>//修改权限，使之能执行<br>chmod <span class="hljs-number">777</span> /data/local/tmp/android_server64<br> <br>//执行<br><span class="hljs-built_in">cd</span> /data/local/tmp<br>./android_server64<br> <br>//转发端口<br>adb forward tcp:<span class="hljs-number">23946</span> tcp:<span class="hljs-number">23946</span><br></code></pre></td></tr></table></figure><h2 id="使用pmam启动android_server64">使用pm、am、启动android_server64</h2><p>pm和am都是安卓自带的</p><h3 id="pm">pm</h3><p>pm(package manager)包管理工具，可以用于确认包名：</p><p>列出所有的包信息:<code>pm list packages [filter]</code></p><div class="note note-secondary">            <p>pm过滤器：</p><ul><li>-d:只显示禁用的应用的包名</li><li>-e:只显示可用的应用的包名</li><li>-s:只显示系统应用的包名</li><li>-3:只显示第三方应用的包名</li></ul>          </div><h3 id="am">am</h3><p>am是activity manager的缩写，用于启动apk</p><p>am启动程序命令：<code>am start -D -n com.example.testarm/.MainActivity</code></p><div class="note note-info">            <ul><li><p>am start -D -n调试模式打开应用</p></li><li><p>com.example.testarm要调试启动的包名</p></li><li><p>.MainActivityLunch Activity</p></li></ul>          </div><h3 id="android_server64">android_server64</h3><p>直接在shell中启动就可以，如果想修改使用的端口，在后面加上<code>-p[port]</code>就行</p><p>记得adb forward转发端口</p><h3 id="ida设置">ida设置</h3><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20240311233828317.png" alt="image-20240311233828317" /><figcaption aria-hidden="true">image-20240311233828317</figcaption></figure><p>3/13更新</p><p>这个可以不用全勾选，attach好像会在so开始的时候停一下，然后F9再跑就行</p><h3 id="ida-attach">ida attach</h3><p>Debugger &gt; attach to process 找到对应的进程就行</p><h3 id="连接dubug">连接dubug</h3><h4 id="jdb连接">jdb连接</h4><p>用DDMS看程序开发的调试端口，DDMS会自动帮你转发端口</p><p>或者自己手动转发：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb forward tcp:8700 jdwp:PID (pid监听)<br></code></pre></td></tr></table></figure><p>用<code>jdb -connect com.sun.jdi.SocketAttach:hostname=localhost,port=8600</code></p><p>命令进行连接</p><p>port对应的参数是DDMS看到的开放的端口</p><div class="note note-info">            <p>jdb半天没反应的话，重新am启动一下</p>          </div><h3 id="最后">最后</h3><p>看手机（</p><p>等加载完，win调试安卓慢得一批，说是mac调试快的飞起，唉，没钱</p><p>剩下的就是愉快的下断点调试</p><h2 id="frida连接">Frida连接</h2><p>先挖个坑，xman说可以用这个，说是用下面这个指令以spawn方式启动：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">frida -Uf [包名] -l [脚本名] --<span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><p>然后用ida attach上去，再下断点，这个自己还没试成功</p><hr /><p>这篇博客写到一半停了是因为ida断不下来，后来请教APeng大哥解决了</p><p>原因在安卓文件的AndroidManifest.xml 里面，如果配置了（或默认配置了）android:extractNativeLibs="false"，so不会解压出来而是直接映射apk，ida无法找到这个so。</p><p>所以把这个改成true后，ida就能找到so。</p><p>没改之前在proc目录中<code>cat maps</code>是找不到对应的so，改了之后就能看到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">sagit:/proc/16740 # cat maps | grep myso<br>7c6c9c0000-7c6ca04000 r-xp 00000000 103:01 1310888                       /data/app/com.simu.mysowithjava-UmWCxfj5WgTBuVb0OBiMbA==/lib/arm64/libmysowithjava.so<br>7c6ca04000-7c6ca09000 r--p 00043000 103:01 1310888                       /data/app/com.simu.mysowithjava-UmWCxfj5WgTBuVb0OBiMbA==/lib/arm64/libmysowithjava.so<br>7c6ca09000-7c6ca0a000 rw-p 00047000 103:01 1310888                       /data/app/com.simu.mysowithjava-UmWCxfj5WgTBuVb0OBiMbA==/lib/arm64/libmysowithjava.so<br>7c6caee000-7c6cbd5000 r--s 000da000 103:01 1310865                       /data/app/com.simu.mysowithjava-UmWCxfj5WgTBuVb0OBiMbA==/base.apk<br>7c6ccd3000-7c6ccf2000 r--p 00000000 103:01 1310926                       /data/app/com.simu.mysowithjava-UmWCxfj5WgTBuVb0OBiMbA==/oat/arm64/base.odex<br>7c6ccf2000-7c6ccf3000 r-xp 0001f000 103:01 1310926                       /data/app/com.simu.mysowithjava-UmWCxfj5WgTBuVb0OBiMbA==/oat/arm64/base.odex<br>7c6ccf3000-7c6d5e4000 r--s 00000000 103:01 1310928                       /data/app/com.simu.mysowithjava-UmWCxfj5WgTBuVb0OBiMbA==/oat/arm64/base.vdex<br>7c6d5e4000-7c6d5e5000 r--p 00020000 103:01 1310926                       /data/app/com.simu.mysowithjava-UmWCxfj5WgTBuVb0OBiMbA==/oat/arm64/base.odex<br>7c6d5e5000-7c6d5e6000 rw-p 00021000 103:01 1310926                       /data/app/com.simu.mysowithjava-UmWCxfj5WgTBuVb0OBiMbA==/oat/arm64/base.odex<br>7d073c4000-7d073d8000 r--s 00582000 103:01 1310865                       /data/app/com.simu.mysowithjava-UmWCxfj5WgTBuVb0OBiMbA==/base.apk<br>7d074b9000-7d074c0000 r--p 00004000 103:01 1310888                       /data/app/com.simu.mysowithjava-UmWCxfj5WgTBuVb0OBiMbA==/lib/arm64/libmysowithjava.so<br>7d076b1000-7d076b3000 r--p 00046000 103:01 1310888                       /data/app/com.simu.mysowithjava-UmWCxfj5WgTBuVb0OBiMbA==/lib/arm64/libmysowithjava.so<br>7d0aefd000-7d0aefe000 r--p 00047000 103:01 1310888                       /data/app/com.simu.mysowithjava-UmWCxfj5WgTBuVb0OBiMbA==/lib/arm64/libmysowithjava.so<br>7d0b3a3000-7d0b3a4000 r--p 00000000 103:01 1310888                       /data/app/com.simu.mysowithjava-UmWCxfj5WgTBuVb0OBiMbA==/lib/arm64/libmysowithjava.so<br>7d0c902000-7d0c903000 r--p 0001a000 103:01 1310930                       /data/app/com.simu.mysowithjava-UmWCxfj5WgTBuVb0OBiMbA==/oat/arm64/base.art<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>ida</tag>
      
      <tag>debug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>System.LoadLibrary学习</title>
    <link href="/2024/03/08/SystemLoadLibrary%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/03/08/SystemLoadLibrary%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="调用分析">调用分析</h1><p>先看源码</p><p><code>/libcore/ojluni/src/main/java/java/lang/System.java</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CallerSensitive</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadLibrary</span><span class="hljs-params">(String libname)</span> &#123;<br>Runtime.getRuntime().loadLibrary0(VMStack.getCallingClassLoader(), libname);<br>&#125;<br><br><span class="hljs-comment">//将libname加上前缀和后缀，即`lib&lt;libname&gt;.so`</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> String <span class="hljs-title function_">mapLibraryName</span><span class="hljs-params">(String libname)</span>;<br></code></pre></td></tr></table></figure><p>System 的 loadLibrary 最终调用的是 Runtime 中的 loadLibrary0 方法。</p><p>mapLibraryName 方法主要是给 libname 加上 “lib” 的前缀和 “.so” 的后缀。所以我们加载 so 库时，不用带 “lib” 和 “.so” 的字符串。</p><p>调用了<code>/libcore/ojluni/src/main/java/java/lang/Runtime.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadLibrary0</span><span class="hljs-params">(ClassLoader loader, String libname)</span> &#123;<br>    <span class="hljs-comment">// 检测是否存在lib, 前是有对libname进行过处理的.</span><br>    <span class="hljs-keyword">if</span> (libname.indexOf((<span class="hljs-type">int</span>)File.separatorChar) != -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsatisfiedLinkError</span>(<br><span class="hljs-string">&quot;Directory separator should not appear in library name: &quot;</span> + libname);<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">libraryName</span> <span class="hljs-operator">=</span> libname;<br>    <span class="hljs-keyword">if</span> (loader != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 如果classloader不为空，则从classloader中获取so文件路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> loader.findLibrary(libraryName);<br>        <span class="hljs-keyword">if</span> (filename == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// It&#x27;s not necessarily true that the ClassLoader used</span><br>            <span class="hljs-comment">// System.mapLibraryName, but the default setup does, and it&#x27;s</span><br>            <span class="hljs-comment">// misleading to say we didn&#x27;t find &quot;libMyLibrary.so&quot; when we</span><br>            <span class="hljs-comment">// actually searched for &quot;liblibMyLibrary.so.so&quot;.</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsatisfiedLinkError</span>(loader + <span class="hljs-string">&quot; couldn&#x27;t find \&quot;&quot;</span> +<br>                                           System.mapLibraryName(libraryName) + <span class="hljs-string">&quot;\&quot;&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 调用nativeLoad来进行load这个库</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> nativeLoad(filename, loader);<br>        <span class="hljs-keyword">if</span> (error != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsatisfiedLinkError</span>(error);<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 否则通过getLibPaths方式获取到so路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> System.mapLibraryName(libraryName);<br>    List&lt;String&gt; candidates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">lastError</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">for</span> (String directory : getLibPaths()) &#123;<br>        <span class="hljs-comment">// 将文件夹路径和so文件名组成绝对路径</span><br>        <span class="hljs-comment">// 文件夹路径通过getLibPaths()调用initLibPaths()获得</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">candidate</span> <span class="hljs-operator">=</span> directory + filename;<br>        candidates.add(candidate);<br><br>        <span class="hljs-keyword">if</span> (IoUtils.canOpenReadOnly(candidate)) &#123;<br>            <span class="hljs-comment">// 调用nativeLoad来进行load这个库</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> nativeLoad(candidate, loader);<br>            <span class="hljs-keyword">if</span> (error == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span>; <span class="hljs-comment">// We successfully loaded the library. Job done.</span><br>            &#125;<br>            lastError = error;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (lastError != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsatisfiedLinkError</span>(lastError);<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsatisfiedLinkError</span>(<span class="hljs-string">&quot;Library &quot;</span> + libraryName + <span class="hljs-string">&quot; not found; tried &quot;</span> + candidates);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> String[] mLibPaths = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">private</span> String[] getLibPaths() &#123;<br>    <span class="hljs-keyword">if</span> (mLibPaths == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-keyword">if</span> (mLibPaths == <span class="hljs-literal">null</span>) &#123;<br>                mLibPaths = initLibPaths();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> mLibPaths;<br>&#125;<br><span class="hljs-comment">// 在多线程环境下，当多个线程同时访问 getLibPaths() 方法时，可能会导致重复初始化 mLibPaths 数组，从而引发不一致的结果或潜在的竞态条件问题。</span><br><span class="hljs-comment">// 通过使用两个嵌套的if语句和synchronized关键字，可以确保只有一个线程能够执行初始化过程，从而避免了竞态条件。</span><br><span class="hljs-comment">// 通过这样的双重检查和同步块的方式，可以确保在多线程环境下只有一个线程执行初始化过程，从而保证了线程安全性，同时避免了不必要的初始化开销。</span><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String[] initLibPaths() &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">javaLibraryPath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;java.library.path&quot;</span>);<br>    <span class="hljs-keyword">if</span> (javaLibraryPath == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> EmptyArray.STRING;<br>    &#125;<br>    String[] paths = javaLibraryPath.split(<span class="hljs-string">&quot;:&quot;</span>);<br>    <span class="hljs-comment">// Add a &#x27;/&#x27; to the end of each directory so we don&#x27;t have to do it every time.</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paths.length; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (!paths[i].endsWith(<span class="hljs-string">&quot;/&quot;</span>)) &#123;<br>            paths[i] += <span class="hljs-string">&quot;/&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> paths;<br>&#125;<br></code></pre></td></tr></table></figure><p>loadLibrary0 在加载 so 时，先判断 loader 是否为 null 。如果不为 null，就通过 loader 去找到 so 的绝对路径，然后再加载。如果为 null，就从 /system/lib64/ 中去找是否存在要加载的 so 。如果都没有找到就抛出异常。</p><p><code>ClassLoader.findLibrary()</code>:</p><p><code>ClassLoader</code>集成自<code>BaseDexClassLoader</code>，所以调用的是<code>BaseDexClassLoader.findLibrary()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseDexClassLoader</span><span class="hljs-params">(String dexPath, File optimizedDirectory,</span><br><span class="hljs-params">            String librarySearchPath, ClassLoader parent, <span class="hljs-type">boolean</span> isTrusted)</span> &#123;<br>    <span class="hljs-built_in">super</span>(parent);<br>    <span class="hljs-built_in">this</span>.pathList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DexPathList</span>(<span class="hljs-built_in">this</span>, dexPath, librarySearchPath, <span class="hljs-literal">null</span>, isTrusted);<br><br>    <span class="hljs-keyword">if</span> (reporter != <span class="hljs-literal">null</span>) &#123;<br>        reportClassLoaderChain();<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">findLibrary</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> pathList.findLibrary(name);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>BaseDexClassLoader.findLibrary()</code> 最终由 <code>DexPathList.findLibrary()</code> 实现。而 <code>DexPathList.findLibrary()</code> 是在 <code>nativeLibraryPathElements</code> 中遍历查找 存在的 so。</p><p>nativeLibraryPathElements 的值来自 librarySearchPath 和 System.getProperty(“java.library.path”) 。librarySearchPath 主要是 <code>/data/app/&lt;packagename&gt;-xyz==/lib/arm64:/data/app/&lt;packagename&gt;-xyz==/base.apk!/lib/arm64-v8a</code>的路径。System.getProperty(“java.library.path”) 为<code>/system/lib64/</code> 。</p><p>所以 DexPathList 是在这几个目录下查找 so 是否存在。如果存在就返回其绝对路径即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs java">DexPathList(ClassLoader definingContext, String dexPath, String librarySearchPath, File optimizedDirectory, <span class="hljs-type">boolean</span> isTrusted) &#123;<br>    ...<br>    <span class="hljs-comment">//librarySearchPath=&quot;/data/app/&lt;packagename&gt;-xyz==/lib/arm64:/data/app/&lt;packagename&gt;-xyz==/base.apk!/lib/arm64-v8a&quot;</span><br><span class="hljs-built_in">this</span>.nativeLibraryDirectories = splitPaths(librarySearchPath, <span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">this</span>.systemNativeLibraryDirectories = splitPaths(System.getProperty(<span class="hljs-string">&quot;java.library.path&quot;</span>), <span class="hljs-literal">true</span>); <span class="hljs-comment">//&quot;java.library.path&quot;=&quot;/system/lib64&quot;</span><br>    List&lt;File&gt; allNativeLibraryDirectories = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(nativeLibraryDirectories);<br>    allNativeLibraryDirectories.addAll(systemNativeLibraryDirectories);<br><br>    <span class="hljs-built_in">this</span>.nativeLibraryPathElements = makePathElements(allNativeLibraryDirectories);<br>...<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;File&gt; <span class="hljs-title function_">splitPaths</span><span class="hljs-params">(String searchPath, <span class="hljs-type">boolean</span> directoriesOnly)</span> &#123;<br>    List&lt;File&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">if</span> (searchPath != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (String path : searchPath.split(File.pathSeparator)) &#123;<br>            <span class="hljs-keyword">if</span> (directoriesOnly) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">StructStat</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> Libcore.os.stat(path);<br>                    <span class="hljs-keyword">if</span> (!S_ISDIR(sb.st_mode)) &#123;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (ErrnoException ignored) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125;<br>            result.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> NativeLibraryElement[] makePathElements(List&lt;File&gt; files) &#123;<br>    NativeLibraryElement[] elements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeLibraryElement</span>[files.size()];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">elementsPos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (File file : files) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> file.getPath();<br><br>        <span class="hljs-keyword">if</span> (path.contains(zipSeparator)) &#123; <span class="hljs-comment">//zipSeparator=&quot;!/&quot;</span><br>            String split[] = path.split(zipSeparator, <span class="hljs-number">2</span>);<br>            <span class="hljs-type">File</span> <span class="hljs-variable">zip</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(split[<span class="hljs-number">0</span>]);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> split[<span class="hljs-number">1</span>];<br>            elements[elementsPos++] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeLibraryElement</span>(zip, dir);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>            <span class="hljs-comment">// We support directories for looking up native libraries.</span><br>            elements[elementsPos++] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeLibraryElement</span>(file);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (elementsPos != elements.length) &#123;<br>        elements = Arrays.copyOf(elements, elementsPos);<br>    &#125;<br>    <span class="hljs-keyword">return</span> elements;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">findLibrary</span><span class="hljs-params">(String libraryName)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> System.mapLibraryName(libraryName);<br><br>    <span class="hljs-keyword">for</span> (NativeLibraryElement element : nativeLibraryPathElements) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> element.findNativeLibrary(fileName);<br><br>        <span class="hljs-keyword">if</span> (path != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> path;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NativeLibraryElement</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">NativeLibraryElement</span><span class="hljs-params">(File dir)</span> &#123;<br>        <span class="hljs-built_in">this</span>.path = dir;<br>        <span class="hljs-built_in">this</span>.zipDir = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NativeLibraryElement</span><span class="hljs-params">(File zip, String zipDir)</span> &#123;<br>        <span class="hljs-built_in">this</span>.path = zip;<br>        <span class="hljs-built_in">this</span>.zipDir = zipDir;<br><br>        <span class="hljs-keyword">if</span> (zipDir == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">maybeInit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (initialized) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (zipDir == <span class="hljs-literal">null</span>) &#123;<br>            initialized = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            urlHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathURLStreamHandler</span>(path.getPath());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>            System.logE(<span class="hljs-string">&quot;Unable to open zip file: &quot;</span> + path, ioe);<br>            urlHandler = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        initialized = <span class="hljs-literal">true</span>;<br>    &#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">findNativeLibrary</span><span class="hljs-params">(String name)</span> &#123;<br>        maybeInit();<br><br>        <span class="hljs-keyword">if</span> (zipDir == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">entryPath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path, name).getPath();<br>            <span class="hljs-keyword">if</span> (IoUtils.canOpenReadOnly(entryPath)) &#123;<br>                <span class="hljs-keyword">return</span> entryPath;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (urlHandler != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">entryName</span> <span class="hljs-operator">=</span> zipDir + <span class="hljs-string">&#x27;/&#x27;</span> + name;<br>            <span class="hljs-keyword">if</span> (urlHandler.isEntryStored(entryName)) &#123;<br>              <span class="hljs-keyword">return</span> path.getPath() + zipSeparator + entryName;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>找到 so 的绝对路径后就是加载 so 了。so 的加载是通过 nativeLoad 方法实现的。java 层的 nativeLoad 对应的就是 c 层的 <code>Runtime_nativeLoad()</code> 方法。</p><p><code>libcore/ojluni/src/main/native/Runtime.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> NATIVE_METHOD(className, functionName, signature) \</span><br><span class="hljs-meta">&#123; #functionName, signature, (void*)(className ## _ ## functionName) &#125;</span><br><br><br>JNIEXPORT jstring JNICALL<br><span class="hljs-title function_">Runtime_nativeLoad</span><span class="hljs-params">(JNIEnv* env, jclass ignored, jstring javaFilename,</span><br><span class="hljs-params">                   jobject javaLoader)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> JVM_NativeLoad(env, javaFilename, javaLoader);<br>&#125;<br><br><span class="hljs-type">static</span> JNINativeMethod gMethods[] = &#123;<br>  FAST_NATIVE_METHOD(Runtime, freeMemory, <span class="hljs-string">&quot;()J&quot;</span>),<br>  FAST_NATIVE_METHOD(Runtime, totalMemory, <span class="hljs-string">&quot;()J&quot;</span>),<br>  FAST_NATIVE_METHOD(Runtime, maxMemory, <span class="hljs-string">&quot;()J&quot;</span>),<br>  NATIVE_METHOD(Runtime, gc, <span class="hljs-string">&quot;()V&quot;</span>),<br>  NATIVE_METHOD(Runtime, nativeExit, <span class="hljs-string">&quot;(I)V&quot;</span>),<br>  NATIVE_METHOD(Runtime, nativeLoad,<br>               <span class="hljs-string">&quot;(Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/lang/String;)&quot;</span><br>                    <span class="hljs-string">&quot;Ljava/lang/String;&quot;</span>),<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">register_java_lang_Runtime</span><span class="hljs-params">(JNIEnv* env)</span> &#123;<br>  jniRegisterNativeMethods(env, <span class="hljs-string">&quot;java/lang/Runtime&quot;</span>, gMethods, NELEM(gMethods));<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上面代码可以看出 Runtime_nativeLoad 调用的是 JVM_NativeLoad 方法。而 JVM_NativeLoad 真正实现so 的加载是在 vm-&gt;LoadNativeLibrary 方法中。</p><p><code>art/openjdkjvm/OpenjdkJvm.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">JNIEXPORT jstring <span class="hljs-title function_">JVM_NativeLoad</span><span class="hljs-params">(JNIEnv* env,</span><br><span class="hljs-params">                                 jstring javaFilename,</span><br><span class="hljs-params">                                 jobject javaLoader)</span> &#123;<br>  ScopedUtfChars <span class="hljs-title function_">filename</span><span class="hljs-params">(env, javaFilename)</span>;<br>  <span class="hljs-keyword">if</span> (filename.c_str() == <span class="hljs-literal">NULL</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>  &#125;<br><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> error_msg;<br>  &#123;<br>    art::JavaVMExt* vm = art::Runtime::Current()-&gt;GetJavaVM();<br>    <span class="hljs-type">bool</span> success = vm-&gt;LoadNativeLibrary(env,<br>                                         filename.c_str(),<br>                                         javaLoader,<br>                                         &amp;error_msg);<br>    <span class="hljs-keyword">if</span> (success) &#123;<br>      <span class="hljs-keyword">return</span> nullptr;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// Don&#x27;t let a pending exception from JNI_OnLoad cause a CheckJNI issue with NewStringUTF.</span><br>  env-&gt;ExceptionClear();<br>  <span class="hljs-keyword">return</span> env-&gt;NewStringUTF(error_msg.c_str());<br>&#125;<br></code></pre></td></tr></table></figure><p><code>art/runtime/java_vm_ext.c</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">JavaVMExt::LoadNativeLibrary</span><span class="hljs-params">(JNIEnv* env,</span><br><span class="hljs-params">                                  <span class="hljs-type">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&amp; path,</span><br><span class="hljs-params">                                  jobject class_loader,</span><br><span class="hljs-params">                                  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>* error_msg)</span> &#123;<br>  ...<br><br>  <span class="hljs-comment">// Open the shared library.  Because we&#x27;re using a full path, the system</span><br>  <span class="hljs-comment">// doesn&#x27;t have to search through LD_LIBRARY_PATH.  (It may do so to</span><br>  <span class="hljs-comment">// resolve this library&#x27;s dependencies though.)</span><br><br>  <span class="hljs-comment">// Failures here are expected when java.library.path has several entries</span><br>  <span class="hljs-comment">// and we have to hunt for the lib.</span><br><br>  <span class="hljs-comment">// Below we dlopen but there is no paired dlclose, this would be necessary if we supported</span><br>  <span class="hljs-comment">// class unloading. Libraries will only be unloaded when the reference count (incremented by</span><br>  <span class="hljs-comment">// dlopen) becomes zero from dlclose.</span><br><br>  <span class="hljs-comment">// Retrieve the library path from the classloader, if necessary.</span><br>  ScopedLocalRef&lt;jstring&gt; <span class="hljs-title function_">library_path</span><span class="hljs-params">(env, GetLibrarySearchPath(env, class_loader))</span>;<br><br>  Locks::mutator_lock_-&gt;AssertNotHeld(self);<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span>* path_str = path.empty() ? nullptr : path.c_str();<br>  <span class="hljs-type">bool</span> needs_native_bridge = <span class="hljs-literal">false</span>;<br>  <span class="hljs-type">void</span>* handle = android::OpenNativeLibrary(env,<br>                                            runtime_-&gt;GetTargetSdkVersion(),<br>                                            path_str,<br>                                            class_loader,<br>                                            library_path.get(),<br>                                            &amp;needs_native_bridge,<br>                                            error_msg);<br><br>  VLOG(jni) &lt;&lt; <span class="hljs-string">&quot;[Call to dlopen(\&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="hljs-string">&quot;\&quot;, RTLD_NOW) returned &quot;</span> &lt;&lt; handle &lt;&lt; <span class="hljs-string">&quot;]&quot;</span>;<br><br>  <span class="hljs-keyword">if</span> (handle == nullptr) &#123;<br>    VLOG(jni) &lt;&lt; <span class="hljs-string">&quot;dlopen(\&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="hljs-string">&quot;\&quot;, RTLD_NOW) failed: &quot;</span> &lt;&lt; *error_msg;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (env-&gt;ExceptionCheck() == JNI_TRUE) &#123;<br>    LOG(ERROR) &lt;&lt; <span class="hljs-string">&quot;Unexpected exception:&quot;</span>;<br>    env-&gt;ExceptionDescribe();<br>    env-&gt;ExceptionClear();<br>  &#125;<br>  <span class="hljs-comment">// Create a new entry.</span><br>  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> move the locking (and more of this logic) into Libraries.</span><br>  <span class="hljs-type">bool</span> created_library = <span class="hljs-literal">false</span>;<br>  &#123;<br>    <span class="hljs-comment">// Create SharedLibrary ahead of taking the libraries lock to maintain lock ordering.</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">unique_ptr</span>&lt;SharedLibrary&gt; <span class="hljs-title function_">new_library</span><span class="hljs-params">(</span><br><span class="hljs-params">        new SharedLibrary(env,</span><br><span class="hljs-params">                          self,</span><br><span class="hljs-params">                          path,</span><br><span class="hljs-params">                          handle,</span><br><span class="hljs-params">                          needs_native_bridge,</span><br><span class="hljs-params">                          class_loader,</span><br><span class="hljs-params">                          class_loader_allocator))</span>;<br><br>    MutexLock <span class="hljs-title function_">mu</span><span class="hljs-params">(self, *Locks::jni_libraries_lock_)</span>;<br>    library = libraries_-&gt;Get(path);<br>    <span class="hljs-keyword">if</span> (library == nullptr) &#123;  <span class="hljs-comment">// We won race to get libraries_lock.</span><br>      library = new_library.release();<br>      libraries_-&gt;Put(path, library);<br>      created_library = <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (!created_library) &#123;<br>    LOG(INFO) &lt;&lt; <span class="hljs-string">&quot;WOW: we lost a race to add shared library: &quot;</span><br>        &lt;&lt; <span class="hljs-string">&quot;\&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="hljs-string">&quot;\&quot; ClassLoader=&quot;</span> &lt;&lt; class_loader;<br>    <span class="hljs-keyword">return</span> library-&gt;CheckOnLoadResult();<br>  &#125;<br>  VLOG(jni) &lt;&lt; <span class="hljs-string">&quot;[Added shared library \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="hljs-string">&quot;\&quot; for ClassLoader &quot;</span> &lt;&lt; class_loader &lt;&lt; <span class="hljs-string">&quot;]&quot;</span>;<br><br>  <span class="hljs-type">bool</span> was_successful = <span class="hljs-literal">false</span>;<br>  <span class="hljs-type">void</span>* sym = library-&gt;FindSymbol(<span class="hljs-string">&quot;JNI_OnLoad&quot;</span>, nullptr);<br>  <span class="hljs-keyword">if</span> (sym == nullptr) &#123;<br>    VLOG(jni) &lt;&lt; <span class="hljs-string">&quot;[No JNI_OnLoad found in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="hljs-string">&quot;\&quot;]&quot;</span>;<br>    was_successful = <span class="hljs-literal">true</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// Call JNI_OnLoad.  We have to override the current class</span><br>    <span class="hljs-comment">// loader, which will always be &quot;null&quot; since the stuff at the</span><br>    <span class="hljs-comment">// top of the stack is around Runtime.loadLibrary().  (See</span><br>    <span class="hljs-comment">// the comments in the JNI FindClass function.)</span><br>    ScopedLocalRef&lt;jobject&gt; old_class_loader(env, env-&gt;NewLocalRef(self-&gt;GetClassLoaderOverride()));<br>    self-&gt;SetClassLoaderOverride(class_loader);<br><br>    VLOG(jni) &lt;&lt; <span class="hljs-string">&quot;[Calling JNI_OnLoad in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="hljs-string">&quot;\&quot;]&quot;</span>;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-title function_">int</span> <span class="hljs-params">(*JNI_OnLoadFn)</span><span class="hljs-params">(JavaVM*, <span class="hljs-type">void</span>*)</span>;<br>    JNI_OnLoadFn jni_on_load = reinterpret_cast&lt;JNI_OnLoadFn&gt;(sym);<br>    <span class="hljs-type">int</span> version = (*jni_on_load)(this, nullptr);<br><br>    <span class="hljs-keyword">if</span> (runtime_-&gt;GetTargetSdkVersion() != <span class="hljs-number">0</span> &amp;&amp; runtime_-&gt;GetTargetSdkVersion() &lt;= <span class="hljs-number">21</span>) &#123;<br>      <span class="hljs-comment">// Make sure that sigchain owns SIGSEGV.</span><br>      EnsureFrontOfChain(SIGSEGV);<br>    &#125;<br><br>    self-&gt;SetClassLoaderOverride(old_class_loader.get());<br><br>    <span class="hljs-keyword">if</span> (version == JNI_ERR) &#123;<br>      StringAppendF(error_msg, <span class="hljs-string">&quot;JNI_ERR returned from JNI_OnLoad in \&quot;%s\&quot;&quot;</span>, path.c_str());<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (JavaVMExt::IsBadJniVersion(version)) &#123;<br>      StringAppendF(error_msg, <span class="hljs-string">&quot;Bad JNI version returned from JNI_OnLoad in \&quot;%s\&quot;: %d&quot;</span>,<br>                    path.c_str(), version);<br>      <span class="hljs-comment">// It&#x27;s unwise to call dlclose() here, but we can mark it</span><br>      <span class="hljs-comment">// as bad and ensure that future load attempts will fail.</span><br>      <span class="hljs-comment">// We don&#x27;t know how far JNI_OnLoad got, so there could</span><br>      <span class="hljs-comment">// be some partially-initialized stuff accessible through</span><br>      <span class="hljs-comment">// newly-registered native method calls.  We could try to</span><br>      <span class="hljs-comment">// unregister them, but that doesn&#x27;t seem worthwhile.</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      was_successful = <span class="hljs-literal">true</span>;<br>    &#125;<br>    VLOG(jni) &lt;&lt; <span class="hljs-string">&quot;[Returned &quot;</span> &lt;&lt; (was_successful ? <span class="hljs-string">&quot;successfully&quot;</span> : <span class="hljs-string">&quot;failure&quot;</span>)<br>              &lt;&lt; <span class="hljs-string">&quot; from JNI_OnLoad in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="hljs-string">&quot;\&quot;]&quot;</span>;<br>  &#125;<br><br>  library-&gt;SetResult(was_successful);<br>  <span class="hljs-keyword">return</span> was_successful;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SharedLibrary</span> &#123;</span><br>    <span class="hljs-type">void</span> <span class="hljs-title function_">SetNeedsNativeBridge</span><span class="hljs-params">(<span class="hljs-type">bool</span> needs)</span> &#123;<br>        needs_native_bridge_ = needs;<br>    &#125;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-title function_">NeedsNativeBridge</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> &#123;<br>    <span class="hljs-keyword">return</span> needs_native_bridge_;<br>    &#125;<br><br>    <span class="hljs-comment">// No mutator lock since dlsym may block for a while if another thread is doing dlopen.</span><br>    <span class="hljs-type">void</span>* <span class="hljs-title function_">FindSymbol</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&amp; symbol_name, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* shorty = nullptr)</span><br>      <span class="hljs-title function_">REQUIRES</span><span class="hljs-params">(!Locks::mutator_lock_)</span> &#123;<br>    <span class="hljs-keyword">return</span> NeedsNativeBridge()<br>        ? FindSymbolWithNativeBridge(symbol_name.c_str(), shorty)<br>        : FindSymbolWithoutNativeBridge(symbol_name.c_str());<br>    &#125;<br><br>    <span class="hljs-comment">// No mutator lock since dlsym may block for a while if another thread is doing dlopen.</span><br>    <span class="hljs-type">void</span>* <span class="hljs-title function_">FindSymbolWithoutNativeBridge</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&amp; symbol_name)</span><br>      <span class="hljs-title function_">REQUIRES</span><span class="hljs-params">(!Locks::mutator_lock_)</span> &#123;<br>    CHECK(!NeedsNativeBridge());<br><br>    <span class="hljs-keyword">return</span> dlsym(handle_, symbol_name.c_str());<br>    &#125;<br><br>    <span class="hljs-type">void</span>* <span class="hljs-title function_">FindSymbolWithNativeBridge</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&amp; symbol_name, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* shorty)</span><br>      <span class="hljs-title function_">REQUIRES</span><span class="hljs-params">(!Locks::mutator_lock_)</span> &#123;<br>    CHECK(NeedsNativeBridge());<br><br>    <span class="hljs-type">uint32_t</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> android::NativeBridgeGetTrampoline(handle_, symbol_name.c_str(), shorty, len);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol type="1"><li>检查该动态库是否已加载;</li><li>通过dlopen打开动态共享库;</li><li>创建SharedLibrary共享库,并添加到libraries_列表;</li><li>通过dlsym获取JNI_OnLoad符号所对应的方法, 并调用该方法.</li></ol><h1 id="总结">总结</h1><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">System<span class="hljs-selector-class">.loadLibrary</span>()<br>  └─Runtime<span class="hljs-selector-class">.loadLibrary0</span>()<br>      └─<span class="hljs-built_in">Runtime_nativeLoad</span>()<br>          └─<span class="hljs-built_in">JVM_NativeLoad</span>()<br>              └─<span class="hljs-built_in">LoadNativeLibrary</span>()<br>                ├─<span class="hljs-built_in">fdlopen</span>()<br>              ├─<span class="hljs-built_in">fdlsym</span>()<br>              └─<span class="hljs-built_in">fJNI_OnLoad</span>()<br></code></pre></td></tr></table></figure><hr /><p>相关文章：</p><p>https://gityuan.com/2017/03/26/load_library/</p><p>https://blog.csdn.net/QQxiaoqiang1573/article/details/101781380</p>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓那档事07</title>
    <link href="/2024/03/08/%E5%AE%89%E5%8D%93%E9%82%A3%E6%A1%A3%E4%BA%8B07/"/>
    <url>/2024/03/08/%E5%AE%89%E5%8D%93%E9%82%A3%E6%A1%A3%E4%BA%8B07/</url>
    
    <content type="html"><![CDATA[<h1 id="so加载流程">so加载流程</h1><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2bb663034587188a1fa4ebf55789f66542707.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>这些函数的介绍：</p><table><thead><tr class="header"><th style="text-align: left;">函数名</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>android_dlopen_ext()</code> 、<code>dlopen()</code>、<code>do_dlopen()</code></td><td style="text-align: left;">这三个函数主要用于加载库文件。<code>android_dlopen_ext</code> 是系统的一个函数，用于在运行时动态加载共享库。与标准的 <code>dlopen()</code> 函数相比，<code>android_dlopen_ext</code> 提供了更多的参数选项和扩展功能，例如支持命名空间、符号版本等特性。<br />可能在hook一些so的时候，so加载比较早就通过这个去hook原本要hook的方法</td></tr><tr class="even"><td style="text-align: left;"><code>find_library()</code></td><td style="text-align: left;"><code>find_library()</code> 函数用于查找库，基本的用途是给定一个库的名字，然后查找并返回这个库的路径。</td></tr><tr class="odd"><td style="text-align: left;"><code>call_constructors()</code></td><td style="text-align: left;"><code>call_constructors()</code> 是用于调用动态加载库中的构造函数的函数。</td></tr><tr class="even"><td style="text-align: left;"><code>init</code></td><td style="text-align: left;">库的构造函数，用于初始化库中的静态变量或执行其他需要在库被加载时完成的任务。如果没有定义<code>init</code>函数，系统将不会执行任何动作。需要注意的是，<code>init</code>函数不应该有任何参数，并且也没有返回值。</td></tr><tr class="odd"><td style="text-align: left;"><code>init_array</code></td><td style="text-align: left;"><code>init_array</code>是ELF（Executable and Linkable Format，可执行和可链接格式）二进制格式中的一个特殊段（section），这个段包含了一些函数的指针，这些函数将在<code>main()</code>函数执行前被调用，用于初始化静态局部变量和全局变量。</td></tr><tr class="even"><td style="text-align: left;"><code>jni_onload</code></td><td style="text-align: left;">这是Android JNI(Java Native Interface)中的一个函数。当一个native库被系统加载时，该函数会被自动调用。<code>JNI_OnLoad</code>可以做一些初始化工作，例如注册你的native方法或者初始化一些数据结构。如果你的native库没有定义这个函数，那么JNI会使用默认的行为。<code>JNI_OnLoad</code>的返回值应该是需要的JNI版本，一般返回<code>JNI_VERSION_1_6</code>。</td></tr></tbody></table><p>下断点时机：</p><ul><li>应用级别的：java_com_XXX；</li><li>外壳级别的：JNI_Onload，.init，.init_array(反调试);</li><li>系统级别的：fopen，fget，dvmdexfileopen(脱壳)</li></ul><h2 id="system.loadlibrary">System.loadLibrary()</h2><p>在android我们通常使用System.loadLibrary或者System.load来加载so文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>加载的是libnative-lib.so，注意的是这边只需要传入<span class="hljs-string">&quot;native-lib&quot;</span><br>System.loadLibrary(<span class="hljs-string">&quot;native-lib&quot;</span>);<br><span class="hljs-regexp">//</span>传入的是so文件完整的绝对路径<br>System.load(<span class="hljs-string">&quot;/data/data/应用包名/lib/libnative-lib.so&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li><p>loadLibrary传入的是编译脚本指定生成的so文件的名称,而load需要传入完整的so文件所在的绝对路径；</p></li><li><p>load并不是随便路径都可以，只支持应用本地存储路径/data/data/${package-name}/，或者是系统lib路径system/lib等,这2类路径；</p></li><li><p>load如果传入的是sdcard路径(SD卡路径)，则会导致加载失败，可以采用将sdcard下的so文件复制到应用本地存储路径下进行加载；</p></li><li><p>loadLibrary加载的都是一开始就已经打包进apk或系统的so文件了，而load可以是一开始就打包进来的so文件，也可以是后续从网络下载，外部导入的so文件。</p></li><li><p>最终都是调用nativeLoad加载指定路径的so文件；</p></li></ul><h1 id="ida动态调试">IDA动态调试</h1><p>查看另一篇<a href="https://azureussimu.github.io/2024/03/11/ida%E8%B0%83%E8%AF%95so%E5%AD%A6%E4%B9%A0/">ida调试so学习</a></p><h1 id="常见寄存器">常见寄存器</h1><table><thead><tr class="header"><th style="text-align: left;">寄存器名称</th><th style="text-align: left;">功能介绍</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>R0-R12</code></td><td style="text-align: left;">通用寄存器，用于存储临时数据。在函数调用时，<code>R0-R3</code>用于存储前四个参数，其余的参数通过堆栈传递。返回值也通过<code>R0</code>和<code>R1</code>传递。</td></tr><tr class="even"><td style="text-align: left;"><code>R13 (SP)</code></td><td style="text-align: left;">堆栈指针寄存器，指向当前堆栈的顶部。</td></tr><tr class="odd"><td style="text-align: left;"><code>R14 (LR)</code></td><td style="text-align: left;">链接寄存器，存储子程序的返回地址。</td></tr><tr class="even"><td style="text-align: left;"><code>R15 (PC)</code></td><td style="text-align: left;">程序计数器，指向下一条要执行的指令。</td></tr><tr class="odd"><td style="text-align: left;"><code>CPSR</code></td><td style="text-align: left;">当前程序状态寄存器，保存程序的状态信息，如算术运算的结果标志、中断禁止标志等。</td></tr><tr class="even"><td style="text-align: left;"><code>FPSCR</code></td><td style="text-align: left;">浮点状态和控制寄存器，如果你在调试的代码中涉及到浮点运算，那么这个寄存器会比较重要。</td></tr></tbody></table><h1 id="防护手段">防护手段</h1><h2 id="反调试">反调试</h2><p>1.调试端口检测 检测常见的23946端口，所以在运行时可以加 -p 指定一个另外的端口来过掉这个检测 2.调试进程名检测 固定的进程名 android_server gdb_server等等，所以要改个名字，例如as64 3.ptrace检测 每个进程同时刻只能被1个调试进程ptrace ，主动ptrace本进程可以使得其他调试器无法调试 实现代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">ptrace_protect</span><span class="hljs-params">()</span><span class="hljs-comment">//ptrace附加自身线程 会导致此进程TracerPid 变为父进程的TracerPid 即zygote</span><br>&#123;<br>    <span class="hljs-keyword">return</span> ptrace(PTRACE_TRACEME,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);;<span class="hljs-comment">//返回-1即为已经被调试</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="so层防护">SO层防护</h2><p>常见防护手段:</p><table><thead><tr class="header"><th style="text-align: left;">主要功能</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">SO加壳</td><td style="text-align: left;">对C/C++源码编译出来的SO文件进行加壳，使SO文件无法正确反编译和反汇编。</td></tr><tr class="even"><td style="text-align: left;">SO源码虚拟化保护</td><td style="text-align: left;">将原始汇编指令翻译为自定义的虚拟机指令，跳转到自定义的虚拟机中执行，每次保护生成的虚拟机指令随机，且对虚拟机解释器再度混淆</td></tr><tr class="odd"><td style="text-align: left;">SO防调用</td><td style="text-align: left;">对SO文件进行授权绑定，防止SO文件被非授权应用调用运行。</td></tr><tr class="even"><td style="text-align: left;">SO Linker</td><td style="text-align: left;">对整个SO文件进行加密压缩，包括代码段、符号表和字符串等，运行时再解密解压缩到内存，从而有效的防止SO数据的泄露。</td></tr><tr class="odd"><td style="text-align: left;">SO源码混淆</td><td style="text-align: left;">常量字符串加密、分裂基本块、等价指令替换、虚假控制流、控制流平坦化。</td></tr><tr class="even"><td style="text-align: left;">SO环境监测</td><td style="text-align: left;">防frida、防动态调试、防模拟器、防多开等</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓那档事06</title>
    <link href="/2024/01/29/%E5%AE%89%E5%8D%93%E9%82%A3%E6%A1%A3%E4%BA%8B06/"/>
    <url>/2024/01/29/%E5%AE%89%E5%8D%93%E9%82%A3%E6%A1%A3%E4%BA%8B06/</url>
    
    <content type="html"><![CDATA[<p>跟着正己学了不少了，现在学到了so的hook了</p><h1 id="processmodulememory基础">Process、Module、Memory基础</h1><h2 id="process">1.Process</h2><p><code>Process</code> 对象代表当前被Hook的进程，能获取进程的信息，枚举模块，枚举范围等</p><table><thead><tr class="header"><th style="text-align: left;">API</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>Process.id</code></td><td style="text-align: left;">返回附加目标进程的 <code>PID</code></td></tr><tr class="even"><td style="text-align: left;"><code>Process.isDebuggerAttached()</code></td><td style="text-align: left;">检测当前是否对目标程序已经附加</td></tr><tr class="odd"><td style="text-align: left;"><code>Process.enumerateModules()</code></td><td style="text-align: left;">枚举当前加载的模块，返回模块对象的数组</td></tr><tr class="even"><td style="text-align: left;"><code>Process.enumerateThreads()</code></td><td style="text-align: left;">枚举当前所有的线程，返回包含 <code>id</code>, <code>state</code>, <code>context</code> 等属性的对象数组</td></tr></tbody></table><h2 id="module">2.Module</h2><p><code>Module</code> 对象代表一个加载到进程的模块(例如，在 Windows 上的 DLL，或在 Linux/Android 上的 .so 文件),能查询模块的信息，如模块的基址、名称、导入/导出的函数等</p><table><thead><tr class="header"><th style="text-align: left;">API</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>Module.load()</code></td><td style="text-align: left;">加载指定so文件，返回一个Module对象</td></tr><tr class="even"><td style="text-align: left;"><code>enumerateImports()</code></td><td style="text-align: left;">枚举所有Import库函数，返回Module数组对象</td></tr><tr class="odd"><td style="text-align: left;"><code>enumerateExports()</code></td><td style="text-align: left;">枚举所有Export库函数，返回Module数组对象</td></tr><tr class="even"><td style="text-align: left;"><code>enumerateSymbols()</code></td><td style="text-align: left;">枚举所有Symbol库函数，返回Module数组对象</td></tr><tr class="odd"><td style="text-align: left;"><code>Module.findExportByName(exportName)、Module.getExportByName(exportName)</code></td><td style="text-align: left;">寻找指定so中export库中的函数地址</td></tr><tr class="even"><td style="text-align: left;"><code>Module.findBaseAddress(name)、Module.getBaseAddress(name)</code></td><td style="text-align: left;">返回so的基地址</td></tr></tbody></table><h2 id="memory">3.Memory</h2><p><code>Memory</code>是一个工具对象，提供直接读取和修改进程内存的功能，能够读取特定地址的值、写入数据、分配内存等</p><table><thead><tr class="header"><th style="text-align: left;">方法</th><th style="text-align: left;">功能</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>Memory.copy()</code></td><td style="text-align: left;">复制内存</td></tr><tr class="even"><td style="text-align: left;"><code>Memory.scan()</code></td><td style="text-align: left;">搜索内存中特定模式的数据</td></tr><tr class="odd"><td style="text-align: left;"><code>Memory.scanSync()</code></td><td style="text-align: left;">同上，但返回多个匹配的数据</td></tr><tr class="even"><td style="text-align: left;"><code>Memory.alloc()</code></td><td style="text-align: left;">在目标进程的堆上申请指定大小的内存，返回一个<code>NativePointer</code></td></tr><tr class="odd"><td style="text-align: left;"><code>Memory.writeByteArray()</code></td><td style="text-align: left;">将字节数组写入一个指定内存</td></tr><tr class="even"><td style="text-align: left;"><code>Memory.readByteArray</code></td><td style="text-align: left;">读取内存</td></tr></tbody></table><h1 id="so层hook">so层hook</h1><h2 id="hook打印">1. hook打印</h2><h3 id="整数型布尔值char类型">整数型、布尔值、char类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest2</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//根据导出函数名打印地址</span><br>    <span class="hljs-keyword">var</span> helloAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>,<span class="hljs-string">&quot;Java_com_zj_wuaipojie_util_SecurityUtil_checkVip&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(helloAddr); <br>    <span class="hljs-keyword">if</span>(helloAddr != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//Interceptor.attach是Frida里的一个拦截器</span><br>        <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(helloAddr,&#123;<br>                <span class="hljs-comment">//onEnter里可以打印和修改参数</span><br>            <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)&#123;  <span class="hljs-comment">//args传入参数</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args[<span class="hljs-number">0</span>]);  <span class="hljs-comment">//打印第一个参数的值</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-property">x1</span>);  <span class="hljs-comment">// 打印寄存器内容</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args[<span class="hljs-number">1</span>].<span class="hljs-title function_">toInt32</span>()); <span class="hljs-comment">//toInt32()转十进制</span><br>                                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args[<span class="hljs-number">2</span>].<span class="hljs-title function_">readCString</span>()); <span class="hljs-comment">//读取字符串 char类型</span><br>                                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">hexdump</span>(args[<span class="hljs-number">2</span>])); <span class="hljs-comment">//内存dump</span><br><br>            &#125;,<br>            <span class="hljs-comment">//onLeave里可以打印和修改返回值</span><br>            <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">retval</span>)&#123;  <span class="hljs-comment">//retval返回值</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(retval);<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;retval&quot;</span>,retval.<span class="hljs-title function_">toInt32</span>());<br>            &#125;<br>        &#125;)<br>    &#125;<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串">字符串</h3><p>比较特殊，要先用<code>Java.vm.getEnv()</code>获得<code>JNIEnv</code>再使用<code>JNIEnv.getStringUtfChars(args[n],nulll)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//根据导出函数名打印地址</span><br>        <span class="hljs-keyword">var</span> helloAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>,<span class="hljs-string">&quot;Java_com_zj_wuaipojie_util_SecurityUtil_vipLevel&quot;</span>);<br>        <span class="hljs-keyword">if</span>(helloAddr != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(helloAddr,&#123;<br>                <span class="hljs-comment">//onEnter里可以打印和修改参数</span><br>                <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)&#123;  <span class="hljs-comment">//args传入参数</span><br>                    <span class="hljs-comment">// 方法一</span><br>                    <span class="hljs-keyword">var</span> jString = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">cast</span>(args[<span class="hljs-number">2</span>], <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>));<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;参数:&quot;</span>, jString.<span class="hljs-title function_">toString</span>());<br>                    <span class="hljs-comment">// 方法二</span><br>                    <span class="hljs-keyword">var</span> <span class="hljs-title class_">JNIEnv</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-property">vm</span>.<span class="hljs-title function_">getEnv</span>();<br>                    <span class="hljs-keyword">var</span> originalStrPtr = <span class="hljs-title class_">JNIEnv</span>.<span class="hljs-title function_">getStringUtfChars</span>(args[<span class="hljs-number">2</span>], <span class="hljs-literal">null</span>).<span class="hljs-title function_">readCString</span>();        <br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;参数:&quot;</span>, originalStrPtr);                                <br>                &#125;,<br>                <span class="hljs-comment">//onLeave里可以打印和修改返回值</span><br>                <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">retval</span>)&#123;  <span class="hljs-comment">//retval返回值</span><br>                    <span class="hljs-keyword">var</span> returnedJString = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">cast</span>(retval, <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>));<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;返回值:&quot;</span>, returnedJString.<span class="hljs-title function_">toString</span>());<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="基础hook">2. 基础hook</h2><p>就是先转为指针再赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest3</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//根据导出函数名打印地址</span><br>    <span class="hljs-keyword">var</span> helloAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>,<span class="hljs-string">&quot;Java_com_zj_wuaipojie_util_SecurityUtil_checkVip&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(helloAddr);<br>    <span class="hljs-keyword">if</span>(helloAddr != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(helloAddr,&#123;<br>            <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)&#123;  <span class="hljs-comment">//args参数</span><br>                args[<span class="hljs-number">0</span>] = <span class="hljs-title function_">ptr</span>(<span class="hljs-number">1000</span>); <span class="hljs-comment">//第一个参数修改为整数 1000，先转为指针再赋值</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args[<span class="hljs-number">0</span>]);<br><br>            &#125;,<br>            <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">retval</span>)&#123;  <span class="hljs-comment">//retval返回值</span><br>                retval.<span class="hljs-title function_">replace</span>(<span class="hljs-number">20000</span>);  <span class="hljs-comment">//返回值修改</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;retval&quot;</span>,retval.<span class="hljs-title function_">toInt32</span>());<br>            &#125;<br>        &#125;)<br>    &#125;<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>字符串：</p><p>还是使用JNIEnv来对字符串进行操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest2</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//根据导出函数名打印地址</span><br>    <span class="hljs-keyword">var</span> helloAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>,<span class="hljs-string">&quot;Java_com_zj_wuaipojie_util_SecurityUtil_vipLevel&quot;</span>);<br>    <span class="hljs-keyword">if</span>(helloAddr != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(helloAddr,&#123;<br>            <span class="hljs-comment">//onEnter里可以打印和修改参数</span><br>            <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)&#123;  <span class="hljs-comment">//args传入参数</span><br>                <span class="hljs-keyword">var</span> <span class="hljs-title class_">JNIEnv</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-property">vm</span>.<span class="hljs-title function_">getEnv</span>();<br>                <span class="hljs-keyword">var</span> originalStrPtr = <span class="hljs-title class_">JNIEnv</span>.<span class="hljs-title function_">getStringUtfChars</span>(args[<span class="hljs-number">2</span>], <span class="hljs-literal">null</span>).<span class="hljs-title function_">readCString</span>();        <br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;参数:&quot;</span>, originalStrPtr);<br>                <span class="hljs-keyword">var</span> modifiedContent = <span class="hljs-string">&quot;至尊&quot;</span>;<br>                <span class="hljs-keyword">var</span> newJString = <span class="hljs-title class_">JNIEnv</span>.<span class="hljs-title function_">newStringUtf</span>(modifiedContent);<br>                args[<span class="hljs-number">2</span>] = newJString;                                <br>            &#125;,<br>            <span class="hljs-comment">//onLeave里可以打印和修改返回值</span><br>            <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">retval</span>)&#123;  <span class="hljs-comment">//retval返回值</span><br>                <span class="hljs-keyword">var</span> returnedJString = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">cast</span>(retval, <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>));<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;返回值:&quot;</span>, returnedJString.<span class="hljs-title function_">toString</span>());<br>                <span class="hljs-keyword">var</span> <span class="hljs-title class_">JNIEnv</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-property">vm</span>.<span class="hljs-title function_">getEnv</span>();<br>                <span class="hljs-keyword">var</span> modifiedContent = <span class="hljs-string">&quot;无敌&quot;</span>;<br>                <span class="hljs-keyword">var</span> newJString = <span class="hljs-title class_">JNIEnv</span>.<span class="hljs-title function_">newStringUtf</span>(modifiedContent);<br>                retval.<span class="hljs-title function_">replace</span>(newJString);<br>            &#125;<br>        &#125;)<br>    &#125;<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获得so基址">3. 获得so基址</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> moduleAddr1 = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>).<span class="hljs-property">base</span>;  <br><span class="hljs-keyword">var</span> moduleAddr2 = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">getModuleByName</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>).<span class="hljs-property">base</span>;  <br><span class="hljs-keyword">var</span> moduleAddr3 = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="hook未导出的函数">4. Hook未导出的函数</h2><h3 id="地址计算">地址计算</h3><div class="note note-primary">            <ol type="1"><li>安卓里一般32 位的 so 中都是<code>thumb</code>指令，64 位的 so 中都是<code>arm</code>指令</li><li>通过IDA里的opcode bytes来判断，arm 指令为 4 个字节(options -&gt; general -&gt; Number of opcode bytes (non-graph) 输入4)</li><li>thumb 指令，函数地址计算方式： so 基址 + 函数在 so 中的偏移 + 1 arm 指令，函数地址计算方式： so 基址 + 函数在 so 中的偏移</li></ol>          </div><h3 id="hook">hook</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookNative</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">var</span> soAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;&quot;</span>);    <span class="hljs-comment">// 得到基址</span><br>        <span class="hljs-keyword">var</span> funcAddr = soAddr.<span class="hljs-title function_">add</span>(<span class="hljs-number">0</span>);               <span class="hljs-comment">// 加上偏移</span><br>        <span class="hljs-keyword">if</span>(funcAddr != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(funcaddr,&#123;<br>                <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)&#123;  <span class="hljs-comment">//args参数</span><br>                    <span class="hljs-comment">//do something</span><br>                &#125;,<br>                <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">retval</span>)&#123;  <span class="hljs-comment">//retval返回值</span><br>                    <span class="hljs-comment">//do something</span><br>                &#125;<br>            &#125;)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="hook_dlopen">Hook_dlopen</h1><p>具体看7了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook_dlopen</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> dlopen = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;dlopen&quot;</span>);<br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(dlopen, &#123;<br>        <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>            <span class="hljs-keyword">var</span> so_name = args[<span class="hljs-number">0</span>].<span class="hljs-title function_">readCString</span>();<br>            <span class="hljs-keyword">if</span> (so_name.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>) &gt;= <span class="hljs-number">0</span>) <br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">call_hook</span> = <span class="hljs-literal">true</span>;<br>        &#125;, <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">call_hook</span>) <span class="hljs-title function_">hookTest2</span>();<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">// 高版本Android系统使用android_dlopen_ext</span><br>    <span class="hljs-keyword">var</span> android_dlopen_ext = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;android_dlopen_ext&quot;</span>);<br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(android_dlopen_ext, &#123;<br>        <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>            <span class="hljs-keyword">var</span> so_name = args[<span class="hljs-number">0</span>].<span class="hljs-title function_">readCString</span>();<br>            <span class="hljs-keyword">if</span> (so_name.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>) &gt;= <span class="hljs-number">0</span>) <br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">call_hook</span> = <span class="hljs-literal">true</span>;<br>        &#125;, <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">call_hook</span>) <span class="hljs-title function_">hookTest2</span>();<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>r0tracer分析学习</title>
    <link href="/2024/01/22/r0tracer%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/01/22/r0tracer%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>这个就是个frida脚本，可以从中学习到一些hook思路</p><h1 id="javahookwhite-black-target-null">1. javahook(white, black, target = null)</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">javahook</span>(<span class="hljs-params">white, black, target = <span class="hljs-literal">null</span></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title class_">Red</span>(<span class="hljs-string">&quot;start&quot;</span>)<br>    <span class="hljs-keyword">if</span> (!(target === <span class="hljs-literal">null</span>)) &#123;   <span class="hljs-comment">// target非空。</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title class_">LightGreen</span>(<span class="hljs-string">&quot;Begin enumerateClassLoaders ...&quot;</span>)<br>        <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">enumerateClassLoaders</span>(&#123;    <span class="hljs-comment">// 枚举 Java VM 中存在的类加载器</span><br>            <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">loader</span>) &#123;    <span class="hljs-comment">// 把找到的目标设置到loader里面</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (loader.<span class="hljs-title function_">findClass</span>(target)) &#123;<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title class_">Red</span>(<span class="hljs-string">&quot;Successfully found loader&quot;</span>)<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title class_">Blue</span>(loader);<br>                        <span class="hljs-title class_">Java</span>.<span class="hljs-property">classFactory</span>.<span class="hljs-property">loader</span> = loader;  <span class="hljs-comment">// Frida中的一个类加载器，它可以在运行时动态地加载Java类。</span><br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title class_">Red</span>(<span class="hljs-string">&quot;Switch Classloader Successfully ! &quot;</span>)<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (error) &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title class_">Red</span>(<span class="hljs-string">&quot; continuing :&quot;</span> + error)<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title class_">Red</span>(<span class="hljs-string">&quot;EnumerateClassloader END&quot;</span>)<br>            &#125;<br>        &#125;)<br>    &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title class_">Red</span>(<span class="hljs-string">&quot;Begin Search Class...&quot;</span>)<br>    <span class="hljs-keyword">var</span> targetClasses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();    <br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">enumerateLoadedClasses</span>(&#123;   <span class="hljs-comment">// 枚举现在加载的类，和上面不同</span><br>        <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">className</span>) &#123;<br>            <span class="hljs-keyword">if</span> (className.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">toLowerCase</span>().<span class="hljs-title function_">indexOf</span>(white.<span class="hljs-title function_">toLowerCase</span>()) &gt;= <span class="hljs-number">0</span> &amp;&amp;<br>                (black == <span class="hljs-literal">null</span> || black == <span class="hljs-string">&#x27;&#x27;</span> || className.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">toLowerCase</span>().<span class="hljs-title function_">indexOf</span>(black.<span class="hljs-title function_">toLowerCase</span>()) &lt; <span class="hljs-number">0</span>)) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title class_">Black</span>(<span class="hljs-string">&quot;Found Class =&gt; &quot;</span> + className)<br>                targetClasses.<span class="hljs-title function_">push</span>(className);<br>                <span class="hljs-title function_">traceClass</span>(className);  <span class="hljs-comment">// trace!</span><br>            &#125;   <span class="hljs-comment">// 每找到一个就加入targetClasses中，然后执行traceClass</span><br>        &#125;, <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title class_">Black</span>(<span class="hljs-string">&quot;Search Class Completed!&quot;</span>)<br>        &#125;<br>    &#125;)<br><br>    <span class="hljs-keyword">var</span> output = <span class="hljs-string">&quot;On Total Tracing :&quot;</span> + <span class="hljs-title class_">String</span>(targetClasses.<span class="hljs-property">length</span>) + <span class="hljs-string">&quot; classes :\r\n&quot;</span>;<br>    targetClasses.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">target</span>) &#123;<br>        output = output.<span class="hljs-title function_">concat</span>(target);<br>        output = output.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>    &#125;)  <span class="hljs-comment">// 输出相关信息</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title class_">Green</span>(output + <span class="hljs-string">&quot;Start Tracing ...&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>进行最初始的追踪类：</p><p>先从JVM中开始寻找目标类</p><p>然后再扫描全部已经加载的类(这样会节约不少时间，但是坏处是有的时候会hook不上某些方法)，通过处理获得类名然后释放(节约内存空间)，再将类名加入一个Array中</p><p>每加入一个类每个类进行进一步的操作：<code>traceClass(className);</code></p><h1 id="traceclasstargetclass">2. traceClass(targetClass)</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">traceClass</span>(<span class="hljs-params">targetClass</span>) &#123;  <span class="hljs-comment">// 通用模块，支持安卓和ios</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Java</span>.<span class="hljs-property">available</span>) &#123;      <br>        <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  <span class="hljs-comment">// hook中再hook?</span><br>            <span class="hljs-title class_">JavaTraceClass</span>(targetClass)<br>        &#125;)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title class_">ObjC</span>.<span class="hljs-property">available</span>) &#123;<br>        <span class="hljs-title class_">IosTraceClass</span>(targetClass)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;please connect to either iOS or Android device ...&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="javatraceclasstargetclass">3. JavaTraceClass(targetClass)</h1><p>我超这作者居然写注释，爱了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">JavaTraceClass</span>(<span class="hljs-params">targetClass</span>) &#123;<br>    <span class="hljs-comment">//Java.use是新建一个对象哈，大家还记得么？</span><br>    <span class="hljs-keyword">var</span> hook = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(targetClass);<br>    <span class="hljs-comment">//利用反射的方式，拿到当前类的所有方法</span><br>    <span class="hljs-keyword">var</span> methods = hook.<span class="hljs-property">class</span>.<span class="hljs-title function_">getDeclaredMethods</span>();<br>    <span class="hljs-comment">//建完对象之后记得将对象释放掉哈</span><br>    hook.<span class="hljs-property">$dispose</span>;<br>    <span class="hljs-comment">//将方法名保存到数组中</span><br>    <span class="hljs-keyword">var</span> parsedMethods = [];<br>    <span class="hljs-keyword">var</span> output = <span class="hljs-string">&quot;&quot;</span>;<br>    output = output.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;\tSpec: =&gt; \r\n&quot;</span>)<br>    methods.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">method</span>) &#123;<br>        output = output.<span class="hljs-title function_">concat</span>(method.<span class="hljs-title function_">toString</span>())<br>        output = output.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>        parsedMethods.<span class="hljs-title function_">push</span>(method.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">replace</span>(targetClass + <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;TOKEN&quot;</span>).<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\sTOKEN(.*)\(/</span>)[<span class="hljs-number">1</span>]);<br>    &#125;);<br>    <span class="hljs-comment">//去掉一些重复的值</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Targets</span> = <span class="hljs-title function_">uniqBy</span>(parsedMethods, <span class="hljs-title class_">JSON</span>.<span class="hljs-property">stringify</span>);<br>    <span class="hljs-comment">// targets = [];</span><br>    <span class="hljs-keyword">var</span> constructors = hook.<span class="hljs-property">class</span>.<span class="hljs-title function_">getDeclaredConstructors</span>();    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-keyword">if</span> (constructors.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        constructors.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">constructor</span>) &#123;<br>            output = output.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;Tracing &quot;</span>, constructor.<span class="hljs-title function_">toString</span>())<br>            output = output.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>        &#125;)<br>        <span class="hljs-title class_">Targets</span> = <span class="hljs-title class_">Targets</span>.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;$init&quot;</span>)<br>    &#125;<br>    <span class="hljs-comment">//对数组中所有的方法进行hook，</span><br>    <span class="hljs-title class_">Targets</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">targetMethod</span>) &#123;<br>        <span class="hljs-title function_">traceMethod</span>(targetClass + <span class="hljs-string">&quot;.&quot;</span> + targetMethod);<br>    &#125;);<br>    <span class="hljs-comment">//画个横线</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> p = <span class="hljs-number">0</span>; p &lt; <span class="hljs-number">100</span>; p++) &#123;<br>        output = output.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;+&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title class_">Green</span>(output);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这个函数依次对目标类进行所有方法名字(包括构造方法)记录,然后去重,再依次hook(<code>traceMethod</code>)</p><h1 id="tracemethodtargetclassmethod">4. traceMethod(targetClassMethod)</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// trace单个类的所有静态和实例方法包括构造方法 trace a specific Java Method</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">traceMethod</span>(<span class="hljs-params">targetClassMethod</span>) &#123;<br>    <span class="hljs-keyword">var</span> delim = targetClassMethod.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;.&quot;</span>); <br>    <span class="hljs-keyword">if</span> (delim === -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">var</span> targetClass = targetClassMethod.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, delim) <span class="hljs-comment">// 得到类名</span><br>    <span class="hljs-keyword">var</span> targetMethod = targetClassMethod.<span class="hljs-title function_">slice</span>(delim + <span class="hljs-number">1</span>, targetClassMethod.<span class="hljs-property">length</span>) <span class="hljs-comment">// 得到方法名</span><br>    <span class="hljs-keyword">var</span> hook = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(targetClass);   <br>    <span class="hljs-keyword">if</span> (!hook[targetMethod]) &#123;  <span class="hljs-comment">// 尝试hook,尝试得知方法</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> overloadCount = hook[targetMethod].<span class="hljs-property">overloads</span>.<span class="hljs-property">length</span>; <span class="hljs-comment">//获得目标方法的数目？</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title class_">Red</span>(<span class="hljs-string">&quot;Tracing Method : &quot;</span> + targetClassMethod + <span class="hljs-string">&quot; [&quot;</span> + overloadCount + <span class="hljs-string">&quot; overload(s)]&quot;</span>);  <span class="hljs-comment">// 输出信息</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; overloadCount; i++) &#123;<br>        hook[targetMethod].<span class="hljs-property">overloads</span>[i].<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-comment">//初始化输出</span><br>            <span class="hljs-keyword">var</span> output = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-comment">//画个横线</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> p = <span class="hljs-number">0</span>; p &lt; <span class="hljs-number">100</span>; p++) &#123;<br>                output = output.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;==&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//域值</span><br>            <span class="hljs-keyword">if</span> (!isLite) &#123; output = <span class="hljs-title function_">inspectObject</span>(<span class="hljs-variable language_">this</span>, output); &#125;<br>            <span class="hljs-comment">//进入函数</span><br>            output = output.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;\n*** entered &quot;</span> + targetClassMethod);<br>            output = output.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>            <span class="hljs-comment">// if (arguments.length) console.Black();</span><br>            <span class="hljs-comment">//参数</span><br>            <span class="hljs-keyword">var</span> retval = <span class="hljs-variable language_">this</span>[targetMethod].<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>            <span class="hljs-keyword">if</span> (!isLite) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; j++) &#123;<br>                    output = output.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;arg[&quot;</span> + j + <span class="hljs-string">&quot;]: &quot;</span> + <span class="hljs-variable language_">arguments</span>[j] + <span class="hljs-string">&quot; =&gt; &quot;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-variable language_">arguments</span>[j]));<br>                    output = output.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>                &#125;<br>                <span class="hljs-comment">//调用栈</span><br>                <span class="hljs-comment">// 通过hook安卓自带的Log来获取堆栈信息</span><br>                <span class="hljs-comment">// 创建的一个新的Throwable对象。Throwable是Java中用于表示异常的基类，包含相关异常信息，包括堆栈跟踪。</span><br>                output = output.<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;android.util.Log&quot;</span>).<span class="hljs-title function_">getStackTraceString</span>(<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;java.lang.Throwable&quot;</span>).$new()));<br>                <span class="hljs-comment">//返回值</span><br>                output = output.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;\nretval: &quot;</span> + retval + <span class="hljs-string">&quot; =&gt; &quot;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(retval));<br>            &#125;<br>            <span class="hljs-comment">// inspectObject(this)</span><br>            <span class="hljs-comment">//离开函数</span><br>            output = output.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;\n*** exiting &quot;</span> + targetClassMethod);<br>            <span class="hljs-comment">//最终输出</span><br>            <span class="hljs-comment">// console.Black(output);</span><br>            <span class="hljs-keyword">var</span> r = <span class="hljs-built_in">parseInt</span>((<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">7</span>).<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">0</span>));<br>            <span class="hljs-keyword">var</span> i = r;<br>            <span class="hljs-keyword">var</span> printOutput = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">switch</span> (i) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    printOutput = <span class="hljs-variable language_">console</span>.<span class="hljs-property">Red</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    printOutput = <span class="hljs-variable language_">console</span>.<span class="hljs-property">Yellow</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    printOutput = <span class="hljs-variable language_">console</span>.<span class="hljs-property">Green</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                    printOutput = <span class="hljs-variable language_">console</span>.<span class="hljs-property">Cyan</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                    printOutput = <span class="hljs-variable language_">console</span>.<span class="hljs-property">Blue</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                    printOutput = <span class="hljs-variable language_">console</span>.<span class="hljs-property">Gray</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-attr">default</span>:<br>                    printOutput = <span class="hljs-variable language_">console</span>.<span class="hljs-property">Purple</span>;<br>            &#125;<br>            <span class="hljs-title function_">printOutput</span>(output);<br>            <span class="hljs-keyword">return</span> retval;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>就是hook java层的方法，可惜也只是在java层了。</p><p>有意思的是获得调用栈的方式：</p><ol type="1"><li><p>通过hook安卓自带的Log来获取堆栈信息</p></li><li><p>创建的一个新的Throwable对象。Throwable是Java中用于表示异常的基类，包含相关异常信息，包括堆栈跟踪。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓那档事05</title>
    <link href="/2024/01/20/%E5%AE%89%E5%8D%93%E9%82%A3%E6%A1%A3%E4%BA%8B05/"/>
    <url>/2024/01/20/%E5%AE%89%E5%8D%93%E9%82%A3%E6%A1%A3%E4%BA%8B05/</url>
    
    <content type="html"><![CDATA[<h1 id="objection">Objection</h1><p>好像是基于frida的一个整合</p><p>https://github.com/sensepost/objection</p><h2 id="安装配置">安装配置</h2><p>没啥主动配置的印象，像是装frida的同时会安装的</p><h2 id="简单使用">简单使用</h2><p>首先要启动frida-server，这个还是通过frida-server来进行内存通信访问的。</p><blockquote><p>Frida真顶啊</p></blockquote><p><strong>注入命令</strong></p><p><code>objection -g 包名 explore</code></p><p>使用这个命令之后会以spawn模式启动（就是由这个东西启动）</p><ul><li>help：不知道当前命令的效果是什么，在当前命令前加help比如:help env，回车之后会出现当前命令的解释信息</li><li>按空格：不知道输入什么就按空格，会有提示出来 - jobs：可以进行多项hook</li><li>日志：objection的日志文件生成在 C:.objection</li></ul><p><strong>启动前就hook</strong></p><p><code>objection -g 进程名 explore --startup-command "android hooking watch class 路径.类名"</code></p><h2 id="一些api">一些api</h2><ol type="1"><li><p><code>memory list modules</code></p><p>查看内存中加载的库</p></li><li><p><code>memory list exports so名称</code></p><p>查看库的导出函数</p></li><li><p><code>android hooking list activities</code></p><p>查看内存中加载的activity</p><p><code>android hooking list services</code></p><p>查看内存中加载的services</p></li><li><p><code>android intent launch_activity 类名</code></p><p>启动<code>activity</code>或<code>service</code>(可以用于一些没有验证的activity,在一些简单的ctf中有时候可以出奇效)</p></li><li><p>关闭ssl校验 <code>android sslpinning disable</code></p></li><li><p>关闭root检测<code>android root disable</code></p></li></ol><h2 id="内存漫游">内存漫游</h2><ol type="1"><li><p>内存搜刮类实例</p><p><code>android heap search instances 类名</code></p></li><li><p>调用实例的方法</p><ol type="1"><li><p>直接调用方法</p><p><code>android heap execute &lt;handle&gt; &lt;function Name&gt;</code></p><p>handle 就是上面那条指令搜刮出来的Hashcode</p><p>function name 就是方法名</p></li><li><p>对于带参数的方法</p><p><code>android heap evaluate &lt;handle&gt;</code></p><p>然后进入到写js界面。。</p><p><code>clazz</code>这个变量名就是指的调用的类</p><p>剩下的看提示</p></li></ol></li><li><p><code>android hooking list classes</code></p><p>列出内存中所有的类(结果比静态分析的更准确)</p></li><li><p><code>android hooking search classes 关键类名</code></p><p>在内存中所有已加载的类中搜索包含特定关键词的类</p></li><li><p><code>android hooking search methods 关键方法名</code></p><p>在内存中所有已加载的类的方法中搜索包含特定关键词的方法(一般不建议使用，特别耗时，还可能崩溃)</p></li><li><p><code>android hooking list class_methods 类名</code></p><p>内存漫游类中的所有方法</p></li></ol><h3 id="objectionhook">objectionHook</h3><h3 id="hook类的所有方法">hook类的所有方法</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">android hooking watch <span class="hljs-keyword">class</span> 类名 [--<span class="hljs-keyword">dump</span>-args --<span class="hljs-keyword">dump</span>-<span class="hljs-keyword">return</span> --<span class="hljs-keyword">dump</span>-backtrace]<br></code></pre></td></tr></table></figure><p>args : 参数</p><p>return : 返回值</p><p>backtrace : 堆栈</p><h3 id="hook方法">hook方法</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">android hooking watch class_method 类名.方法名 [--<span class="hljs-keyword">dump</span>-args --<span class="hljs-keyword">dump</span>-<span class="hljs-keyword">return</span> --<span class="hljs-keyword">dump</span>-backtrace]<br></code></pre></td></tr></table></figure><h3 id="hook-类的构造方法">hook 类的构造方法</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">android</span> hooking watch class_method 类名.<span class="hljs-variable">$init</span><br></code></pre></td></tr></table></figure><h3 id="hook-方法的所有重载">hook 方法的所有重载</h3><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">android hooking watch <span class="hljs-keyword">class</span><span class="hljs-number">_m</span>ethod 类名.方法名<br></code></pre></td></tr></table></figure><h1 id="控制流混淆">控制流混淆</h1><h2 id="混淆">混淆</h2><p>一个控制流混淆工具：BlackObfuscator</p><p>项目地址: <a href="https://github.com/CodingGay/BlackObfuscator">BlackObfuscator</a></p><p>有空分析一下</p><h2 id="应对">应对</h2><p>分析控制流混淆一般来说是追踪控制流，反正混淆了，咱也读不懂（</p><p>52这篇文章是介绍了个工具：r0tracer</p><p><a href="https://github.com/r0ysue/r0tracer">项目地址</a></p><p>其实就是一个frida脚本，大体上分析了一遍，在<a href="https://azureussimu.github.io/2024/01/22/r0tracer%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/">另一篇文章</a>里面。</p><p>就是一个记录和hook所有的方法，调用的时候就先把一些东西打印出来，倒是学会了怎么打印出堆栈，方法还是蛮出人意料的，楽。</p><p>对于这个的对抗倒是有些想法，首先这个完完全全是直接hook的，加个反hook的都得似，感觉能在这个基础上改进，去针对一些anti-frida。</p><p>第二个不知道能不能实现？做个异常处理，就能把堆栈打印顶掉？不过它这个是基于安卓的一些异常的基类，从而获取的堆栈。不如一开始就打断frida的使用。</p>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务器玩耍笔记</title>
    <link href="/2023/12/31/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%A9%E8%80%8D%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/12/31/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%A9%E8%80%8D%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>部署了两个服务端，一个软工的，一个web的（捏妈妈的前端课程还要写后端）</p><p>都是springboot写的，反倒是学会了一个自己的图床的搭建。。。</p><p>写完打包成jar，丢到服务器上就行，然后执行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">aurora@aurora-vm-<span class="hljs-number">208</span>:~/WebFuckFinal$ jar -xf StoryDragon-<span class="hljs-number">4</span>.<span class="hljs-number">0</span>-SNAPSHOT.jar <br>aurora@aurora-vm-<span class="hljs-number">208</span>:~/WebFuckFinal$ java org.springframework.boot.loader.JarLauncher <br></code></pre></td></tr></table></figure><p>就跑起来了，楽。</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Square CTF 2023-There Is A bug</title>
    <link href="/2023/12/11/SquareCTF2023-ThereIsAbug/"/>
    <url>/2023/12/11/SquareCTF2023-ThereIsAbug/</url>
    
    <content type="html"><![CDATA[<p>唉，主动调用往往只需要最朴素的方法：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo21702305271114.png" alt="1702305271114" /><figcaption aria-hidden="true">1702305271114</figcaption></figure><p>context是上下文啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊</p><p>frida：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">MainActivity</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;com.example.authenticator.MainActivity&#x27;</span>);<br><br>    <span class="hljs-title class_">MainActivity</span>.<span class="hljs-property">onCreate</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 调用原始的onCreate方法</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">onCreate</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br><br>        <span class="hljs-comment">// 获取ActivityMainBinding实例</span><br>        <span class="hljs-keyword">var</span> binding = <span class="hljs-variable language_">this</span>.<span class="hljs-property">binding</span>.<span class="hljs-property">value</span>;<br>        <span class="hljs-keyword">var</span> tvInstance = binding.<span class="hljs-property">sampleText</span>.<span class="hljs-property">value</span>;<br>        <span class="hljs-keyword">var</span> etInstance = binding.<span class="hljs-property">editTextTextPassword</span>.<span class="hljs-property">value</span>;<br>        <span class="hljs-keyword">var</span> sharedPreferences = <span class="hljs-variable language_">this</span>.<span class="hljs-property">getSharedPreferences</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&#x27;file.txt&#x27;</span>, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getFlag</span>(tvInstance, etInstance, <span class="hljs-variable language_">this</span>, sharedPreferences);<br><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;getFlag result:&#x27;</span>, result);<br>    &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF write up</category>
      
      <category>空白的任务罢了</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Frida</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓那档事03</title>
    <link href="/2023/12/02/%E5%AE%89%E5%8D%93%E9%82%A3%E6%A1%A3%E4%BA%8B03/"/>
    <url>/2023/12/02/%E5%AE%89%E5%8D%93%E9%82%A3%E6%A1%A3%E4%BA%8B03/</url>
    
    <content type="html"><![CDATA[<h1 id="校验">校验</h1><p>是开发者在数据传送时采用的一种校正数据的一种方式</p><p>常见的校验有:签名校验(最常见)、dexcrc校验、apk完整性校验、路径文件校验等</p><h1 id="apk签名">APK签名</h1><p>通过对 Apk 进行签名，开发者可以证明对 Apk 的所有权和控制权，可用于安装和更新其应用。而在 Android 设备上的安装 Apk ，如果是一个没有被签名的 Apk，则会被拒绝安装。在安装 Apk 的时候，软件包管理器也会验证 Apk 是否已经被正确签名，并且通过签名证书和数据摘要验证是否合法没有被篡改。只有确认安全无篡改的情况下，才允许安装在设备上。</p><div class="note note-info">            <p>简单来说，APK 的签名主要作用有两个：</p><ol type="1"><li>证明 APK 的所有者。</li><li>允许 Android 市场和设备校验 APK 的正确性。</li></ol>          </div><p>Android 目前支持以下四种应用签名方案：</p><ul><li>v1 方案：基于 JAR 签名。</li><li>v2 方案：APK 签名方案 v2（在 Android 7.0 中引入）</li><li>v3 方案：APK 签名方案 v3（在 Android 9 中引入）</li><li>v4 方案：APK 签名方案 v4（在 Android 11 中引入）</li></ul><h2 id="v1-签名的机制">V1 签名的机制</h2><p>主要就在 META-INF 目录下的三个文件，MANIFEST.MF，ANDROID.SF，ANDROID.RSA，他们都是 V1 签名的产物。</p><ol type="1"><li><strong>MANIFEST.MF</strong>：这是摘要文件。程序遍历Apk包中的所有文件(entry)，对非文件夹非签名文件的文件，逐个用SHA1(安全哈希算法)生成摘要信息，再用Base64进行编码。如果你改变了apk包中的文件，那么在apk安装校验时，改变后的文件摘要信息与MANIFEST.MF的检验信息不同，于是程序就不能成功安装。</li></ol><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20231106210452143.png" alt="image-20231106210452143" /><figcaption aria-hidden="true">image-20231106210452143</figcaption></figure><ol start="2" type="1"><li><p><strong>ANDROID.SF</strong>：这是对摘要的签名文件。对前一步生成的MANIFEST.MF，使用SHA1-RSA算法，用开发者的私钥进行签名。在安装时只能使用公钥才能解密它。解密之后，将它与未加密的摘要信息（即，MANIFEST.MF文件）进行对比，如果相符，则表明内容没有被异常修改。</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20231106210522321.png" alt="image-20231106210522321" /><figcaption aria-hidden="true">image-20231106210522321</figcaption></figure></li><li><p><strong>ANDROID.RSA</strong>文件中保存了公钥、所采用的加密算法等信息。</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20231106210549881.png" alt="image-20231106210549881" /><figcaption aria-hidden="true">image-20231106210549881</figcaption></figure></li></ol><div class="note note-info">            <p>在某些情况下，直接对apk进行v1签名可以绕过apk的签名校验</p><p>v2方案会将 APK 文件视为 blob，并对整个文件进行签名检查。对 APK 进行的任何修改（包括对 ZIP 元数据进行的修改）都会使 APK 签名作废。这种形式的 APK 验证不仅速度要快得多，而且能够发现更多种未经授权的修改。</p>          </div><h2 id="v2">V2</h2><p>v2方案会将 APK 文件视为 blob，并对整个文件进行签名检查。对 APK 进行的任何修改（包括对 ZIP 元数据进行的修改）都会使 APK 签名作废。这种形式的 APK 验证不仅速度要快得多，而且能够发现更多种未经授权的修改。</p><h1 id="签名校验">签名校验</h1><p>一般来说，普通的签名校验会导致软件的闪退，黑屏，卡启动页等 当然，以上都算是比较好的，有一些比较狠的作者，则会直接rm -rf /，把基带都格掉的一键变砖。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">kill<span class="hljs-regexp">/killProcess-----kill/</span>KillProcess()可以杀死当前应用活动的进程，这一操作将会把所有该进程内的资源（包括线程全部清理掉）.当然，由于ActivityManager时刻监听着进程，一旦发现进程被非正常Kill，它将会试图去重启这个进程。这就是为什么，有时候当我们试图这样去结束掉应用时，发现它又自动重新启动的原因.<br><br>system.<span class="hljs-keyword">exit</span>-----杀死了整个进程，这时候活动所占的资源也会被释放。<br><br>finish----------仅仅针对Activity，当调用finish()时，只是将活动推向后台，并没有立即释放内存，活动的资源并没有被清理<br></code></pre></td></tr></table></figure><p>正己说遇到最恶心的校验：三角校验，就是so检测dex，动态加载的dex(在软件运行时会解压释放一段dex文件，检测完后就删除)检测so，dex检测动态加载的dex。</p><h2 id="课程作业">课程作业</h2><p>这次课程中第一个校验是普通获取签名校验。</p><p>正己老师给了普通获取签名校验代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">SignCheck</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">trueSignMD5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d0add9987c7c84aeb7198c3ff26ca152&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">nowSignMD5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 得到签名的MD5</span><br>        <span class="hljs-type">PackageInfo</span> <span class="hljs-variable">packageInfo</span> <span class="hljs-operator">=</span> getPackageManager().getPackageInfo(getPackageName(),PackageManager.GET_SIGNATURES);<br>        Signature[] signs = packageInfo.signatures;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">signBase64</span> <span class="hljs-operator">=</span> Base64Util.encodeToString(signs[<span class="hljs-number">0</span>].toByteArray());<br>        nowSignMD5 = MD5Utils.MD5(signBase64);<br>    &#125; <span class="hljs-keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> trueSignMD5.equals(nowSignMD5);<br>&#125;<br><br></code></pre></td></tr></table></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20231201162601909.png" alt="image-20231201162601909" /><figcaption aria-hidden="true">image-20231201162601909</figcaption></figure><p>在jadx中反编译得到：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20231201163616687.png" alt="普通签名校验" /><figcaption aria-hidden="true">普通签名校验</figcaption></figure><p>简单的分析可以知道这个是最后进行比较，我们可以通过frida hook使得这个函数直接返回true。</p><h1 id="常见的签名校验对抗">常见的签名校验对抗</h1><ul><li><p>方法一:核心破解插件，不签名安装应用</p></li><li><p>方法二:一键过签名工具，例如MT、NP、ARMPro、CNFIX、Modex的去除签名校验功能</p></li><li><p>方法三:具体分析签名校验逻辑(手撕签名校验)</p></li><li><p>方法四:io重定向--VA&amp;SVC：ptrace+seccomp</p><p><a href="https://bbs.pediy.com/thread-273160.htm">SVC的TraceHook沙箱的实现&amp;无痕Hook实现思路</a></p></li><li><p>方法五:去作者家严刑拷打拿到.jks文件和密码</p></li></ul><h1 id="手动实现pm代理">手动实现PM代理</h1><h2 id="什么是pms">什么是PMS</h2><p>PackageManagerService（简称PMS），是Android系统核心服务之一，处理包管理相关的工作，常见的比如安装、卸载应用等。</p><h2 id="示例">示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zj.hookpms;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.content.pm.PackageManager;<br><span class="hljs-keyword">import</span> android.util.Log;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceManagerWraper</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">ZJ</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ZJ595&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookPMS</span><span class="hljs-params">(Context context, String signed, String appPkgName, <span class="hljs-type">int</span> hashCode)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取全局的ActivityThread对象</span><br>            Class&lt;?&gt; activityThreadClass = Class.forName(<span class="hljs-string">&quot;android.app.ActivityThread&quot;</span>);<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">currentActivityThreadMethod</span> <span class="hljs-operator">=</span><br>                    activityThreadClass.getDeclaredMethod(<span class="hljs-string">&quot;currentActivityThread&quot;</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">currentActivityThread</span> <span class="hljs-operator">=</span> currentActivityThreadMethod.invoke(<span class="hljs-literal">null</span>);<br>            <span class="hljs-comment">// 获取ActivityThread里面原始的sPackageManager</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">sPackageManagerField</span> <span class="hljs-operator">=</span> activityThreadClass.getDeclaredField(<span class="hljs-string">&quot;sPackageManager&quot;</span>);<br>            sPackageManagerField.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">sPackageManager</span> <span class="hljs-operator">=</span> sPackageManagerField.get(currentActivityThread);<br>            <span class="hljs-comment">// 准备好代&#123;过&#125;&#123;滤&#125;理对象, 用来替换原始的对象</span><br>            Class&lt;?&gt; iPackageManagerInterface = Class.forName(<span class="hljs-string">&quot;android.content.pm.IPackageManager&quot;</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(<br>                    iPackageManagerInterface.getClassLoader(),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[]&#123;iPackageManagerInterface&#125;,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">PmsHookBinderInvocationHandler</span>(sPackageManager, signed, appPkgName, <span class="hljs-number">0</span>));<br>            <span class="hljs-comment">// 1. 替换掉ActivityThread里面的 sPackageManager 字段</span><br>            sPackageManagerField.set(currentActivityThread, proxy);<br>            <span class="hljs-comment">// 2. 替换 ApplicationPackageManager里面的 mPM对象</span><br>            <span class="hljs-type">PackageManager</span> <span class="hljs-variable">pm</span> <span class="hljs-operator">=</span> context.getPackageManager();<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">mPmField</span> <span class="hljs-operator">=</span> pm.getClass().getDeclaredField(<span class="hljs-string">&quot;mPM&quot;</span>);<br>            mPmField.setAccessible(<span class="hljs-literal">true</span>);<br>            mPmField.set(pm, proxy);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.d(ZJ, <span class="hljs-string">&quot;hook pms error:&quot;</span> + Log.getStackTraceString(e));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookPMS</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Sign</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;原包的签名信息&quot;</span>;<br>        hookPMS(context, Sign, <span class="hljs-string">&quot;com.zj.hookpms&quot;</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>感觉和frida差不多，但是不如firda</p><h1 id="io重定向">IO重定向</h1><h2 id="什么是io重定向">什么是IO重定向？</h2><p>例：在读A文件的时候指向B文件</p><p><a href="https://github.com/virjarRatel/ratel-core">平头哥的核心代码</a> <a href="https://github.com/asLody/VirtualApp">Virtual Engine for Android(Support 12.0 in business version)</a></p><h2 id="io重定向可以干嘛">IO重定向可以干嘛？</h2><p>1，可以让文件只读，不可写</p><p>2，禁止访问文件</p><p>3，路径替换</p><h2 id="具体用处">具体用处：</h2><p>过签名检测(使得目标包的签名校验读取的是另一个包[原来的没修改过的包])</p><p>风控对抗(例:一个文件记录App启动的次数干扰)</p><p>过Root检测，Xposed检测(文件不可读取)</p><h2 id="原理">原理(?)</h2><p>我大概知道的是：就是hook安卓底层的IO读取流，然后最后实现让程序读取自己指定的部分</p><p>MT管理器作者做的利用重定向对抗签名校验的开源连接：<a href="https://github.com/L-JINBIN/ApkSignatureKillerEx">新版MT去签及对抗</a></p><h1 id="其他的一些校验">其他的一些校验</h1><h2 id="root">root</h2><h3 id="例子">例子：</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">isDeviceRooted</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>    <span class="hljs-keyword">return</span> checkRootMethod1() || checkRootMethod2() || checkRootMethod3()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkRootMethod1</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>    <span class="hljs-keyword">val</span> buildTags = android.os.Build.TAGS<br>    <span class="hljs-keyword">return</span> buildTags != <span class="hljs-literal">null</span> &amp;&amp; buildTags.contains(<span class="hljs-string">&quot;test-keys&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkRootMethod2</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>    <span class="hljs-keyword">val</span> paths = arrayOf(<span class="hljs-string">&quot;/system/app/Superuser.apk&quot;</span>, <span class="hljs-string">&quot;/sbin/su&quot;</span>, <span class="hljs-string">&quot;/system/bin/su&quot;</span>, <span class="hljs-string">&quot;/system/xbin/su&quot;</span>, <span class="hljs-string">&quot;/data/local/xbin/su&quot;</span>, <span class="hljs-string">&quot;/data/local/bin/su&quot;</span>, <span class="hljs-string">&quot;/system/sd/xbin/su&quot;</span>,<br>            <span class="hljs-string">&quot;/system/bin/failsafe/su&quot;</span>, <span class="hljs-string">&quot;/data/local/su&quot;</span>, <span class="hljs-string">&quot;/su/bin/su&quot;</span>)<br>    <span class="hljs-keyword">for</span> (path <span class="hljs-keyword">in</span> paths) &#123;<br>        <span class="hljs-keyword">if</span> (File(path).exists()) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkRootMethod3</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>    <span class="hljs-keyword">var</span> process: Process? = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> &#123;<br>        process = Runtime.getRuntime().exec(arrayOf(<span class="hljs-string">&quot;/system/xbin/which&quot;</span>, <span class="hljs-string">&quot;su&quot;</span>))<br>        <span class="hljs-keyword">val</span> bufferedReader = BufferedReader(InputStreamReader(process.inputStream))<br>        bufferedReader.readLine() != <span class="hljs-literal">null</span><br>    &#125; <span class="hljs-keyword">catch</span> (t: Throwable) &#123;<br>        <span class="hljs-literal">false</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        process?.destroy()<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><div class="note note-info">            <p>代码解析：</p><p>定义了一个 <code>isDeviceRooted()</code> 函数，该函数调用了三个检测 root 的方法：<code>checkRootMethod1()</code>、<code>checkRootMethod2()</code> 和 <code>checkRootMethod3()</code>。</p><p><code>checkRootMethod1()</code> 方法检查设备的 <code>build tags</code> 是否包含 <code>test-keys</code>。这通常是用于测试的设备，因此如果检测到这个标记，则可以认为设备已被 root。</p><p><code>checkRootMethod2()</code> 方法检查设备是否存在一些特定的文件，这些文件通常被用于执行 root 操作。如果检测到这些文件，则可以认为设备已被 root。</p><p><code>checkRootMethod3()</code> 方法使用 <code>Runtime.exec()</code> 方法来执行 <code>which su</code> 命令，然后检查命令的输出是否不为空。如果输出不为空，则可以认为设备已被 root。</p>          </div><p>一些反制手段：</p><p>反制手段</p><ol type="1"><li>hook</li><li>分析具体的检测代码</li><li>利用IO重定向使文件不可读</li><li>修改Andoird源码，去除常见指纹</li></ol><h2 id="模拟器检测">模拟器检测</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">isEmulator</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> &#123; <br>        <span class="hljs-keyword">return</span> Build.FINGERPRINT.startsWith(<span class="hljs-string">&quot;generic&quot;</span>) || Build.FINGERPRINT.startsWith(<span class="hljs-string">&quot;unknown&quot;</span>) || Build.MODEL.contains(<span class="hljs-string">&quot;google_sdk&quot;</span>) Build.MODEL.contains(<span class="hljs-string">&quot;Emulator&quot;</span>) || Build.MODEL.contains(<span class="hljs-string">&quot;Android SDK built for x86&quot;</span>) || Build.MANUFACTURER.contains(<span class="hljs-string">&quot;Genymotion&quot;</span>) || Build.HOST.startsWith(<span class="hljs-string">&quot;Build&quot;</span>) || Build.PRODUCT == <span class="hljs-string">&quot;google_sdk&quot;</span> <br>        &#125;<br><br></code></pre></td></tr></table></figure><div class="note note-info">            <p>代码解析：</p><p>通过检测系统的 <code>Build</code> 对象来判断当前设备是否为模拟器。具体方法是检测 <code>Build.FINGERPRINT</code> 属性是否包含字符串 <code>"generic"</code>。</p>          </div><p>下面是一篇正己的<a href="https://ionized-bag-d70.notion.site/04dbaf39091f42519b14decd2a87fde7">模拟器检测对抗</a></p><h2 id="反调试">反调试</h2><h3 id="安卓自带的">安卓自带的</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkForDebugger</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">if</span> (Debug.isDebuggerConnected()) &#123;  <br>        <span class="hljs-comment">// 如果调试器已连接，则终止应用程序  </span><br>        System.exit(<span class="hljs-number">0</span>)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>和win端的<code>isDebuggerPresent()</code>一样</p><h3 id="debuggable属性">debuggable属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getAppCanDebug</span><span class="hljs-params">(Context context)</span><span class="hljs-comment">//上下文对象为xxActivity.this</span><br>&#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isDebug</span> <span class="hljs-operator">=</span> context.getApplicationInfo() != <span class="hljs-literal">null</span> &amp;&amp;<br>            (context.getApplicationInfo().flags &amp; ApplicationInfo.FLAG_DEBUGGABLE) != <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> isDebug;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>和win端的<code>PEB</code>中的<code>NtGlobalFlag</code>相类似(?)</p><h3 id="ptrace检测">ptrace检测</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ptrace_protect</span><span class="hljs-params">()</span><span class="hljs-comment">//ptrace附加自身线程 会导致此进程TracerPid 变为父进程的TracerPid 即zygote</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">ptrace</span>(PTRACE_TRACEME, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">//返回-1即为已经被调试</span><br>&#125;<br><span class="hljs-comment">//每个进程同时刻只能被1个调试进程ptrace  ，主动ptrace本进程可以使得其他调试器无法调试</span><br></code></pre></td></tr></table></figure><p>win端也可以搞这个</p><h3 id="调试进程名检测">调试进程名检测</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SearchObjProcess</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    FILE* pfile=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x1000</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><br>    pfile=<span class="hljs-built_in">popen</span>(<span class="hljs-string">&quot;ps&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span>==pfile)<br>    &#123;<br>        <span class="hljs-comment">//LOGA(&quot;SearchObjProcess popen打开命令失败!\n&quot;);</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 获取结果</span><br>    <span class="hljs-comment">//LOGA(&quot;popen方案:\n&quot;);</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">fgets</span>(buf,<span class="hljs-built_in">sizeof</span>(buf),pfile))<br>    &#123;<br><br>        <span class="hljs-type">char</span>* strA=<span class="hljs-literal">NULL</span>;<br>        <span class="hljs-type">char</span>* strB=<span class="hljs-literal">NULL</span>;<br>        <span class="hljs-type">char</span>* strC=<span class="hljs-literal">NULL</span>;<br>        <span class="hljs-type">char</span>* strD=<span class="hljs-literal">NULL</span>;<br>        strA=<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;android_server&quot;</span>);<span class="hljs-comment">//通过查找匹配子串判断</span><br>        strB=<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;gdbserver&quot;</span>);<br>        strC=<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;gdb&quot;</span>);<br>        strD=<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;fuwu&quot;</span>);<br>        <span class="hljs-keyword">if</span>(strA || strB ||strC || strD)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 执行到这里，判定为调试状态</span><br><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">pclose</span>(pfile);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="更完善的安卓反调试文章">更完善的安卓反调试文章</h3><p><a href="https://bbs.pediy.com/thread-268155.htm">对安卓反调试和校验检测的一些实践与结论</a></p><p>看雪的，回头整理一下</p><h2 id="frida">frida</h2><p><a href="https://github.com/xxr0ss/AntiFrida">一些Frida检测手段</a></p><p>有空看看</p><h1 id="一些smali">一些smali</h1><h2 id="int型赋值">1 Int型赋值</h2><p>const/4 最大只允许存放4个二进制位(4bit)，</p><p>const/16 最大值允许存放16个二进制位(16bit)， 第一位(即最高位)默认为符号位。单位换算 1byte=8bit</p><p>举例说明下寄存器的取值范围: # 以下数据定义高位默认为符号位</p><p>const/4 v0,0x2 # 最大只允许存放半字节数据 取值范围为 -8 and 7</p><p>const/16 v0 , 0xABCD # 定义一个寄存器变量，最大只允许存放16位数据 比如short类型数据 取值范围为-32768~32767</p><p>const v0 , 0xA# 定义一个寄存器， 最大只允许存放32位数据,比如int类型数据 将数字10赋值给v0 取值范围-2147483647~2147483647</p><p>const/high16 #定义一个寄存器， 最大只允许存放高16位数值 比如0xFFFF0000末四位补0 存入高四位0XFFFF</p><h2 id="long型赋值">2 Long型赋值</h2><p><strong>const-wide vx, lit32</strong> 表示将一个 32 位的常量存储到 vx 与 vx+1 两个寄存器中 —— 即一个 long 类型的数据</p><p>PE.</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-keyword">.method</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> final</span> vipEndTime()J  <br><span class="hljs-keyword">    .registers</span> 3  <br><br>   <span class="hljs-built_in"> const-wide </span>v0, 0x1854460ef29L  <br><br>   <span class="hljs-built_in"> return-wide </span>v0<span class="hljs-keyword">  </span><br><span class="hljs-keyword">.end method</span><br><br></code></pre></td></tr></table></figure><h1 id="小插曲crc校验">小插曲CRC校验</h1><p>对于安卓的crc校验，有着一个官方函数：<code>java.util.zip.ZipEntry.getCrc()</code></p><p>该方法会返回未压缩条目数据的CRC-32校验和，如果未知，则为<code>-1</code></p><p>对于安卓自动生成的一个类：<code>Android.R</code>是不在这个函数的校验范围内的，我们可以用这个保存整个包体的CRC校验结果，从而实现防止篡改包体（虽然找到这个检测干掉也是防不住，防君子不防小人了）</p><p>那该如何添加对应的crc值到<code>Android.R</code>里边？</p><p>可以在你的应用中创建一个 <code>res/values/strings.xml</code> 文件，然后在这里定义你自己的字符串资源。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlCopy code<span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;my_custom_crc&quot;</span>&gt;</span>My Custom CRC String<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后，你可以在代码中使用这个字符串资源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">javaCopy code<br><span class="hljs-type">String</span> <span class="hljs-variable">customCRC</span> <span class="hljs-operator">=</span> getString(R.string.my_custom_crc);<br></code></pre></td></tr></table></figure><h1 id="今日的frida">今日的frida</h1><p>之前还在想，我要是用log插桩或者作者本来有写log的，怎么得到这个log内容，这下在github上找到了个，现在是我的辣（）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;1. start hook&quot;</span>)<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Log</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;android.util.Log&quot;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Log</span> != <span class="hljs-literal">undefined</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;2. find class&quot;</span>);<br>        <br>        <span class="hljs-title class_">Log</span>.<span class="hljs-property">e</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>, <span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">tag, entry</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Log.e( &#x27;</span> + tag + <span class="hljs-string">&#x27;, &#x27;</span> + entry + <span class="hljs-string">&#x27; )&#x27;</span>);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">e</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>        &#125;<br>        <span class="hljs-title class_">Log</span>.<span class="hljs-property">w</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>, <span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">tag, entry</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Log.w( &#x27;</span> + tag + <span class="hljs-string">&#x27;, &#x27;</span> + entry + <span class="hljs-string">&#x27; )&#x27;</span>);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">w</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>        &#125;<br>    <br>        <span class="hljs-title class_">Log</span>.<span class="hljs-property">i</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>, <span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">tag, entry</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Log.i( &#x27;</span> + tag + <span class="hljs-string">&#x27;, &#x27;</span> + entry + <span class="hljs-string">&#x27; )&#x27;</span>);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">i</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>        &#125;<br>    <br>        <span class="hljs-title class_">Log</span>.<span class="hljs-property">d</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>, <span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">tag, entry</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Log.d( &#x27;</span> + tag + <span class="hljs-string">&#x27;, &#x27;</span> + entry + <span class="hljs-string">&#x27; )&#x27;</span>);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">d</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>        &#125;<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>感谢老哥，看起来还有其他不错的，这里把连接贴上</p><p>https://github.com/physics-sec/frida-scripts/tree/master</p><hr /><p>2023年12月2日21:39:01更新：</p><p><strong>靠！原来adb自带日志捕获功能</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">logcat |grep &quot;D.[tag]&quot;<br></code></pre></td></tr></table></figure><p>在adb shell中用这条命令，就能得到日志</p><p>这里<code>.[tag]</code>前面的<code>D</code>就是表示读取debug类型的日志，就是Log.d()的东西</p><h1 id="io重定向的代码例子">IO重定向的代码例子</h1><p>因为有点长，所以放在最后了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>string packname;  <br>string origpath;  <br>string fakepath;  <br><br><span class="hljs-built_in">int</span> (*orig_open)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...);  <br><span class="hljs-built_in">int</span> (*orig_openat)(<span class="hljs-type">int</span>,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...);  <br>FILE *(*orig_fopen)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode);  <br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-title">long</span> <span class="hljs-params">(*orig_syscall)</span><span class="hljs-params">(<span class="hljs-type">long</span> number, ...)</span></span>;  <br><span class="hljs-built_in">int</span> (*orig__NR_openat)(<span class="hljs-type">int</span>,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...);  <br><br><span class="hljs-type">void</span>* (*orig_dlopen_CI)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> flag);  <br><span class="hljs-type">void</span>* (*orig_dlopen_CIV)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> flag, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *extinfo);  <br><span class="hljs-type">void</span>* (*orig_dlopen_CIVV)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">int</span> flags, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *extinfo, <span class="hljs-type">void</span> *caller_addr);  <br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">needs_mode</span><span class="hljs-params">(<span class="hljs-type">int</span> flags)</span> </span>&#123;  <br>    <span class="hljs-keyword">return</span> ((flags &amp; O_CREAT) == O_CREAT) || ((flags &amp; O_TMPFILE) == O_TMPFILE);  <br>&#125;  <br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">startsWith</span><span class="hljs-params">(string str, string sub)</span></span>&#123;  <br>    <span class="hljs-keyword">return</span> str.<span class="hljs-built_in">find</span>(sub)==<span class="hljs-number">0</span>;  <br>&#125;  <br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">endsWith</span><span class="hljs-params">(string s,string sub)</span></span>&#123;  <br>    <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">rfind</span>(sub)==(s.<span class="hljs-built_in">length</span>()-sub.<span class="hljs-built_in">length</span>());  <br>&#125;  <br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isOrigAPK</span><span class="hljs-params">(string  path)</span></span>&#123;  <br><br>    <span class="hljs-keyword">if</span>(path==origpath)&#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>&#125;  <br><span class="hljs-comment">//该函数的功能是在打开一个文件时进行拦截，并在满足特定条件时将文件路径替换为另一个路径  </span><br><br><span class="hljs-comment">//fake_open 函数有三个参数：  </span><br><span class="hljs-comment">//pathname：一个字符串，表示要打开的文件的路径。  </span><br><span class="hljs-comment">//flags：一个整数，表示打开文件的方式，例如只读、只写、读写等。  </span><br><span class="hljs-comment">//mode（可选参数）：一个整数，表示打开文件时应用的权限模式。  </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fake_open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...)</span> </span>&#123;  <br>    <span class="hljs-type">mode_t</span> mode = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">needs_mode</span>(flags)) &#123;  <br>        va_list args;  <br>        <span class="hljs-built_in">va_start</span>(args, flags);  <br>        mode = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">mode_t</span>&gt;(<span class="hljs-built_in">va_arg</span>(args, <span class="hljs-type">int</span>));  <br>        <span class="hljs-built_in">va_end</span>(args);  <br>    &#125;  <br>    <span class="hljs-comment">//LOGI(&quot;open,  path: %s, flags: %d, mode: %d&quot;,pathname, flags ,mode);  </span><br>    string cpp_path= pathname;  <br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isOrigAPK</span>(cpp_path))&#123;  <br>        <span class="hljs-built_in">LOGI</span>(<span class="hljs-string">&quot;libc_open, redirect: %s, ---&gt;: %s&quot;</span>,pathname, fakepath.<span class="hljs-built_in">data</span>());  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">orig_open</span>(<span class="hljs-string">&quot;/data/user/0/com.zj.wuaipojie/files/base.apk&quot;</span>, flags, mode);  <br>    &#125;  <br>    <span class="hljs-keyword">return</span>  <span class="hljs-built_in">orig_open</span>(pathname, flags, mode);  <br><br>&#125;  <br><br><span class="hljs-comment">//该函数的功能是在打开一个文件时进行拦截，并在满足特定条件时将文件路径替换为另一个路径  </span><br><br><span class="hljs-comment">//fake_openat 函数有四个参数：  </span><br><span class="hljs-comment">//fd：一个整数，表示要打开的文件的文件描述符。  </span><br><span class="hljs-comment">//pathname：一个字符串，表示要打开的文件的路径。  </span><br><span class="hljs-comment">//flags：一个整数，表示打开文件的方式，例如只读、只写、读写等。  </span><br><span class="hljs-comment">//mode（可选参数）：一个整数，表示打开文件时应用的权限模式。  </span><br><span class="hljs-comment">//openat 函数的作用类似于 open 函数，但是它使用文件描述符来指定文件路径，而不是使用文件路径本身。这样，就可以在打开文件时使用相对路径，而不必提供完整的文件路径。  </span><br><span class="hljs-comment">//例如，如果要打开相对于当前目录的文件，可以使用 openat 函数，而不是 open 函数，因为 open 函数只能使用绝对路径。  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fake_openat</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...)</span> </span>&#123;  <br>    <span class="hljs-type">mode_t</span> mode = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">needs_mode</span>(flags)) &#123;  <br>        va_list args;  <br>        <span class="hljs-built_in">va_start</span>(args, flags);  <br>        mode = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">mode_t</span>&gt;(<span class="hljs-built_in">va_arg</span>(args, <span class="hljs-type">int</span>));  <br>        <span class="hljs-built_in">va_end</span>(args);  <br>    &#125;  <br>    <span class="hljs-built_in">LOGI</span>(<span class="hljs-string">&quot;openat, fd: %d, path: %s, flags: %d, mode: %d&quot;</span>,fd ,pathname, flags ,mode);  <br>    string cpp_path= pathname;  <br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isOrigAPK</span>(cpp_path))&#123;  <br>        <span class="hljs-built_in">LOGI</span>(<span class="hljs-string">&quot;libc_openat, redirect: %s, ---&gt;: %s&quot;</span>,pathname, fakepath.<span class="hljs-built_in">data</span>());  <br>        <span class="hljs-keyword">return</span>  <span class="hljs-built_in">orig_openat</span>(fd,fakepath.<span class="hljs-built_in">data</span>(), flags, mode);  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">orig_openat</span>(fd,pathname, flags, mode);  <br><br>&#125;  <br><span class="hljs-function">FILE *<span class="hljs-title">fake_fopen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode)</span> </span>&#123;  <br><br>    string cpp_path= filename;  <br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isOrigAPK</span>(cpp_path))&#123;  <br>        <span class="hljs-keyword">return</span>  <span class="hljs-built_in">orig_fopen</span>(fakepath.<span class="hljs-built_in">data</span>(), mode);  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">orig_fopen</span>(filename, mode);  <br>&#125;  <br><span class="hljs-comment">//该函数的功能是在执行系统调用时进行拦截，并在满足特定条件时修改系统调用的参数。  </span><br><span class="hljs-comment">//syscall 函数是一个系统调用，是程序访问内核功能的方法之一。使用 syscall 函数可以调用大量的系统调用，它们用于实现操作系统的各种功能，例如打开文件、创建进程、分配内存等。  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title">fake_syscall</span><span class="hljs-params">(<span class="hljs-type">long</span> number, ...)</span> </span>&#123;  <br>    <span class="hljs-type">void</span> *arg[<span class="hljs-number">7</span>];  <br>    va_list list;  <br><br>    <span class="hljs-built_in">va_start</span>(list, number);  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; ++i) &#123;  <br>        arg[i] = <span class="hljs-built_in">va_arg</span>(list, <span class="hljs-type">void</span> *);  <br>    &#125;  <br>    <span class="hljs-built_in">va_end</span>(list);  <br>    <span class="hljs-keyword">if</span> (number == __NR_openat)&#123;  <br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span> *cpp_path = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">char</span> *&gt;(arg[<span class="hljs-number">1</span>]);  <br>        <span class="hljs-built_in">LOGI</span>(<span class="hljs-string">&quot;syscall __NR_openat, fd: %d, path: %s, flags: %d, mode: %d&quot;</span>,arg[<span class="hljs-number">0</span>] ,arg[<span class="hljs-number">1</span>], arg[<span class="hljs-number">2</span>], arg[<span class="hljs-number">3</span>]);  <br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isOrigAPK</span>(cpp_path))&#123;  <br>            <span class="hljs-built_in">LOGI</span>(<span class="hljs-string">&quot;syscall __NR_openat, redirect: %s, ---&gt;: %s&quot;</span>,arg[<span class="hljs-number">1</span>], fakepath.<span class="hljs-built_in">data</span>());  <br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">orig_syscall</span>(number,arg[<span class="hljs-number">0</span>], fakepath.<span class="hljs-built_in">data</span>() ,arg[<span class="hljs-number">2</span>],arg[<span class="hljs-number">3</span>]);  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">orig_syscall</span>(number, arg[<span class="hljs-number">0</span>], arg[<span class="hljs-number">1</span>], arg[<span class="hljs-number">2</span>], arg[<span class="hljs-number">3</span>], arg[<span class="hljs-number">4</span>], arg[<span class="hljs-number">5</span>], arg[<span class="hljs-number">6</span>]);  <br><br>&#125;  <br><br><span class="hljs-comment">//函数的功能是获取当前应用的包名、APK 文件路径以及库文件路径，并将这些信息保存在全局变量中  </span><br><span class="hljs-comment">//函数调用 GetObjectClass 和 GetMethodID 函数来获取 context 对象的类型以及 getPackageName 方法的 ID。然后，函数调用 CallObjectMethod 函数来调用 getPackageName 方法，获取当前应用的包名。最后，函数使用 GetStringUTFChars 函数将包名转换为 C 字符串，并将包名保存在 packname 全局变量中  </span><br><span class="hljs-comment">//接着，函数使用 fakepath 全局变量保存了 /data/user/0/&lt;packname&gt;/files/base.apk 这样的路径，其中 &lt;packname&gt; 是当前应用的包名。  </span><br><span class="hljs-comment">//然后，函数再次调用 GetObjectClass 和 GetMethodID 函数来获取 context 对象的类型以及 getApplicationInfo 方法的 ID。然后，函数调用 CallObjectMethod 函数来调用 getApplicationInfo 方法，获取当前应用的 ApplicationInfo 对象。  </span><br><span class="hljs-comment">//它先调用 GetObjectClass 函数获取 ApplicationInfo 对象的类型，然后调用 GetFieldID 函数获取 sourceDir 字段的 ID。接着，函数使用 GetObjectField 函数获取 sourceDir 字段的值，并使用 GetStringUTFChars 函数将其转换为 C 字符串。最后，函数将 C 字符串保存在 origpath 全局变量中，表示当前应用的 APK 文件路径。  </span><br><span class="hljs-comment">//最后，函数使用 GetFieldID 和 GetObjectField 函数获取 nativeLibraryDir 字段的值，并使用 GetStringUTFChars 函数将其转换为 C 字符串。函数最后调用 LOGI 函数打印库文件路径，但是并没有将其保存在全局变量中。  </span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">JNIEXPORT <span class="hljs-type">void</span> JNICALL  </span><br><span class="hljs-function"><span class="hljs-title">Java_com_zj_wuaipojie_util_SecurityUtil_hook</span><span class="hljs-params">(JNIEnv *env, jclass clazz, jobject context)</span> </span>&#123;  <br>    jclass conext_class = env-&gt;<span class="hljs-built_in">GetObjectClass</span>(context);  <br>    jmethodID methodId_pack = env-&gt;<span class="hljs-built_in">GetMethodID</span>(conext_class, <span class="hljs-string">&quot;getPackageName&quot;</span>,  <br>                                               <span class="hljs-string">&quot;()Ljava/lang/String;&quot;</span>);  <br>    <span class="hljs-keyword">auto</span> packname_js = <span class="hljs-built_in">reinterpret_cast</span>&lt;jstring&gt;(env-&gt;<span class="hljs-built_in">CallObjectMethod</span>(context, methodId_pack));  <br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *pn = env-&gt;<span class="hljs-built_in">GetStringUTFChars</span>(packname_js, <span class="hljs-number">0</span>);  <br>    packname = <span class="hljs-built_in">string</span>(pn);  <br><br>    env-&gt;<span class="hljs-built_in">ReleaseStringUTFChars</span>(packname_js, pn);  <br>    <span class="hljs-comment">//LOGI(&quot;packname: %s&quot;, packname.data());  </span><br>    fakepath= <span class="hljs-string">&quot;/data/user/0/&quot;</span>+ packname +<span class="hljs-string">&quot;/files/base.apk&quot;</span>;  <br><br>    jclass conext_class2 = env-&gt;<span class="hljs-built_in">GetObjectClass</span>(context);  <br>    jmethodID methodId_pack2 = env-&gt;<span class="hljs-built_in">GetMethodID</span>(conext_class2,<span class="hljs-string">&quot;getApplicationInfo&quot;</span>,<span class="hljs-string">&quot;()Landroid/content/pm/ApplicationInfo;&quot;</span>);  <br>    jobject application_info = env-&gt;<span class="hljs-built_in">CallObjectMethod</span>(context,methodId_pack2);  <br>    jclass pm_clazz = env-&gt;<span class="hljs-built_in">GetObjectClass</span>(application_info);  <br><br>    jfieldID package_info_id = env-&gt;<span class="hljs-built_in">GetFieldID</span>(pm_clazz,<span class="hljs-string">&quot;sourceDir&quot;</span>,<span class="hljs-string">&quot;Ljava/lang/String;&quot;</span>);  <br>    <span class="hljs-keyword">auto</span> sourceDir_js = <span class="hljs-built_in">reinterpret_cast</span>&lt;jstring&gt;(env-&gt;<span class="hljs-built_in">GetObjectField</span>(application_info,package_info_id));  <br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *sourceDir = env-&gt;<span class="hljs-built_in">GetStringUTFChars</span>(sourceDir_js, <span class="hljs-number">0</span>);  <br>    origpath = <span class="hljs-built_in">string</span>(sourceDir);  <br>    <span class="hljs-built_in">LOGI</span>(<span class="hljs-string">&quot;sourceDir: %s&quot;</span>, sourceDir);  <br><br>    jfieldID package_info_id2 = env-&gt;<span class="hljs-built_in">GetFieldID</span>(pm_clazz,<span class="hljs-string">&quot;nativeLibraryDir&quot;</span>,<span class="hljs-string">&quot;Ljava/lang/String;&quot;</span>);  <br>    <span class="hljs-keyword">auto</span> nativeLibraryDir_js = <span class="hljs-built_in">reinterpret_cast</span>&lt;jstring&gt;(env-&gt;<span class="hljs-built_in">GetObjectField</span>(application_info,package_info_id2));  <br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *nativeLibraryDir = env-&gt;<span class="hljs-built_in">GetStringUTFChars</span>(nativeLibraryDir_js, <span class="hljs-number">0</span>);  <br>    <span class="hljs-built_in">LOGI</span>(<span class="hljs-string">&quot;nativeLibraryDir: %s&quot;</span>, nativeLibraryDir);  <br>    <span class="hljs-comment">//LOGI(&quot;%s&quot;, &quot;Start Hook&quot;);  </span><br><br>    <span class="hljs-comment">//启动hook  </span><br>    <span class="hljs-type">void</span> *handle = <span class="hljs-built_in">dlopen</span>(<span class="hljs-string">&quot;libc.so&quot;</span>,RTLD_NOW);  <br>    <span class="hljs-keyword">auto</span> pagesize = <span class="hljs-built_in">sysconf</span>(_SC_PAGE_SIZE);  <br>    <span class="hljs-keyword">auto</span> addr = ((<span class="hljs-type">uintptr_t</span>)<span class="hljs-built_in">dlsym</span>(handle,<span class="hljs-string">&quot;open&quot;</span>) &amp; (-pagesize));  <br>    <span class="hljs-keyword">auto</span> addr2 = ((<span class="hljs-type">uintptr_t</span>)<span class="hljs-built_in">dlsym</span>(handle,<span class="hljs-string">&quot;openat&quot;</span>) &amp; (-pagesize));  <br>    <span class="hljs-keyword">auto</span> addr3 = ((<span class="hljs-type">uintptr_t</span>)fopen) &amp; (-pagesize);  <br>    <span class="hljs-keyword">auto</span> addr4 = ((<span class="hljs-type">uintptr_t</span>)syscall) &amp; (-pagesize);  <br><br>    <span class="hljs-comment">//解除部分机型open被保护  </span><br>    <span class="hljs-built_in">mprotect</span>((<span class="hljs-type">void</span>*)addr, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);  <br>    <span class="hljs-built_in">mprotect</span>((<span class="hljs-type">void</span>*)addr2, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);  <br>    <span class="hljs-built_in">mprotect</span>((<span class="hljs-type">void</span>*)addr3, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);  <br>    <span class="hljs-built_in">mprotect</span>((<span class="hljs-type">void</span>*)addr4, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);  <br><br>    <span class="hljs-built_in">DobbyHook</span>((<span class="hljs-type">void</span> *)<span class="hljs-built_in">dlsym</span>(handle,<span class="hljs-string">&quot;open&quot;</span>), (<span class="hljs-type">void</span> *)fake_open, (<span class="hljs-type">void</span> **)&amp;orig_open);  <br>    <span class="hljs-built_in">DobbyHook</span>((<span class="hljs-type">void</span> *)<span class="hljs-built_in">dlsym</span>(handle,<span class="hljs-string">&quot;openat&quot;</span>), (<span class="hljs-type">void</span> *)fake_openat, (<span class="hljs-type">void</span> **)&amp;orig_openat);  <br>    <span class="hljs-built_in">DobbyHook</span>((<span class="hljs-type">void</span> *)fopen, (<span class="hljs-type">void</span> *)fake_fopen, (<span class="hljs-type">void</span>**)&amp;orig_fopen);  <br>    <span class="hljs-built_in">DobbyHook</span>((<span class="hljs-type">void</span> *)syscall, (<span class="hljs-type">void</span> *)fake_syscall, (<span class="hljs-type">void</span> **)&amp;orig_syscall);  <br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="学习链接">学习链接</h1><p>https://www.52pojie.cn/thread-1731181-1-1.html</p>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓那档事04</title>
    <link href="/2023/12/02/%E5%AE%89%E5%8D%93%E9%82%A3%E6%A1%A3%E4%BA%8B04/"/>
    <url>/2023/12/02/%E5%AE%89%E5%8D%93%E9%82%A3%E6%A1%A3%E4%BA%8B04/</url>
    
    <content type="html"><![CDATA[<p>52的frida讲完了，看看。</p><h1 id="frida">Frida</h1><h2 id="简单基础指令">简单基础指令</h2><ul><li><code>frida-ps -U</code> 查看当前手机运行的进程</li><li><code>frida-ps --help</code></li></ul><h2 id="两种操作模式">两种操作模式</h2><table><thead><tr class="header"><th style="text-align: left;">操作模式</th><th style="text-align: left;">描述</th><th style="text-align: left;">优点</th><th style="text-align: left;">主要用途</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">CLI（命令行）模式</td><td style="text-align: left;">通过命令行直接将JavaScript脚本注入进程中，对进程进行操作</td><td style="text-align: left;">便于直接注入和操作</td><td style="text-align: left;">在较小规模的操作或者需求比较简单的场景中使用</td></tr><tr class="even"><td style="text-align: left;">RPC模式</td><td style="text-align: left;">使用Python进行JavaScript脚本的注入工作，实际对进程进行操作的还是JavaScript脚本，可以通过RPC传输给Python脚本来进行复杂数据的处理</td><td style="text-align: left;">在对复杂数据的处理上可以通过RPC传输给Python脚本来进行，有利于减少被注入进程的性能损耗</td><td style="text-align: left;">在大规模调用中更加普遍，特别是对于复杂数据处理的需求</td></tr></tbody></table><p>自己倒是常用第一种</p><h2 id="注入模式">注入模式</h2><table><thead><tr class="header"><th style="text-align: left;">注入模式</th><th style="text-align: left;">描述</th><th style="text-align: left;">命令或参数</th><th style="text-align: left;">优点</th><th style="text-align: left;">主要用途</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">Spawn模式</td><td style="text-align: left;">将启动App的权利交由Frida来控制，即使目标App已经启动，在使用Frida注入程序时还是会重新启动App</td><td style="text-align: left;">在CLI模式中，Frida通过加上 -f 参数指定包名以spawn模式操作App</td><td style="text-align: left;">适合于需要在App启动时即进行注入的场景，可以在App启动时即捕获其行为</td><td style="text-align: left;">当需要监控App从启动开始的所有行为时使用</td></tr><tr class="even"><td style="text-align: left;">Attach模式</td><td style="text-align: left;">在目标App已经启动的情况下，Frida通过ptrace注入程序从而执行Hook的操作</td><td style="text-align: left;">在CLI模式中，如果不添加 -f 参数，则默认会通过attach模式注入App</td><td style="text-align: left;">适合于已经运行的App，不会重新启动App，对用户体验影响较小</td><td style="text-align: left;">在App已经启动，或者我们只关心特定时刻或特定功能的行为时使用</td></tr></tbody></table><p>Spawn模式</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">frida -U -f 进程名 -l hook<span class="hljs-number">.</span><span class="hljs-keyword">js</span><br></code></pre></td></tr></table></figure><p>attach模式 ：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">frida -U 进程名 -l hook<span class="hljs-number">.</span><span class="hljs-keyword">js</span><br></code></pre></td></tr></table></figure><p>就是有没有<code>-f</code>的区别</p><h2 id="frida_server">frida_server</h2><ul><li>默认是使用27042端口</li></ul><p>可以通过执行命令添加<code>-l 0.0.0.0:[port]</code>参数，从而实现使用自定义端口，但是不要忘记<code>adb forward tcp:[port] tcp:[port]</code>转发</p><h1 id="frida脚本">frida脚本</h1><h2 id="一些基础语法正己">一些基础语法（正己）</h2><table><thead><tr class="header"><th style="text-align: left;">API名称</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>Java.use(className)</code></td><td style="text-align: left;">获取指定的Java类并使其在JavaScript代码中可用。</td></tr><tr class="even"><td style="text-align: left;"><code>Java.perform(callback)</code></td><td style="text-align: left;">确保回调函数在Java的主线程上执行。</td></tr><tr class="odd"><td style="text-align: left;"><code>Java.choose(className, callbacks)</code></td><td style="text-align: left;">在内存中扫描 Java 堆，枚举 Java 对象（className）实例。比如可以使用 <code>java.lang.String</code> 扫描内存中的字符串。callbacks 提供两个参数：<code>onMatch(instance)</code> 和 <code>onComplete</code>，分别是找到匹配对象和扫描完成调用。</td></tr><tr class="even"><td style="text-align: left;"><code>Java.cast(obj, cls)</code></td><td style="text-align: left;">将一个Java对象转换成另一个Java类的实例。</td></tr><tr class="odd"><td style="text-align: left;"><code>Java.enumerateLoadedClasses(callbacks)</code></td><td style="text-align: left;">枚举进程中已经加载的所有Java类。</td></tr><tr class="even"><td style="text-align: left;"><code>Java.enumerateClassLoaders(callbacks)</code></td><td style="text-align: left;">枚举进程中存在的所有Java类加载器。</td></tr><tr class="odd"><td style="text-align: left;"><code>Java.enumerateMethods(targetClassMethod)</code></td><td style="text-align: left;">枚举指定类的所有方法。</td></tr></tbody></table><h2 id="官方api">官方API</h2><p>[官方文档][https://frida.re/docs/javascript-api/]</p><p>这里列举几个：</p><h3 id="java.chooseclassname-callback">Java.choose(className, callback)</h3><p>在内存中扫描 Java 堆，枚举 Java 对象（className）实例。比如可以使用 java.lang.String 扫描内存中的字符串。callbacks 提供两个参数：onMatch(instance) 和 onComplete，分别是找到匹配对象和扫描完成调用。</p><p>例子可以看后面的主动调用部分</p><h3 id="java.scheduleonmainthreadfn">Java.scheduleOnMainThread(fn)</h3><p>在 VM 主线程（UI 线程）执行回调函数。Android 中操作 UI 元素需要在主线程中执行代码，scheduleOnMainThread 的作用就是用来在主线程中执行函数。此函数需要使用 Java.perform 包裹。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Toast</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;android.widget.Toast&quot;</span>);<br>    <span class="hljs-comment">// 获取 context</span><br><span class="hljs-keyword">var</span> currentApplication = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;android.app.ActivityThread&quot;</span>).<span class="hljs-title function_">currentApplication</span>();<br><span class="hljs-keyword">var</span> context = currentApplication.<span class="hljs-title function_">getApplicationContext</span>();<br><span class="hljs-comment">// 在主线程中运行回调</span><br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">scheduleOnMainThread</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title class_">Toast</span>.<span class="hljs-title function_">makeText</span>(context, <span class="hljs-string">&quot;Hello frida!&quot;</span>, <span class="hljs-title class_">Toast</span>.<span class="hljs-property">LENGTH_LONG</span>.<span class="hljs-property">value</span>).<span class="hljs-title function_">show</span>();<br>&#125;);<br>&#125;);<br><br></code></pre></td></tr></table></figure><h3 id="enumerateloadedclassescallbacks">enumerateLoadedClasses(callbacks)</h3><p>枚举当前已加载的类。callbacks 参数是一个对象，需要提供两个回调函数—— onMatch(className) 和 onComplete。每次找到一个类就会调用一次 onMatch，全部找完之后，调用 onComplete。</p><h2 id="日志输出">日志输出</h2><table><thead><tr class="header"><th style="text-align: left;">日志方法</th><th style="text-align: left;">描述</th><th style="text-align: left;">区别</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>console.log()</code></td><td style="text-align: left;">使用JavaScript直接进行日志打印</td><td style="text-align: left;">多用于在CLI模式中，<code>console.log()</code>直接输出到命令行界面，使用户可以实时查看。在RPC模式中，<code>console.log()</code>同样输出在命令行，但可能被Python脚本的输出内容掩盖。</td></tr><tr class="even"><td style="text-align: left;"><code>send()</code></td><td style="text-align: left;">Frida的专有方法，用于发送数据或日志到外部Python脚本</td><td style="text-align: left;">多用于RPC模式中，它允许JavaScript脚本发送数据到Python脚本，Python脚本可以进一步处理或记录这些数据。</td></tr></tbody></table><h2 id="来点栗子">来点栗子</h2><h3 id="简单模板">简单模板</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">hookTest1</span>();<br>    &#125;);<br>&#125;<br><span class="hljs-title function_">setImmediate</span>(main);<br></code></pre></td></tr></table></figure><h3 id="hook普通方法">1.Hook普通方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义一个名为hookTest1的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest1</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//获取一个名为&quot;类名&quot;的Java类，并将其实例赋值给JavaScript变量utils</span><br>    <span class="hljs-keyword">var</span> utils = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;类名&quot;</span>);<br>    <span class="hljs-comment">//修改&quot;类名&quot;的&quot;method&quot;方法的实现。这个新的实现会接收两个参数（a和b）</span><br>    utils.<span class="hljs-property">method</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>)&#123;<br>            <span class="hljs-comment">//将参数a和b的值改为123和456。</span><br>        a = <span class="hljs-number">123</span>;<br>        b = <span class="hljs-number">456</span>;<br>        <span class="hljs-comment">//调用修改过的&quot;method&quot;方法，并将返回值存储在`retval`变量中</span><br>        <span class="hljs-keyword">var</span> retval = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">method</span>(a, b);<br>        <span class="hljs-comment">//在控制台上打印参数a，b的值以及&quot;method&quot;方法的返回值</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b, retval);<br>        <span class="hljs-comment">//返回&quot;method&quot;方法的返回值</span><br>        <span class="hljs-keyword">return</span> retval;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hook重载参数">2.Hook重载参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// .overload()</span><br><span class="hljs-comment">// .overload(&#x27;自定义参数&#x27;)</span><br><span class="hljs-comment">// .overload(&#x27;int&#x27;)</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> utils = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>);<br>    <span class="hljs-comment">//overload定义重载函数，根据函数的参数类型填</span><br>    utils.<span class="hljs-property">Inner</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;com.zj.wuaipojie.Demo$Animal&#x27;</span>,<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">a，b</span>)&#123;<br>        b = <span class="hljs-string">&quot;aaaaaaaaaa&quot;</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">Inner</span>(a,b);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hook构造函数">3.Hook构造函数</h3><p>类的构造函数在frida中使用<code>$init</code>表示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest3</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> utils = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>);<br>    <span class="hljs-comment">//修改类的构造函数的实现，$init表示构造函数</span><br>    utils.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">str</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br>        str = <span class="hljs-string">&quot;52&quot;</span>;<br>        <span class="hljs-variable language_">this</span>.$init(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hook字段">4.Hook字段</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest5</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//静态字段的修改</span><br>        <span class="hljs-keyword">var</span> utils = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>);<br>        <span class="hljs-comment">//修改类的静态字段&quot;flag&quot;的值</span><br>        utils.<span class="hljs-property">staticField</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;我是被修改的静态变量&quot;</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(utils.<span class="hljs-property">staticField</span>.<span class="hljs-property">value</span>);<br>        <span class="hljs-comment">//非静态字段的修改</span><br>        <span class="hljs-comment">//使用`Java.choose()`枚举类的所有实例</span><br>        <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">choose</span>(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>, &#123;<br>            <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>)&#123;<br>                    <span class="hljs-comment">//修改实例的非静态字段&quot;_privateInt&quot;的值为&quot;123456&quot;，并修改非静态字段&quot;privateInt&quot;的值为9999。</span><br>                obj.<span class="hljs-property">_privateInt</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;123456&quot;</span>; <span class="hljs-comment">//字段名与函数名相同 前面加个下划线</span><br>                obj.<span class="hljs-property">privateInt</span>.<span class="hljs-property">value</span> = <span class="hljs-number">9999</span>;<br>            &#125;,<br>            <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>            &#125;<br>        &#125;);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hook内部类">5.Hook内部类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest6</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//内部类</span><br>        <span class="hljs-keyword">var</span> innerClass = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo$innerClass&quot;</span>);<br>        <span class="hljs-comment">//这里是类中类，用$连接。</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(innerClass);<br>        innerClass.<span class="hljs-property">$init</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;eeeeeeee&quot;</span>);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="枚举所有的类与类的所有方法">6.枚举所有的类与类的所有方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest7</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//枚举所有的类与类的所有方法,异步枚举</span><br>        <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">enumerateLoadedClasses</span>(&#123;<br>            <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">name,handle</span>)&#123;<br>                    <span class="hljs-comment">//过滤类名</span><br>                <span class="hljs-keyword">if</span>(name.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>) !=-<span class="hljs-number">1</span>)&#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<span class="hljs-comment">//类名</span><br>                    <span class="hljs-keyword">var</span> clazz =<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(name);<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(clazz);<br>                    <span class="hljs-keyword">var</span> methods = clazz.<span class="hljs-property">class</span>.<span class="hljs-title function_">getDeclaredMethods</span>();<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(methods);<span class="hljs-comment">//记录此类的所有方法</span><br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br>        &#125;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="枚举类的所有方法">7.枚举类的所有方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest8</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">Demo</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>);<br>        <span class="hljs-comment">//getDeclaredMethods枚举所有方法</span><br>        <span class="hljs-keyword">var</span> methods =<span class="hljs-title class_">Demo</span>.<span class="hljs-property">class</span>.<span class="hljs-title function_">getDeclaredMethods</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=<span class="hljs-number">0</span>; j &lt; methods.<span class="hljs-property">length</span>; j++)&#123;<br>            <span class="hljs-keyword">var</span> methodName = methods[j].<span class="hljs-title function_">getName</span>();<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(methodName);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> k=<span class="hljs-number">0</span>; k&lt;<span class="hljs-title class_">Demo</span>[methodName].<span class="hljs-property">overloads</span>.<span class="hljs-property">length</span>;k++)&#123;<br>                <span class="hljs-title class_">Demo</span>[methodName].<span class="hljs-property">overloads</span>[k].<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>;i++)&#123;<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>[i]);<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>[methodName].<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-variable language_">arguments</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="主动调用">8.主动调用</h3><p>对于静态方法和动态方法，动态方法需要这个实例有创建才能hook调用，静态则是已经存在的方法。</p><ul><li>静态方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">ClassName</span>=<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>); <br><span class="hljs-title class_">ClassName</span>.<span class="hljs-title function_">privateFunc</span>(<span class="hljs-string">&quot;传参&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>动态方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ret = <span class="hljs-literal">null</span>;<br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">choose</span>(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>,&#123;    <span class="hljs-comment">//要hook的类</span><br>        <span class="hljs-attr">onMatch</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">instance</span>)&#123;<span class="hljs-comment">//找到对应的类就会使用。</span><br>            ret=instance.<span class="hljs-title function_">privateFunc</span>(<span class="hljs-string">&quot;aaaaaaa&quot;</span>); <span class="hljs-comment">//要hook的方法</span><br>        &#125;,<br>        <span class="hljs-attr">onComplete</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-comment">//console.log(&quot;result: &quot; + ret);</span><br>        &#125;<br>    &#125;);<br>&#125;)<br><span class="hljs-comment">//return ret;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UML图六种箭头的含义</title>
    <link href="/2023/11/15/UML%E5%9B%BE%E5%85%AD%E7%A7%8D%E7%AE%AD%E5%A4%B4%E7%9A%84%E5%90%AB%E4%B9%89/"/>
    <url>/2023/11/15/UML%E5%9B%BE%E5%85%AD%E7%A7%8D%E7%AE%AD%E5%A4%B4%E7%9A%84%E5%90%AB%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<h1 id="泛化">泛化</h1><p><strong>概念：</strong>泛化是一种<strong>一般与特殊</strong>、<strong>一般与具体</strong>之间关系的描述，具体描述建立在一般描述的基础之上，并对其进行了扩展。在java中用来表示继承的关系。</p><p><strong>表示方法：</strong>用实线空心三角箭头表示。</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo220190207233944733.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h1 id="实现">实现</h1><p><strong>概念：</strong>实现是一种<strong>类与接口</strong>的关系，表示类是接口所有特征和行为的实现，在程序中一般通过类实现接口来描述</p><p><strong>表示方法：</strong>空心三角形箭头的虚线，实现类指向接口</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo220190207234002462.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h1 id="依赖">依赖</h1><p><strong>概念：</strong>是一种<strong>使用</strong>的关系，即一个类的实现需要另一个类的协助。</p><p>java中，方法参数需要传入另一个类的对象，就表示依赖这个类。</p><p><strong>表示方法</strong>：虚线箭头，类A指向类B。</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo220190207234015353.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h1 id="关联">关联</h1><p><strong>概念：</strong>表示类与类之间的联接,它使一个类知道另一个类的属性和方法，这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的。</p><p>java中一个类的全局变量引用了另一个类，就表示关联了这个类</p><p><strong>表示方法：</strong>实线箭头，类A指向类B</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo220190207234027556.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h1 id="聚合"><strong>聚合</strong></h1><p><strong>概念</strong>：聚合关联关系的一种特例，是强的关联关系。聚合是整体和个体之间的关系，即has-a的关系，整体与个体可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。程序中聚合和关联关系是一致的，只能从语义级别来区分；</p><p><strong>表示方法</strong>：尾部为空心菱形的实线箭头（也可以没箭头），类A指向类B</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo220190207234036928.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h1 id="组合">组合</h1><p><strong>概念</strong>：组合也是关联关系的一种特例。组合是一种整体与部分的关系，即contains-a的关系，比聚合更强。部分与整体的生命周期一致，整体的生命周期结束也就意味着部分的生命周期结束，组合关系不能共享。程序中组合和关联关系是一致的，只能从语义级别来区分。</p><p><strong>表示方法</strong>：尾部为实心菱形的实现箭头（也可以没箭头），类A指向类B</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo220190207234045776.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>UML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓那档事02</title>
    <link href="/2023/11/05/%E5%AE%89%E5%8D%93%E9%82%A3%E6%A1%A3%E4%BA%8B02/"/>
    <url>/2023/11/05/%E5%AE%89%E5%8D%93%E9%82%A3%E6%A1%A3%E4%BA%8B02/</url>
    
    <content type="html"><![CDATA[<h1 id="安卓四大组件">安卓四大组件</h1><table><thead><tr class="header"><th style="text-align: left;">组件</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">Activity(活动)</td><td style="text-align: left;">在应用中的一个Activity可以用来表示一个界面，意思可以理解为“活动”，即一个活动开始，代表 Activity组件启动，活动结束，代表一个Activity的生命周期结束。一个Android应用必须通过Activity来运行和启动，Activity的生命周期交给系统统一管理。</td></tr><tr class="even"><td style="text-align: left;">Service(服务)</td><td style="text-align: left;">Service它可以在后台执行长时间运行操作而没有用户界面的应用组件，不依赖任何用户界面，例如后台播放音乐，后台下载文件等。</td></tr><tr class="odd"><td style="text-align: left;">Broadcast Receiver(广播接收器)</td><td style="text-align: left;">一个用于接收广播信息，并做出对应处理的组件。比如我们常见的系统广播：通知时区改变、电量低、用户改变了语言选项等。</td></tr><tr class="even"><td style="text-align: left;">Content Provider(内容提供者)</td><td style="text-align: left;">作为应用程序之间唯一的共享数据的途径，Content Provider主要的功能就是存储并检索数据以及向其他应用程序提供访问数据的接口。Android内置的许多数据都是使用Content Provider形式，供开发者调用的（如视频，音频，图片，通讯录等）</td></tr></tbody></table><h2 id="activity的切换">activity的切换</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!---声明实现应用部分可视化界面的 Activity，必须使用 AndroidManifest 中的 &lt;activity&gt; 元素表示所有 Activity。系统不会识别和运行任何未进行声明的Activity。-----&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span>  </span><br><span class="hljs-tag">    <span class="hljs-attr">android:label</span>=<span class="hljs-string">&quot;@string/app_name&quot;</span>  </span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.zj.wuaipojie.ui.MainActivity&quot;</span>  </span><br><span class="hljs-tag">    <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--当前Activity是否可以被另一个Application的组件启动：true允许被启动；false不允许被启动--&gt;</span><br>    <span class="hljs-comment">&lt;!---指明这个activity可以以什么样的意图(intent)启动---&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span>  <br>        <span class="hljs-comment">&lt;!--表示activity作为一个什么动作启动，android.intent.action.MAIN表示作为主activity启动---&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span>  </span><br><span class="hljs-tag">            <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span>  <br>        <span class="hljs-comment">&lt;!--这是action元素的额外类别信息，android.intent.category.LAUNCHER表示这个activity为当前应用程序优先级最高的Activity--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span>  </span><br><span class="hljs-tag">            <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span>  </span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.zj.wuaipojie.ui.ChallengeFirst&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span>  </span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.zj.wuaipojie.ui.ChallengeFifth&quot;</span>  </span><br><span class="hljs-tag">    <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span>  </span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.zj.wuaipojie.ui.ChallengeFourth&quot;</span>  </span><br><span class="hljs-tag">    <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span>  </span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.zj.wuaipojie.ui.ChallengeThird&quot;</span>  </span><br><span class="hljs-tag">    <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span>  </span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.zj.wuaipojie.ui.ChallengeSecond&quot;</span>  </span><br><span class="hljs-tag">    <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span>  </span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.zj.wuaipojie.ui.AdActivity&quot;</span> /&gt;</span>  <br></code></pre></td></tr></table></figure><h2 id="activity的生命周期">activity的生命周期</h2><table><thead><tr class="header"><th style="text-align: left;">函数名称</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">onCreate()</td><td style="text-align: left;">一个Activity启动后第一个被调用的函数，常用来在此方法中进行Activity的一些初始化操作。例如创建View，绑定数据，注册监听，加载参数等。</td></tr><tr class="even"><td style="text-align: left;">onStart()</td><td style="text-align: left;">当Activity显示在屏幕上时，此方法被调用但此时还无法进行与用户的交互操作。</td></tr><tr class="odd"><td style="text-align: left;">onResume()</td><td style="text-align: left;">这个方法在onStart()之后调用，也就是在Activity准备好与用户进行交互的时候调用，此时的Activity一定位于Activity栈顶，处于运行状态。</td></tr><tr class="even"><td style="text-align: left;">onPause()</td><td style="text-align: left;">这个方法是在系统准备去启动或者恢复另外一个Activity的时候调用，通常在这个方法中执行一些释放资源的方法，以及保存一些关键数据。</td></tr><tr class="odd"><td style="text-align: left;">onStop()</td><td style="text-align: left;">这个方法是在Activity完全不可见的时候调用的。</td></tr><tr class="even"><td style="text-align: left;">onDestroy()</td><td style="text-align: left;">这个方法在Activity销毁之前调用，之后Activity的状态为销毁状态。</td></tr><tr class="odd"><td style="text-align: left;">onRestart()</td><td style="text-align: left;">当Activity从停止stop状态恢进入start状态时调用状态。</td></tr></tbody></table><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2105514fnc44338qubb43t3.png" alt="105514fnc44338qubb43t3" /><figcaption aria-hidden="true">105514fnc44338qubb43t3</figcaption></figure><h1 id="安卓动调">安卓动调</h1><h2 id="修改debug权限">修改debug权限</h2><h3 id="修改androidmanifest.xml">1、修改AndroidManifest.xml</h3><p>在AndroidManifest.xml添加可调试权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">android:debuggable=&quot;true&quot;<br></code></pre></td></tr></table></figure><h3 id="xappdebug模块hook对应的app">2、XappDebug模块hook对应的app</h3><p><a href="https://github.com/Palatis/XAppDebug">项目地址</a></p><h3 id="magisk命令重启失效">3、Magisk命令(重启失效)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">1. adb shell<br>2. su<br>3. magisk resetprop ro.debuggable 1<br>4. stop;start; #一定通过这个方法重启<br></code></pre></td></tr></table></figure><h3 id="刷入magiskhide-props-config模块永久有效但可能有的手机刷不上">4、刷入MagiskHide Props Config模块(永久有效，但可能有的手机刷不上)</h3><p>一般来说，在4选项中如果有ro.debuggable那就直接修改 没有的话就选5</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2105323jzffqjyzb6qyhfqc.png" alt="105323jzffqjyzb6qyhfqc" /><figcaption aria-hidden="true">105323jzffqjyzb6qyhfqc</figcaption></figure><h2 id="开启adb调试">开启adb调试</h2><p>安卓版本号点击七次开启开发者模式并开启adb调试权限</p><h2 id="jeb调试">Jeb调试</h2><p>注意，Jeb调试要保证调试机和宿主机两端apk一致</p><p>CTRL+B 是下断点</p><p>在高版本安卓(8.1以上)中，会看不到大部分的寄存器：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo21699197872060.png" alt="1699197872060" /><figcaption aria-hidden="true">1699197872060</figcaption></figure><p>像这里就只能进入到这个base64函数里面查看p1返回值寄存器了</p><h2 id="log插桩">Log插桩</h2><p>定义：Log插桩指的是反编译APK文件时，在对应的smali文件里，添加相应的smali代码，将程序中的关键信息，以log日志的形式进行输出。</p><p>插入如下命令即可</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">invoke-static &#123;对应寄存器&#125;, <span class="hljs-class">Lcom/mtools/LogUtils;</span>-&gt;v(<span class="hljs-class">Ljava/lang/Object;</span>)V<br></code></pre></td></tr></table></figure><p>将别人写的一个日志插桩的文件重命名为class2.dex，然后再插入命令即可。</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20231105233814345.png" alt="image-20231105233814345" /><figcaption aria-hidden="true">image-20231105233814345</figcaption></figure><p>最后使用工具（算法助手）捕获日志即可。</p><h2 id="frida完爆">frida完爆</h2><p>有一说一，这玩意一应该frida完爆吧。。。。</p><p>确实完爆，据某位不愿意透露姓名的安卓大神(已经给头像打码了)所说：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo21699199120877.png" alt="1699199120877" /><figcaption aria-hidden="true">1699199120877</figcaption></figure><p>应该能做到执行到某个地方返回寄存器的值，回头试一试。</p><hr /><p>2023/11/6 更新</p><p>中午试了试：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20231106142849488.png" alt="image-20231106142849488" /><figcaption aria-hidden="true">image-20231106142849488</figcaption></figure><p>分析知道是和最后的base64的返回值做比较，那就hook这个base64：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20231106142942681.png" alt="image-20231106142942681" /><figcaption aria-hidden="true">image-20231106142942681</figcaption></figure><p>发现是自己写的base64，那就简单好hook了，hook脚本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;1. start hook&quot;</span>);<br>    <span class="hljs-keyword">const</span> base64 = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.zj.wuaipojie.util.Base64Utils&quot;</span>);<br>    <span class="hljs-keyword">if</span>(base64 != <span class="hljs-literal">undefined</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;2. find class!&quot;</span>);<br>        base64.<span class="hljs-property">encodeToString</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">bArr</span>)&#123;<br>            <span class="hljs-keyword">var</span> res = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">encodeToString</span>(bArr);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;base64结果: &quot;</span>+res);<br><br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>hook结果：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20231106143130794.png" alt="image-20231106143130794" /><figcaption aria-hidden="true">image-20231106143130794</figcaption></figure><p>得到了base64。酷，这很符合我对frida的想像。</p><hr /><p>今天的安卓就学到这了（</p>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web编程笔记02</title>
    <link href="/2023/10/11/web%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B002/"/>
    <url>/2023/10/11/web%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B002/</url>
    
    <content type="html"><![CDATA[<h1 id="html结构">HTML结构</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="头部head">头部&lt;head&gt;</h2><p>页面标题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="元信息meta">元信息&lt;meta&gt;</h2><ul><li><p>位于文档的头部，其形式是“名称/值”(KV）对。</p><ul><li><p>META，元信息（meta-information），关于信息的信息。</p></li><li><p>如作者、日期、网页描述、关键词、页面刷新等，不显示在页面中。</p></li></ul></li><li><p>基本语法及分类 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;  &quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;  &quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;  &quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;  &quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></p></li><li><p>name属性用于描述网页内容，便于搜索引擎机器人查找、分类。其中最重要的是author、description、keywords、robots、generator等。</p></li><li><p>http-equiv属性用于提供HTTP协议的响应头报文，通常为网页加载前提供给浏览器使用。其中最重要的是content-type、charset、refresh、expires、set-cookie等。</p></li></ul><div class="note note-info">            <p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--H4得写这么长--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--H5可以简化为这个或不写，强制规则--&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> 这是页面标题，例如深圳大学 <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;关键字，搜索引擎经常使用的内容&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;还是搜索引擎经常需要利用的内容&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;copyright&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;具体内容。。。&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br></code></pre></td></tr></table></figure>          </div><p>还有其他属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;generator&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;信息参数&quot;</span> /&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;信息参数&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;robots&quot;</span> <span class="hljs-attr">contect</span>=<span class="hljs-string">&quot;信息参数&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;时间； url=网址参数&quot;</span>&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="http-equiv属性">http-equiv属性</h3><ul><li>expires</li></ul><p>缓存过期时间，如果过期，必须到服务器上重新下载。使用GMT（格林威治/格林尼治/Greenwich标准时间MeanTime；北京（东8）</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">”expires”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”Tue,</span> <span class="hljs-attr">14</span> <span class="hljs-attr">Sep</span> <span class="hljs-attr">2021</span> <span class="hljs-attr">14:30:00</span> <span class="hljs-attr">GMT</span>”&gt;</span><br></code></pre></td></tr></table></figure></p><ul><li><p>refresh</p><p>刷新or重定向</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http_equiv</span>=<span class="hljs-string">“refresh”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”5;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">https://azureussimu.github.io/”</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Web编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web编程笔记01</title>
    <link href="/2023/10/11/web%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B001/"/>
    <url>/2023/10/11/web%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B001/</url>
    
    <content type="html"><![CDATA[<h1 id="分数平定">分数平定</h1><ul><li>实验（40%）<ul><li>16个上机实验（31%）</li><li>3个实验报告（9%）</li></ul></li><li>期中随堂测试（10%）</li><li>期末随堂测试（10%）</li><li>大作业（40%）<ul><li>项目答辩（30%）<ul><li>团队成果（20%）</li><li>个人表现（10%）</li></ul></li><li>文档材料（10%）<ul><li>团队内容（5%）</li><li>个人内容（5%）</li></ul></li></ul></li></ul><h1 id="剩下的">剩下的</h1><p>没啥好说的，看ppt吧</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Web编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>frida指令</title>
    <link href="/2023/10/02/frida%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/10/02/frida%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="frida-相关参数">Frida 相关参数</h1><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">usage: frida [options] target<br><br>positional arguments:<br>  args                  extra arguments <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> target<br><br>options:<br>  -h, <span class="hljs-comment">--help            show this help message and exit</span><br>  -D ID, <span class="hljs-comment">--device ID    connect to device with the given ID</span><br>  -U, <span class="hljs-comment">--usb             connect to USB device</span><br>  -R, <span class="hljs-comment">--remote          connect to remote frida-server</span><br>  -H HOST, <span class="hljs-comment">--host HOST  connect to remote frida-server on HOST</span><br>  <span class="hljs-comment">--certificate CERTIFICATE</span><br>                        speak TLS <span class="hljs-keyword">with</span> HOST, expecting CERTIFICATE<br>  <span class="hljs-comment">--origin ORIGIN       connect to remote server with “Origin” header set to ORIGIN</span><br>  <span class="hljs-comment">--token TOKEN         authenticate with HOST using TOKEN</span><br>  <span class="hljs-comment">--keepalive-interval INTERVAL</span><br>                        <span class="hljs-built_in">set</span> keepalive interval <span class="hljs-keyword">in</span> <span class="hljs-built_in">seconds</span>, <span class="hljs-keyword">or</span> <span class="hljs-number">0</span> <span class="hljs-built_in">to</span> disable (defaults <span class="hljs-built_in">to</span> <span class="hljs-number">-1</span> <span class="hljs-built_in">to</span> auto-select based <span class="hljs-keyword">on</span><br>                        transport)<br>  <span class="hljs-comment">--p2p                 establish a peer-to-peer connection with target</span><br>  <span class="hljs-comment">--stun-server ADDRESS</span><br>                        <span class="hljs-built_in">set</span> STUN server ADDRESS <span class="hljs-built_in">to</span> use <span class="hljs-keyword">with</span> <span class="hljs-comment">--p2p</span><br>  <span class="hljs-comment">--relay address,username,password,turn-&#123;udp,tcp,tls&#125;</span><br>                        <span class="hljs-built_in">add</span> relay <span class="hljs-built_in">to</span> use <span class="hljs-keyword">with</span> <span class="hljs-comment">--p2p</span><br>  -f TARGET, <span class="hljs-comment">--file TARGET</span><br>                        spawn FILE<br>  -F, <span class="hljs-comment">--attach-frontmost</span><br>                        attach <span class="hljs-built_in">to</span> frontmost application<br>  -n NAME, <span class="hljs-comment">--attach-name NAME</span><br>                        attach <span class="hljs-built_in">to</span> NAME<br>  -N IDENTIFIER, <span class="hljs-comment">--attach-identifier IDENTIFIER</span><br>                        attach <span class="hljs-built_in">to</span> IDENTIFIER<br>  -p PID, <span class="hljs-comment">--attach-pid PID</span><br>                        attach <span class="hljs-built_in">to</span> PID<br>  -W PATTERN, <span class="hljs-comment">--await PATTERN</span><br>                        await spawn matching PATTERN<br>  <span class="hljs-comment">--stdio &#123;inherit,pipe&#125;</span><br>                        stdio behavior when spawning (defaults <span class="hljs-built_in">to</span> “inherit”)<br>  <span class="hljs-comment">--aux option          set aux option when spawning, such as “uid=(int)42” (supported types are: string, bool, int)</span><br>  <span class="hljs-comment">--realm &#123;native,emulated&#125;</span><br>                        realm <span class="hljs-built_in">to</span> attach <span class="hljs-keyword">in</span><br>  <span class="hljs-comment">--runtime &#123;qjs,v8&#125;    script runtime to use</span><br>  <span class="hljs-comment">--debug               enable the Node.js compatible script debugger</span><br>  <span class="hljs-comment">--squelch-crash       if enabled, will not dump crash report to console</span><br>  -O FILE, <span class="hljs-comment">--options-file FILE</span><br>                        <span class="hljs-keyword">text</span> <span class="hljs-built_in">file</span> containing additional <span class="hljs-keyword">command</span> <span class="hljs-title">line</span> <span class="hljs-title">options</span><br>  <span class="hljs-comment">--version             show program&#x27;s version number and exit</span><br>  -l SCRIPT, <span class="hljs-comment">--load SCRIPT</span><br>                        <span class="hljs-built_in">load</span> SCRIPT<br>  -P PARAMETERS_JSON, <span class="hljs-comment">--parameters PARAMETERS_JSON</span><br>                        parameters <span class="hljs-keyword">as</span> JSON, same <span class="hljs-keyword">as</span> Gadget<br>  -C USER_CMODULE, <span class="hljs-comment">--cmodule USER_CMODULE</span><br>                        <span class="hljs-built_in">load</span> CMODULE<br>  <span class="hljs-comment">--toolchain &#123;any,internal,external&#125;</span><br>                        CModule toolchain <span class="hljs-built_in">to</span> use when compiling <span class="hljs-built_in">from</span> source code<br>  -c CODESHARE_URI, <span class="hljs-comment">--codeshare CODESHARE_URI</span><br>                        <span class="hljs-built_in">load</span> CODESHARE_URI<br>  -e CODE, <span class="hljs-comment">--eval CODE  evaluate CODE</span><br>  -q                    quiet mode (no prompt) <span class="hljs-keyword">and</span> quit <span class="hljs-keyword">after</span> -l <span class="hljs-keyword">and</span> -e<br>  -t TIMEOUT, <span class="hljs-comment">--timeout TIMEOUT</span><br>                        <span class="hljs-built_in">seconds</span> <span class="hljs-built_in">to</span> <span class="hljs-built_in">wait</span> <span class="hljs-keyword">before</span> terminating <span class="hljs-keyword">in</span> quiet mode<br>  <span class="hljs-comment">--pause               leave main thread paused after spawning program</span><br>  -o LOGFILE, <span class="hljs-comment">--output LOGFILE</span><br>                        output <span class="hljs-built_in">to</span> <span class="hljs-built_in">log</span> <span class="hljs-built_in">file</span><br>  <span class="hljs-comment">--eternalize          eternalize the script before exit</span><br>  <span class="hljs-comment">--exit-on-error       exit with code 1 after encountering any exception in the SCRIPT</span><br>  <span class="hljs-comment">--kill-on-exit        kill the spawned program when Frida exits</span><br>  <span class="hljs-comment">--auto-perform        wrap entered code with Java.perform</span><br>  <span class="hljs-comment">--auto-reload         Enable auto reload of provided scripts and c module (on by default, will be required in the</span><br>                        future)<br>  <span class="hljs-comment">--no-auto-reload      Disable auto reload of provided scripts and c module</span><br></code></pre></td></tr></table></figure><p>翻译：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">-h, <span class="hljs-comment">--help 显示此帮助消息并退出</span><br>-D ID, <span class="hljs-comment">--device ID 连接到具有给定 ID 的设备</span><br>-U, <span class="hljs-comment">--usb 连接USB设备</span><br>-R, <span class="hljs-comment">--remote 连接到远程 frida-server</span><br>-H HOST, <span class="hljs-comment">--host HOST 连接到 HOST 上的远程 frida-server</span><br><span class="hljs-comment">--证书 证书</span><br>                      与主机进行 TLS 对话，期待证书<br><span class="hljs-comment">--origin ORIGIN 连接到远程服务器，并将“Origin”标头设置为 ORIGIN</span><br><span class="hljs-comment">--token TOKEN 使用 TOKEN 与 HOST 进行身份验证</span><br><span class="hljs-comment">--keepalive-interval 间隔</span><br>                      设置保持活动间隔（以秒为单位），或 <span class="hljs-number">0</span> 禁用（默认为 <span class="hljs-number">-1</span> 以根据<br>                      运输）<br><span class="hljs-comment">--p2p 与目标建立点对点连接</span><br><span class="hljs-comment">--stun-服务器地址</span><br>                      设置 STUN 服务器地址以与 <span class="hljs-comment">--p2p 一起使用</span><br><span class="hljs-comment">--中继地址,用户名,密码,转-&#123;udp,tcp,tls&#125;</span><br>                      添加中继以与 <span class="hljs-comment">--p2p 一起使用</span><br>-f 目标，<span class="hljs-comment">--文件目标</span><br>                      生成文件<br>-F, <span class="hljs-comment">--附加到最前面</span><br>                      附加到最前面的应用程序<br>-n 名称，<span class="hljs-comment">--附加名称 名称</span><br>                      附加到 <span class="hljs-type">NAME</span><br>-N 标识符, <span class="hljs-comment">--attach-identifier 标识符</span><br>                      附加到标识符<br>-p PID, <span class="hljs-comment">--attach-pid PID</span><br>                      附加到 PID<br>-W 模式，<span class="hljs-comment">--等待模式</span><br>                      等待生成匹配模式<br><span class="hljs-comment">--stdio &#123;继承，管道&#125;</span><br>                      生成时的 stdio 行为（默认为“继承”）<br><span class="hljs-comment">--aux option 设置生成时的辅助选项，例如“uid=(int)42”（支持的类型有：string、bool、int）</span><br><span class="hljs-comment">--realm &#123;本机，模拟&#125;</span><br>                      要附加的领域<br><span class="hljs-comment">--runtime &#123;qjs,v8&#125; 要使用的脚本运行时</span><br><span class="hljs-comment">--debug 启用 Node.js 兼容脚本调试器</span><br><span class="hljs-comment">--squelch-crash 如果启用，不会将崩溃报告转储到控制台</span><br>-O 文件，<span class="hljs-comment">--选项文件 文件</span><br>                      包含附加命令行选项的文本文件<br><span class="hljs-comment">--version 显示程序的版本号并退出</span><br>-l 脚本, <span class="hljs-comment">--加载脚本</span><br>                      加载脚本<br>-P PARAMETERS_JSON, <span class="hljs-comment">--parameters PARAMETERS_JSON</span><br>                      参数为<span class="hljs-type">JSON</span>，与Gadget相同<br>-C USER_CMODULE, <span class="hljs-comment">--cmodule USER_CMODULE</span><br>                      加载CMODULE<br><span class="hljs-comment">--工具链&#123;任何，内部，外部&#125;</span><br>                      从源代码编译时使用的 CModule 工具链<br>-c CODESHARE_URI, <span class="hljs-comment">--codeshare CODESHARE_URI</span><br>                      加载 CODESHARE_URI<br>-e 代码, <span class="hljs-comment">--eval 代码 评估代码</span><br>-q 安静模式（无提示）并在 -l 和 -e 之后退出<br>-t 超时, <span class="hljs-comment">--超时超时</span><br>                      以安静模式终止之前等待的秒数<br><span class="hljs-comment">--pause 在生成程序后让主线程暂停</span><br>-o 日志文件, <span class="hljs-comment">--输出日志文件</span><br>                      输出到日志文件<br><span class="hljs-comment">--eternalize 在退出前永久化脚本</span><br><span class="hljs-comment">--exit-on-error 在脚本中遇到任何异常后以代码 1 退出</span><br><span class="hljs-comment">--kill-on-exit 当 Frida 退出时杀死生成的程序</span><br><span class="hljs-comment">--auto-perform 使用 Java.perform 包装输入的代码</span><br><span class="hljs-comment">--auto-reload 启用所提供的脚本和 c 模块的自动重新加载（默认情况下，在</span><br>                      未来）<br><span class="hljs-comment">--no-auto-reload 禁用自动重新加载提供的脚本和 c 模块</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Andriod</tag>
      
      <tag>frida</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓那档事01</title>
    <link href="/2023/09/28/%E5%AE%89%E5%8D%93%E9%82%A3%E6%A1%A3%E4%BA%8B01/"/>
    <url>/2023/09/28/%E5%AE%89%E5%8D%93%E9%82%A3%E6%A1%A3%E4%BA%8B01/</url>
    
    <content type="html"><![CDATA[<h1 id="认识apk">认识APK</h1><p>apk，全称Android Package，相当于一个压缩文件，zip后缀和rar后缀都可以解压。</p><p>对于一个常见的apk，解压后可以看到：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230928215737448.png" alt="某游戏安装包解压" /><figcaption aria-hidden="true">某游戏安装包解压</figcaption></figure><table><thead><tr class="header"><th>目录/文件</th><th>注释</th></tr></thead><tbody><tr class="odd"><td>assets</td><td>里面存放的是apk的静态资源文件，比如视频，音频，图片等</td></tr><tr class="even"><td>lib</td><td>里面存放了不同框架下使用的so文件，文件是由c或cpp编译的动态链接库。<br />armeabi-v7a基本通用所有android设备，arm64-v8a只适用于64位的android设备，x86常见用于android模拟器</td></tr><tr class="odd"><td>META-INF</td><td>保存了签名信息的文件，一般主要用于验证apk完整性</td></tr><tr class="even"><td>res</td><td>存放资源文件，包括图片，字符串等等。apk的样子也一般由其中的layout文件设计。</td></tr><tr class="odd"><td>AndroidManifest.xml</td><td>APK的应用清单信息，它描述了应用的名字，版本，权限，引用的库文件等等信息</td></tr><tr class="even"><td>classes.dex</td><td>classes.dex是java源码编译后生成的java字节码文件，APK运行的主要逻辑</td></tr><tr class="odd"><td>resources.arsc</td><td>resources.arsc是编译后的二进制资源文件，它是一个映射表，映射着资源和id，通过R文件中的id就可以找到对应的资源</td></tr></tbody></table><div class="note note-info">            <p>像上图的kotlin文件夹，说明这个apk全部功能或者部分功能是由kotlin开发的。</p>          </div><h1 id="双开apk">双开APK</h1><p>双开：简单来说，就是手机同时运行两个或多个相同的应用，例如同时运行两个微信</p><table><thead><tr class="header"><th style="text-align: left;">原理</th><th style="text-align: left;">解释</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">修改包名</td><td style="text-align: left;">让手机系统认为这是2个APP，这样的话就能生成2个数据存储路径，此时的多开就等于你打开了两个互不干扰的APP</td></tr><tr class="even"><td style="text-align: left;">修改Framework</td><td style="text-align: left;">对于有系统修改权限的厂商，可以修改Framework来实现双开的目的，例如：小米自带多开</td></tr><tr class="odd"><td style="text-align: left;">通过虚拟化技术实现</td><td style="text-align: left;">虚拟Framework层、虚拟文件系统、模拟Android对组件的管理、虚拟应用进程管理 等一整套虚拟技术，将APK复制一份到虚拟空间中运行，例如：平行空间</td></tr><tr class="even"><td style="text-align: left;">以插件机制运行</td><td style="text-align: left;">利用反射替换，动态代{过}{滤}理，hook了系统的大部分与system—server进程通讯的函数，以此作为“欺上瞒下”的目的，欺骗系统“以为”只有一个apk在运行，瞒过插件让其“认为”自己已经安装。例如：VirtualApp</td></tr></tbody></table><h1 id="汉化apk">汉化APK</h1><p>汉化：使用专门的工具对外文版的软件资源进行读取、翻译、修改、回写等一系列处理，使软件的菜单、对话框、提示等用户界面显示为中文，而程序的内核和功能保持不变，这个过程即为软件汉化</p><p><strong>基本上字符串都是在arsc里，建议一键汉化，然后再润色。 少量没汉化到的字符串可以使用工具去定位去逐个汉化</strong></p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230928222406385.png" alt="逆向汉化流程" /><figcaption aria-hidden="true">逆向汉化流程</figcaption></figure><h1 id="初识androidmanifest.xml">初识AndroidManifest.xml</h1><p>AndroidManifest.xml文件是整个应用程序的信息描述文件，定义了应用程序中包含的Activity,Service,Content provider和BroadcastReceiver组件信息。</p><p>每个应用程序在根目录下必须包含一个AndroidManifest.xml文件，且文件名不能修改。它描述了package中暴露的组件，他们各自的实现类，各种能被处理的数据和启动位置。</p><table><thead><tr class="header"><th style="text-align: left;">属性</th><th style="text-align: left;">定义</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">versionCode</td><td style="text-align: left;">版本号，主要用来更新，例如:12</td></tr><tr class="even"><td style="text-align: left;">versionName</td><td style="text-align: left;">版本名，给用户看的，例如:1.2</td></tr><tr class="odd"><td style="text-align: left;">package</td><td style="text-align: left;">包名，例如：com.zj.52pj.demo</td></tr><tr class="even"><td style="text-align: left;">uses-permission android:name=""</td><td style="text-align: left;">应用权限，例如：android.permission.INTERNET 代表网络权限<br /><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230928224041944.png" alt="image-20230928224041944" /></td></tr><tr class="odd"><td style="text-align: left;">android:label="<span class="citation" data-cites="string/app_name">@string/app_name</span>"</td><td style="text-align: left;">应用名称</td></tr><tr class="even"><td style="text-align: left;">android:icon="<span class="citation" data-cites="mipmap/ic_launcher">@mipmap/ic_launcher</span>"</td><td style="text-align: left;">应用图标路径</td></tr><tr class="odd"><td style="text-align: left;">android:debuggable="true"</td><td style="text-align: left;">应用是否开启debug权限</td></tr></tbody></table><h1 id="了解jvmdalvikart">了解JVM、Dalvik、ART</h1><ul><li>JVM是JAVA虚拟机，运行JAVA字节码程序</li><li>Dalvik是Google专门为Android设计的一个虚拟机，Dalvik有专属的文件执行格式dex(Dalvik executable)</li><li>Art(Android Runtime)相当于Dalvik的升级版，本质与Dalvik无异</li></ul><h1 id="smali">smali</h1><p>smali是Dalvik的寄存器语言，smali代码是dex反编译而来的。</p><h2 id="关键字">关键字</h2><table><thead><tr class="header"><th style="text-align: left;">名称</th><th style="text-align: left;">注释</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">.class</td><td style="text-align: left;">类名</td></tr><tr class="even"><td style="text-align: left;">.super</td><td style="text-align: left;">父类名，继承的上级类名名称</td></tr><tr class="odd"><td style="text-align: left;">.source</td><td style="text-align: left;">源名</td></tr><tr class="even"><td style="text-align: left;">.field</td><td style="text-align: left;">变量</td></tr><tr class="odd"><td style="text-align: left;">.method</td><td style="text-align: left;">方法名</td></tr><tr class="even"><td style="text-align: left;">.register</td><td style="text-align: left;">寄存器</td></tr><tr class="odd"><td style="text-align: left;">.end method</td><td style="text-align: left;">方法名的结束</td></tr><tr class="even"><td style="text-align: left;">public</td><td style="text-align: left;">公有</td></tr><tr class="odd"><td style="text-align: left;">protected</td><td style="text-align: left;">半公开，只有同一家人才能用</td></tr><tr class="even"><td style="text-align: left;">private</td><td style="text-align: left;">私有，只能自己使用</td></tr><tr class="odd"><td style="text-align: left;">.parameter</td><td style="text-align: left;">方法参数</td></tr><tr class="even"><td style="text-align: left;">.prologue</td><td style="text-align: left;">方法开始</td></tr><tr class="odd"><td style="text-align: left;">.line xxx</td><td style="text-align: left;">位于第xxx行</td></tr></tbody></table><h2 id="数据类型对应">数据类型对应</h2><table><thead><tr class="header"><th style="text-align: left;">smali类型</th><th style="text-align: left;">java类型</th><th style="text-align: left;">注释</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">V</td><td style="text-align: left;">void</td><td style="text-align: left;">无返回值</td></tr><tr class="even"><td style="text-align: left;">Z</td><td style="text-align: left;">boolean</td><td style="text-align: left;">布尔值类型，返回0或1</td></tr><tr class="odd"><td style="text-align: left;">B</td><td style="text-align: left;">byte</td><td style="text-align: left;">字节类型，返回字节</td></tr><tr class="even"><td style="text-align: left;">S</td><td style="text-align: left;">short</td><td style="text-align: left;">短整数类型，返回数字</td></tr><tr class="odd"><td style="text-align: left;">C</td><td style="text-align: left;">char</td><td style="text-align: left;">字符类型，返回字符</td></tr><tr class="even"><td style="text-align: left;">I</td><td style="text-align: left;">int</td><td style="text-align: left;">整数类型，返回数字</td></tr><tr class="odd"><td style="text-align: left;">J</td><td style="text-align: left;">long （64位 需要2个寄存器存储）</td><td style="text-align: left;">长整数类型，返回数字</td></tr><tr class="even"><td style="text-align: left;">F</td><td style="text-align: left;">float</td><td style="text-align: left;">单浮点类型，返回数字</td></tr><tr class="odd"><td style="text-align: left;">D</td><td style="text-align: left;">double （64位 需要2个寄存器存储）</td><td style="text-align: left;">双浮点类型，返回数字</td></tr><tr class="even"><td style="text-align: left;">string</td><td style="text-align: left;">String</td><td style="text-align: left;">文本类型，返回字符串</td></tr><tr class="odd"><td style="text-align: left;">Lxxx/xxx/xxx</td><td style="text-align: left;">object</td><td style="text-align: left;">对象类型，返回对象</td></tr></tbody></table><h2 id="常用指令">常用指令</h2><table><thead><tr class="header"><th style="text-align: left;">关键字</th><th style="text-align: left;">注释</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">const</td><td style="text-align: left;">重写整数属性，真假属性内容，只能是数字类型</td></tr><tr class="even"><td style="text-align: left;">const-string</td><td style="text-align: left;">重写字符串内容</td></tr><tr class="odd"><td style="text-align: left;">const-wide</td><td style="text-align: left;">重写长整数类型，多用于修改到期时间。</td></tr><tr class="even"><td style="text-align: left;">return</td><td style="text-align: left;">返回指令</td></tr><tr class="odd"><td style="text-align: left;">if-eq</td><td style="text-align: left;">全称equal(a=b)，比较寄存器ab内容，相同则跳</td></tr><tr class="even"><td style="text-align: left;">if-ne</td><td style="text-align: left;">全称not equal(a!=b)，ab内容不相同则跳</td></tr><tr class="odd"><td style="text-align: left;">if-eqz</td><td style="text-align: left;">全称equal zero(a=0)，z即是0的标记，a等于0则跳</td></tr><tr class="even"><td style="text-align: left;">if-nez</td><td style="text-align: left;">全称not equal zero(a!=0)，a不等于0则跳</td></tr><tr class="odd"><td style="text-align: left;">if-ge</td><td style="text-align: left;">全称greater equal(a&gt;=b)，a大于或等于则跳</td></tr><tr class="even"><td style="text-align: left;">if-le</td><td style="text-align: left;">全称little equal(a&lt;=b)，a小于或等于则跳</td></tr><tr class="odd"><td style="text-align: left;">goto</td><td style="text-align: left;">强制跳到指定位置</td></tr><tr class="even"><td style="text-align: left;">switch</td><td style="text-align: left;">分支跳转，一般会有多个分支线，并根据指令跳转到适当位置</td></tr><tr class="odd"><td style="text-align: left;">iget</td><td style="text-align: left;">获取寄存器数据</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 说明了方法是私有的，静态的，不可变的 还有对应的参数的类型，最后的z是boolean的返回值的代表</span><br>.method <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> onCreate$lambda-<span class="hljs-number">2</span>(Lkotlin/jvm/internal/Ref$IntRef;Lcom/zj/wuaipojie/ui/ChallengeSecond;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/view/View;)Z<br>    .registers <span class="hljs-number">7</span>    <span class="hljs-comment">// 寄存器格式，若在修改代码使用了更多的寄存器，这里的寄存器数量要大于函数中总的使用数量</span><br><br>                              .line <span class="hljs-number">33</span>  <span class="hljs-comment">// 代码所在的行数.</span><br>    00390374: <span class="hljs-number">5211</span> ee97               <span class="hljs-number">0000</span>: iget                v1, v1, Lkotlin/jvm/internal/Ref$IntRef;-&gt;element:I # field@97ee<br>                                        <span class="hljs-comment">// 读取v1(第一个参数，参考寄存器知识)中element的值赋值给v1.</span><br>    00390378: <span class="hljs-number">1216</span>                    <span class="hljs-number">0002</span>: const/<span class="hljs-number">4</span>             v6, <span class="hljs-number">0x1</span><br>                                        <span class="hljs-comment">// 赋值0x1给v6寄存器</span><br>    0039037a: <span class="hljs-number">1300</span> 0a00               <span class="hljs-number">0003</span>: const/<span class="hljs-number">16</span>            v0, <span class="hljs-number">0xa</span><br>    0039037e: <span class="hljs-number">3501</span> <span class="hljs-number">1000</span>               <span class="hljs-number">0005</span>: <span class="hljs-keyword">if</span>-ge               v1, v0, :cond_0015<br>                                        <span class="hljs-comment">// 判断v1是否大于或等于v0的值，若是，则跳转到 cond_0015 .</span><br>                              .line <span class="hljs-number">34</span><br>    00390382: <span class="hljs-number">0721</span>                    <span class="hljs-number">0007</span>: move-object         v1, v2<br>                                        <span class="hljs-comment">// mov</span><br>    00390384: 1f01 <span class="hljs-number">6300</span>               0008: check-cast          v1, Landroid/content/Context; # type@<span class="hljs-number">0063</span><br>                                        <span class="hljs-comment">// 检查Context对象引用.</span><br>    00390388: 1a00 09ed               000a: const-string        v0, <span class="hljs-string">&quot;请先获取10个硬币哦&quot;</span> # string<span class="hljs-meta">@ed09</span><br>                                        弹窗文本信息，把<span class="hljs-string">&quot;&quot;</span>里的字符串数据赋值给v0<br>    0039038c: 1f00 e514               000c: check-cast          v0, Ljava/lang/CharSequence; # type@<span class="hljs-number">14e5</span><br><br>    00390390: <span class="hljs-number">7130</span> ae11 <span class="hljs-number">0106</span>          000e: invoke-<span class="hljs-keyword">static</span>       &#123;v1, v0, v6&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;, Ljava/lang/CharSequence;, I)Landroid/widget/Toast; # method@11ae<br>                                        <span class="hljs-comment">// 以&#123;v1, v0, v6&#125;为参数，调用静态方法</span><br>    00390396: 0c01                    <span class="hljs-number">0011</span>: move-result-object  v1<br>                                        <span class="hljs-comment">// 结果传回给v1</span><br>    00390398: <span class="hljs-number">6e10</span> af11 <span class="hljs-number">0100</span>          <span class="hljs-number">0012</span>: invoke-virtual      &#123;v1&#125;, Landroid/widget/Toast;-&gt;show()V # method@11af<br>                                        <span class="hljs-comment">//调用方法.</span><br>                              .line <span class="hljs-number">36</span><br>                            cond_0015:<br>    0039039e: <span class="hljs-number">6e10</span> c39c <span class="hljs-number">0200</span>          <span class="hljs-number">0015</span>: invoke-virtual      &#123;v2&#125;, Lcom/zj/wuaipojie/ui/ChallengeSecond;-&gt;isvip()Z # method@9cc3<br>    003903a4: 0a01                    0018: move-result         v1<br>    003903a6: <span class="hljs-number">3801</span> 2a00               0019: <span class="hljs-keyword">if</span>-eqz              v1, :cond_0043<br>                              .line <span class="hljs-number">37</span><br>    003903aa: 1f02 <span class="hljs-number">6300</span>               001b: check-cast          v2, Landroid/content/Context; # type@<span class="hljs-number">0063</span><br>    003903ae: 1a01 00ed               <span class="hljs-number">001d</span>: const-string        v1, <span class="hljs-string">&quot;当前已经是大会员了哦！&quot;</span> # string<span class="hljs-meta">@ed00</span><br>    003903b2: 1f01 e514               <span class="hljs-number">001f</span>: check-cast          v1, Ljava/lang/CharSequence; # type@<span class="hljs-number">14e5</span><br>    003903b6: <span class="hljs-number">7130</span> ae11 <span class="hljs-number">1206</span>          <span class="hljs-number">0021</span>: invoke-<span class="hljs-keyword">static</span>       &#123;v2, v1, v6&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;, Ljava/lang/CharSequence;, I)Landroid/widget/Toast; # method@11ae<br>    003903bc: 0c01                    <span class="hljs-number">0024</span>: move-result-object  v1<br>    003903be: <span class="hljs-number">6e10</span> af11 <span class="hljs-number">0100</span>          <span class="hljs-number">0025</span>: invoke-virtual      &#123;v1&#125;, Landroid/widget/Toast;-&gt;show()V # method@11af<br>    003903c4: <span class="hljs-number">1401</span> <span class="hljs-number">1800</span> 0d7f          0028: const               v1, <span class="hljs-number">0x7f0d0018</span><br>                              .line <span class="hljs-number">38</span><br>    003903ca: <span class="hljs-number">6e20</span> e10f <span class="hljs-number">1300</span>          002b: invoke-virtual      &#123;v3, v1&#125;, Landroid/widget/ImageView;-&gt;setImageResource(I)V # method@0fe1<br>    003903d0: <span class="hljs-number">1401</span> 0800 0d7f          002e: const               v1, <span class="hljs-number">0x7f0d0008</span><br>                              .line <span class="hljs-number">39</span><br>    003903d6: <span class="hljs-number">6e20</span> e10f <span class="hljs-number">1400</span>          <span class="hljs-number">0031</span>: invoke-virtual      &#123;v4, v1&#125;, Landroid/widget/ImageView;-&gt;setImageResource(I)V # method@0fe1<br>    003903dc: <span class="hljs-number">1401</span> 0a00 0d7f          <span class="hljs-number">0034</span>: const               v1, <span class="hljs-number">0x7f0d000a</span><br>                              .line <span class="hljs-number">40</span><br>    <span class="hljs-number">003903e2</span>: <span class="hljs-number">6e20</span> e10f <span class="hljs-number">1500</span>          <span class="hljs-number">0037</span>: invoke-virtual      &#123;v5, v1&#125;, Landroid/widget/ImageView;-&gt;setImageResource(I)V # method@0fe1<br>                              .line <span class="hljs-number">41</span><br>    <span class="hljs-number">003903e8</span>: <span class="hljs-number">6201</span> 7d95               003a: sget-object         v1, Lcom/zj/wuaipojie/util/SPUtils;-&gt;INSTANCE:Lcom/zj/wuaipojie/util/SPUtils; # field@<span class="hljs-number">957d</span><br>    003903ec: <span class="hljs-number">1223</span>                    003c: const/<span class="hljs-number">4</span>             v3, <span class="hljs-number">0x2</span><br>    003903ee: 1a04 3db1               <span class="hljs-number">003d</span>: const-string        v4, <span class="hljs-string">&quot;level&quot;</span> # string<span class="hljs-meta">@b13d</span><br>    003903f2: <span class="hljs-number">6e40</span> <span class="hljs-number">499d</span> <span class="hljs-number">2134</span>          <span class="hljs-number">003f</span>: invoke-virtual      &#123;v1, v2, v4, v3&#125;, Lcom/zj/wuaipojie/util/SPUtils;-&gt;saveInt(Landroid/content/Context;, Ljava/lang/String;, I)V # method@9d49<br>    003903f8: 280e                    <span class="hljs-number">0042</span>: goto                :goto_0050<br>                              .line <span class="hljs-number">44</span><br>                            cond_0043:<br>    003903fa: 1f02 <span class="hljs-number">6300</span>               <span class="hljs-number">0043</span>: check-cast          v2, Landroid/content/Context; # type@<span class="hljs-number">0063</span><br>    003903fe: 1a01 07ed               <span class="hljs-number">0045</span>: const-string        v1, <span class="hljs-string">&quot;请先充值大会员哦！&quot;</span> # string<span class="hljs-meta">@ed07</span><br>    00390402: 1f01 e514               <span class="hljs-number">0047</span>: check-cast          v1, Ljava/lang/CharSequence; # type@<span class="hljs-number">14e5</span><br>    00390406: <span class="hljs-number">7130</span> ae11 <span class="hljs-number">1206</span>          0049: invoke-<span class="hljs-keyword">static</span>       &#123;v2, v1, v6&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;, Ljava/lang/CharSequence;, I)Landroid/widget/Toast; # method@11ae<br>    0039040c: 0c01                    004c: move-result-object  v1<br>    0039040e: <span class="hljs-number">6e10</span> af11 <span class="hljs-number">0100</span>          <span class="hljs-number">004d</span>: invoke-virtual      &#123;v1&#125;, Landroid/widget/Toast;-&gt;show()V # method@11af<br>                            goto_0050:<br>    00390414: 0f06                    <span class="hljs-number">0050</span>: <span class="hljs-keyword">return</span>              v6<br>    <br>.end method<br><br></code></pre></td></tr></table></figure><p>简单跟着吾爱作者分析了一下。</p><h2 id="寄存器">寄存器</h2><p>在smali里的所有操作都必须经过寄存器来进行:本地寄存器用v开头数字结尾的符号来表示，如v0、 v1、v2。 参数寄存器则使用p开头数字结尾的符号来表示，如p0、p1、p2。特别注意的是，p0不一定是函数中的第一个参数，在非static函数中，p0代指“this"，p1表示函数的第一个 参数，p2代表函数中的第二个参数。而在static函数中p0才对应第一个参数(因为Java的static方法中没有this方法）</p><hr /><p>学习链接:</p><p>https://www.52pojie.cn/thread-1695796-1-1.html</p><p>https://www.52pojie.cn/thread-1701353-1-1.html</p>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NewStar2023-lazyActivity</title>
    <link href="/2023/09/25/NewStar2023-lazyActivity/"/>
    <url>/2023/09/25/NewStar2023-lazyActivity/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>唉，去年的题，去年做法倒是蛮简单的，今年会了很多，记录一下。</p><h1 id="最简单的方法">最简单的方法</h1><p>搜flag就行，能在资源部分找到：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230925191914791.png" alt="image-20230925191914791" /><figcaption aria-hidden="true">image-20230925191914791</figcaption></figure><h1 id="自己整的">自己整的</h1><p>观察整个用户代码：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230925192040142.png" alt="image-20230925192040142" /><figcaption aria-hidden="true">image-20230925192040142</figcaption></figure><p>结合实机使用：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230925192407500.png" alt="image-20230925192407500" /><figcaption aria-hidden="true">image-20230925192407500</figcaption></figure><p>不难猜测FlagActivity是真正的出flag：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230925192533275.png" alt="Class FlagActivity" /><figcaption aria-hidden="true">Class FlagActivity</figcaption></figure><p>实际上安卓在启动时候会根据自身的一个XML资源文件从而选择启动的Activity：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230925192802076.png" alt="image-20230925192802076" /><figcaption aria-hidden="true">image-20230925192802076</figcaption></figure><p>实际上，我们可以在安卓的shell中以管理员的身份执行以下命令，从而指定Activity：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">am start -n com.example.app/com.example.app.MainActivity<br></code></pre></td></tr></table></figure><h2 id="重打包">重打包</h2><p>可以通过apktool来将安装包来反编译，来修改这个XML：</p><p>修改完了再使用apktool在编译，但是编译的结果是没有签名文件的，安卓系统对于应用文件需要签名后才能进行安装，使用apk ez tool(是一个可视化工具)来进行方便快捷的签名，根据没有眼的鱼说，这样签名是属于二类签名，用java自带的签名是属于一类签名，现在的安卓系统可能会不怎么承认。</p><h2 id="frida-hook">Frida Hook</h2><p>分析具体的类：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230925192533275.png" alt="Class FlagActivity" /><figcaption aria-hidden="true">Class FlagActivity</figcaption></figure><p>对于静态方法，不太好hook，可以考虑从<code>onCreate()</code>下手：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230925193455803.png" alt="hook js" /><figcaption aria-hidden="true">hook js</figcaption></figure><p>这样hook，实际运行结果就是照样进行界面的生成：</p><p>然后再把类的cnt的值进行修改：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230925193636566.png" alt="hook结果" /><figcaption aria-hidden="true">hook结果</figcaption></figure><p>结合<code>access$004()</code>这个方法每次点击会自增1，从而达到(9999+1)&gt;=1w这个目标，整个hook过程就结束了。</p><h2 id="另一种hook">另一种hook</h2><p>针对<code>access$004()</code>这个方法进行hook，一种hook是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 在这定义一个const声明的变量，保存要hook的类</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">MainActivity</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;com.droidlearn.activity_travel.FlagActivity&#x27;</span>);<br>  <br>    <span class="hljs-comment">// 一个常量，记录触发的方法</span><br>    <span class="hljs-keyword">const</span> onCreate = <span class="hljs-title class_">MainActivity</span>.<span class="hljs-property">access$004</span>;<br>    <span class="hljs-comment">// send(&#x27;sucess get onClick&#x27;)</span><br>    <span class="hljs-comment">//重载onClick方法</span><br>    onCreate.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">v</span>) &#123;<br>      <span class="hljs-comment">// Show a message to know that the function got called</span><br>      <span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;access$004 called&#x27;</span>);<br>      onCreate.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, v);<br>      v.<span class="hljs-property">cnt</span>.<span class="hljs-property">value</span> += <span class="hljs-number">9999</span>;<br>      <span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;value change&#x27;</span>)<br>  <br>      <span class="hljs-comment">// Log to the console that it&#x27;s done, and we should have the flag!</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Done:&#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(v.<span class="hljs-property">cnt</span>));<br>      <span class="hljs-keyword">return</span> v.<span class="hljs-property">cnt</span>.<span class="hljs-property">value</span>;<br>    &#125;;<br>  &#125;);<br><br><br></code></pre></td></tr></table></figure><p>另一种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">funtion <span class="hljs-title function_">hook</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 在这定义一个const声明的变量，保存要hook的类</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">MainActivity</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;com.droidlearn.activity_travel.FlagActivity&#x27;</span>);<br>    <span class="hljs-title class_">MainActivity</span>.<span class="hljs-property">access$004</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;com.droidlearn.activity_travel.FlagActivity&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fa</span>)&#123;<br>      <span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;access$004 called&#x27;</span>);<br>      fa.<span class="hljs-property">cnt</span>.<span class="hljs-property">value</span> += <span class="hljs-number">10000</span>;<br>      <span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;value change&#x27;</span>);<br>      <span class="hljs-keyword">return</span> fa.<span class="hljs-property">cnt</span>.<span class="hljs-property">value</span>;<br>    &#125;<br>&#125;<br><span class="hljs-title function_">setImmediate</span>(hook)<br><br></code></pre></td></tr></table></figure><h2 id="重打包的方法">重打包的方法</h2><p>既然都重打包了，那可以考虑直接将这个&gt;=10000修改成&gt;=0，然后重打包，就不用hook了。</p>]]></content>
    
    
    <categories>
      
      <category>Re学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>z3-solver</title>
    <link href="/2023/08/16/z3-solver/"/>
    <url>/2023/08/16/z3-solver/</url>
    
    <content type="html"><![CDATA[<p>就记录个z3顺序输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>s = Solver()<br>flag = [BitVec(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i), <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">23</span>)]<br><br><span class="hljs-keyword">if</span> s.check() == sat:<br>    m = s.model()<br>    result = [<span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(m[each]), <span class="hljs-number">10</span>) <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> flag]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(result))<br><br></code></pre></td></tr></table></figure><p>BitVec类型不能直接转int，但是可以通过转str再转int。。。。。</p><p>真sb</p>]]></content>
    
    
    <categories>
      
      <category>语言知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUU2023-07</title>
    <link href="/2023/08/04/BUU2023-07/"/>
    <url>/2023/08/04/BUU2023-07/</url>
    
    <content type="html"><![CDATA[<p>笑死，除了比赛，buu真没动多少:smile:</p><h1 id="suctf2019hardcpp">[SUCTF2019]hardcpp</h1><p>这题不难，耐心分析一下就行，就只用一个坑点：</p><p>首先是用了llvm混淆，这个没啥，用d810插件一下就去掉了：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230801121543617.png" alt="image-20230801121543617" /><figcaption aria-hidden="true">image-20230801121543617</figcaption></figure><p>就很清晰的分析了。</p><p>加密就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">enc[i] == ((flag[i+<span class="hljs-number">1</span>] + flag[i] % <span class="hljs-number">7</span>) ^ ((flag[i] ^ <span class="hljs-number">18</span>) * <span class="hljs-number">3</span> + <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>就是拿前面的数据加密后面的数据</p><p>坑点：</p><p>注意s和input在栈上的位置，所有这里的调用一个是input[i-1]，一个是input[i-2]。</p><p>脚本爆破，居然有数值爆了，注意and 0xff：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = [<span class="hljs-number">0xF3</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x8C</span>,<br>       <span class="hljs-number">0x40</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xA5</span>]<br><br><span class="hljs-comment"># enc[i] = (flag[i] + flag[i - 1] % 7) ^ ((flag[i - 1] ^ 18) * 3 + 2)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>): <span class="hljs-comment">#爆破第一位</span><br>    <span class="hljs-keyword">if</span> enc[<span class="hljs-number">0</span>] == (<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;f&#x27;</span>) + i % <span class="hljs-number">7</span>) ^ ((i ^ <span class="hljs-number">18</span>) * <span class="hljs-number">3</span> + <span class="hljs-number">2</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag = &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">chr</span>(i)))<br><span class="hljs-built_in">print</span>()<br>flag = [<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;#&#x27;</span>)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>):<br><br>        <span class="hljs-keyword">if</span> enc[i] == ((ch + flag[i] % <span class="hljs-number">7</span>) ^ ((flag[i] ^ <span class="hljs-number">18</span>) * <span class="hljs-number">3</span> + <span class="hljs-number">2</span>)) &amp; <span class="hljs-number">0xff</span>:<br>            flag.append(ch)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(flag))<br></code></pre></td></tr></table></figure><h1 id="dig-the-way">Dig the way</h1><p>这道题目考的是栈溢出，先分析程序：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230802121337044.png" alt="image-20230802121337044" /><figcaption aria-hidden="true">image-20230802121337044</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230802121324412.png" alt="image-20230802121324412" /><figcaption aria-hidden="true">image-20230802121324412</figcaption></figure><p>在开头给函数地址赋值，到后面进行使用，不难发现fun2的返回值是恒大于等于2的，此时v5的值是3，根据堆栈来看，v7[3] -&gt; v8，所以正常运行这个程序是不可能到达getkey处。</p><p>但是发现了个可以无限读取的地方：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-type">int</span>)v13; ++i )&#123;<br>  v4 = i;<br>  Str[v4] = fgetc(v14);<br>&#125;<br></code></pre></td></tr></table></figure><p>一看Str的位置，在栈上，这意味着可以实现栈溢出。</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230802143648170.png" alt="image-20230802143648170" /><figcaption aria-hidden="true">image-20230802143648170</figcaption></figure><p>分析三个fun，发现是将数值交换和两个计算：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230802143737098.png" alt="image-20230802143737098" /><figcaption aria-hidden="true">image-20230802143737098</figcaption></figure><p>虽然fun2不能返回0的值，但是fun1可以做到：</p><div class="note note-light">            <p>|-1 + 2| - |2| - |-1| + 2 = 0</p>          </div><p>由于存在栈溢出，而且v9，v10这两个参数在读取前面就实现了赋值，于是可以栈溢出输入参数，利用fun0将v7后面任意两个数据转换位置，所以可以让fun1最后执行，这样结果能够返回0然后写入到v8(v7[3])。</p><p>然后就是造v7的数据使得最后的计算结果为0：</p><div class="note note-light">            <p>|0 + 0| - |0| - |0| + 2 = 2</p><p>|-1 + 2| - |2| - |-1| + 2 = 0</p>          </div><p>所以v7[4]的数据为：</p><div class="note note-info">            <p>[任意dw大小数据, 0, 0, -1]</p>          </div><p>为了使得先执行fun2在执行fun1，fun0的参数很简单，一个7(fun1)，一个8(fun2)，在制造数据的时候注意一下大小端序就行。</p><p>v11就不可以动了，这里保存了关键的fun函数位置。</p><p>剩下的随意填充：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230802144949663.png" alt="image-20230802144949663" /><figcaption aria-hidden="true">image-20230802144949663</figcaption></figure><div class="note note-success">            <p>如果使用栈溢出强行从main返回到getkey，那就记得多把两个参数压一下，v13是0，v12是8</p><p>不过都知道是这两个数了，前面也会了，这两参数是解密用的。</p>          </div><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230802145655531.png" alt="image-20230802145655531" /><figcaption aria-hidden="true">image-20230802145655531</figcaption></figure><h1 id="mrctf2020shit">[MRCTF2020]Shit</h1><p>这题居然给了源码，一定程度上教了我花指令怎么写的，涉及的花指令见<a href="https://azureussimu.github.io/2023/08/03/%E8%8A%B1%E6%8C%87%E4%BB%A4/">这篇文章</a></p><p>去完花分析即可：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230803183036711.png" alt="image-20230803183036711" /><figcaption aria-hidden="true">image-20230803183036711</figcaption></figure><p>上图我patch过反动调的检查。</p><p>24位输入，然后进行简单的移位异或</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230803183205157.png" alt="image-20230803183205157" /><figcaption aria-hidden="true">image-20230803183205157</figcaption></figure><p>key由前面产生。</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230803183302848.png" alt="image-20230803183302848" /><figcaption aria-hidden="true">image-20230803183302848</figcaption></figure><p>有个这个神奇的函数：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230803183240934.png" alt="image-20230803183240934" /><figcaption aria-hidden="true">image-20230803183240934</figcaption></figure><p>不知道有什么用。。</p><p>对dword_FC5030进行了--，这个函数是必执行的？</p><p>最后key是动调过的，在start前面有个初始化的函数</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230804104330295.png" alt="image-20230804104330295" /><figcaption aria-hidden="true">image-20230804104330295</figcaption></figure><p>如果在这里之前就动调了，就会在initterm这个函数里面无限循环，只能通过attach的方法来进行动调</p><p>查明了，里面写了个无限递归的，检测到动调就进行无限递归，用全局变量复制调用的</p><p>​</p><p>然后记得绕一下反动调就能得到key，写个解密就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">key = [<span class="hljs-number">3</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xD</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xB</span>]<br>enc = [<span class="hljs-number">0x8C2C133A</span>, <span class="hljs-number">0xF74CB3F6</span>, <span class="hljs-number">0xFEDFA6F2</span>, <span class="hljs-number">0xAB293E3B</span>, <span class="hljs-number">0x26CF8A2A</span>, <span class="hljs-number">0x88A1F279</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>    enc[i] ^= enc[i - <span class="hljs-number">1</span>]<br>    enc[i] &amp;= <span class="hljs-number">0xffffffff</span><br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    enc[i] ^= (<span class="hljs-number">1</span> &lt;&lt; key[i])<br>    low = ((enc[i] &amp; <span class="hljs-number">0xffff0000</span>) &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xffff</span><br>    high = (~(enc[i] &amp; <span class="hljs-number">0x0000ffff</span>) &amp; <span class="hljs-number">0xffff</span>) &lt;&lt; <span class="hljs-number">16</span><br>    enc[i] = (high | low) &amp; <span class="hljs-number">0xffffffff</span><br>    enc[i] = ((enc[i] &lt;&lt; key[i]) &amp; <span class="hljs-number">0xffffffff</span>) | (enc[i] &gt;&gt; (<span class="hljs-number">32</span> - key[i]))<br>    res = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        res = <span class="hljs-built_in">chr</span>(enc[i] &amp; <span class="hljs-number">0xff</span>) + res<br>        enc[i] &gt;&gt;= <span class="hljs-number">8</span><br>    flag += res<br><span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF write up</category>
      
      <category>buu刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win应用层反调试</title>
    <link href="/2023/08/04/win%E5%BA%94%E7%94%A8%E5%B1%82%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    <url>/2023/08/04/win%E5%BA%94%E7%94%A8%E5%B1%82%E5%8F%8D%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="x01-peb相关标志位反调试">0x01 PEB相关标志位反调试</h1><p>简单的获取当前进程的PEB结构体地址的方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _WIN64</span><br>PPEB pPeb = (PPEB)__readfsdword(<span class="hljs-number">0x30</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>PPEB pPeb = (PPEB)__readgsqword(<span class="hljs-number">0x60</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// _WIN64</span></span><br></code></pre></td></tr></table></figure><h2 id="isdebuggerpresent">1.1 IsDebuggerPresent</h2><p>底层原理就是返回PEB结构中BeingDebugged位的值，当有调试器附加的时候BeingDebugged位被置为1。</p><h2 id="ntglobalflag">1.2 NtGlobalFlag</h2><p>附加一个调试器并不改变NtGlobalFlag的值。但是如果进程是由调试器创建的，则将设置以下标志：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">FLG_HEAP_ENABLE_TAIL_CHECK</span> (<span class="hljs-number">0</span>x10)<br><span class="hljs-attribute">FLG_HEAP_ENABLE_FREE_CHECK</span> (<span class="hljs-number">0</span>x20)<br><span class="hljs-attribute">FLG_HEAP_VALIDATE_PARAMETERS</span> (<span class="hljs-number">0</span>x40)<br><br><span class="hljs-attribute">NtGlobalFlag</span>值：<br><span class="hljs-attribute">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0111</span> <span class="hljs-number">0000</span><br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> FLG_HEAP_ENABLE_TAIL_CHECK   0x10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FLG_HEAP_ENABLE_FREE_CHECK   0x20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FLG_HEAP_VALIDATE_PARAMETERS 0x40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NT_GLOBAL_FLAG_DEBUGGED (FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK | FLG_HEAP_VALIDATE_PARAMETERS)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _WIN64</span><br>PPEB pPeb = (PPEB)__readfsdword(<span class="hljs-number">0x30</span>);<br>DWORD dwNtGlobalFlag = *(PDWORD)((PBYTE)pPeb + <span class="hljs-number">0x68</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>PPEB pPeb = (PPEB)__readgsqword(<span class="hljs-number">0x60</span>);<br>DWORD dwNtGlobalFlag = *(PDWORD)((PBYTE)pPeb + <span class="hljs-number">0xBC</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// _WIN64</span></span><br> <br><span class="hljs-keyword">if</span> (dwNtGlobalFlag &amp; NT_GLOBAL_FLAG_DEBUGGED)<br>    <span class="hljs-keyword">do</span> something...<br></code></pre></td></tr></table></figure><p><code>NtGlobalFlag</code>的汇编代码如下，如果返回值为<code>0x70</code>则程序处于调试状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asm">mov eax, fs:[30h] ;Process Environment Block<br>mov al, [eax+68h] ;NtGlobalFlag<br>and al, 70h<br>cmp al, 70h<br>je being_debugged<br></code></pre></td></tr></table></figure><p>相应函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">CheckNtGlobalFlag</span><span class="hljs-params">()</span><br>&#123;<br>    BOOL IsDebug = FALSE;<br><br>    DWORD NtGlobalFlag = <span class="hljs-number">0</span>;<br>    __asm<br>    &#123;<br>        mov eax, fs:[<span class="hljs-number">0x30</span>]<br>        mov eax, [eax + <span class="hljs-number">0x68</span>]<br>        mov NtGlobalFlag, eax<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (NtGlobalFlag == <span class="hljs-number">0x70</span>)<br>    &#123;<br>        IsDebug = TRUE;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> IsDebug;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="heap-flag">1.3 Heap Flag</h2><p>在PEB的ProcessHeap位指向_HEAP结构体，该结构体中有俩个字段会受到调试器的影响，具体如何影响，取决于Windows的版本，主要是修改原始的内容，这两个字段是Flags和ForceFlags。</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230804165127921.png" alt="image-20230804165127921" /><figcaption aria-hidden="true">image-20230804165127921</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230804165135540.png" alt="image-20230804165135540" /><figcaption aria-hidden="true">image-20230804165135540</figcaption></figure><p><code>Flags and ForceFlags</code>的值通常分别设置为<code>HEAP_GROWABLE</code>和<code>0</code>。</p><p>在 64 位 Windows XP 和 Windows Vista 及更高版本上，如果存在调试器，则 Flags 字段将设置为以下标志的组合：</p><ul><li><code>HEAP_GROWABLE (2)</code></li><li><code>HEAP_TAIL_CHECKING_ENABLED (0x20)</code></li><li><code>HEAP_FREE_CHECKING_ENABLED (0x40)</code></li><li><code>HEAP_VALIDATE_PARAMETERS_ENABLED (0x40000000)</code></li></ul><p>当存在调试器时，ForceFlags 字段设置为以下标志的组合：</p><ul><li><code>HEAP_TAIL_CHECKING_ENABLED (0x20)</code></li><li><code>HEAP_FREE_CHECKING_ENABLED (0x40)</code></li><li><code>HEAP_VALIDATE_PARAMETERS_ENABLED (0x40000000)</code></li></ul><p>例子： Win10 x86环境 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">BOOL <span class="hljs-title function_">CheckHeapFlagsDebug</span><span class="hljs-params">()</span><br>&#123;<br>    PPEB pPeb = (PPEB)__readfsdword(<span class="hljs-number">0x30</span>);<br>    PVOID pHeapBase = (PVOID)(*(PDWORD_PTR)((PBYTE)pPeb + <span class="hljs-number">0x18</span>));<br>    DWORD dwHeapFlagsOffset = <span class="hljs-number">0x40</span>;<br>    DWORD dwHeapForceFlagsOffset = <span class="hljs-number">0x44</span>;<br>    <br>    PDWORD pdwHeapFlags = (PDWORD)((PBYTE)pHeapBase + dwHeapFlagsOffset);<br>    PDWORD pdwHeapForceFlags = (PDWORD)((PBYTE)pHeapBase + dwHeapForceFlagsOffset);<br>    <br>    <span class="hljs-comment">//HEAP_GROWABLE (2)</span><br>    <span class="hljs-keyword">return</span> (*pdwHeapFlags &amp; ~HEAP_GROWABLE) || (*pdwHeapForceFlags != <span class="hljs-number">0</span>); <br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="堆保护">1.4 堆保护</h2><p>当进程被调试器调试时该进程堆会被一些特殊的标志填充，这些特殊标记分别是0xABABABAB , 0xFEEEFEEE。</p><p>在调试模式下， NtGlobalFlag的HEAP_TAIL_CHECKING_ENABLED 标志将被默认设置，堆内存分配会在末尾追加 0xABABABAB标志进行安全检查，如果NtGlobalFlag设置了HEAP_FREE_CHECKING_ENABLED标志，那么当需要额外的字节来填充堆块尾部时, 就会使用0xFEEEFEEE(或一部分) 来填充。</p><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-process_heap_entry">微软PROCESS_HEAP_ENTRY结构文档</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">BOOL <span class="hljs-title function_">CheckHeapMagic</span><span class="hljs-params">()</span><br>&#123;<br>    PROCESS_HEAP_ENTRY HeapEntry = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (!HeapWalk(GetProcessHeap(), &amp;HeapEntry))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">while</span> (HeapEntry.wFlags != PROCESS_HEAP_ENTRY_BUSY);<br><br>    PVOID pOverlapped = (PBYTE)HeapEntry.lpData + HeapEntry.cbData;<br>    <span class="hljs-keyword">return</span> ((DWORD)(*(PDWORD)pOverlapped) == <span class="hljs-number">0xABABABAB</span>);<br>&#125;<br></code></pre></td></tr></table></figure><hr /><h1 id="x02-threadhidefromdebugger线程属性反调试">0x02 ThreadHideFromDebugger线程属性反调试</h1><h2 id="zwsetinformationthread反调试">2.1 ZwSetInformationThread反调试</h2><p><code>ThreadHideFromDebugger</code>是线程的一个属性值：</p><p>​ 当线程具备该特性时则该线程对“调试器”隐藏(一般是主线程)，能够使得主线程无法继续接受该线程的调试事件。</p><div class="note note-info">            <p>如果线程设置了ThreadHideFromDebugger那么当断点等调试事件触发时调试器表现为卡死。</p>          </div><p>线程启动后可以通过<code>ZwSetInformationThread()</code>函数来设置，该函数动态加载自<code>ntdll.dll</code>文件，以下是函数声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C">NTSYSAPI NTSTATUS <span class="hljs-title function_">ZwSetInformationThread</span><span class="hljs-params">(</span><br><span class="hljs-params">  [in] HANDLE          ThreadHandle,</span><br><span class="hljs-params">  [in] THREADINFOCLASS ThreadInformationClass,</span><br><span class="hljs-params">  [in] PVOID           ThreadInformation,</span><br><span class="hljs-params">  [in] ULONG           ThreadInformationLength</span><br><span class="hljs-params">)</span>;<br></code></pre></td></tr></table></figure><p><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/ddi/ntddk/nf-ntddk-zwsetinformationthread">官方文档</a></p><p>该函数用于设置线程的优先级，<a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/api/ps/psquery/class.htm">ThreadInfomationClass</a>的值可以搜索</p><p>原理：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2049aa7290cc1f7b23678b2ad8d799d2.png" alt="049aa7290cc1f7b23678b2ad8d799d2" /><figcaption aria-hidden="true">049aa7290cc1f7b23678b2ad8d799d2</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo204739db9b7cc0b73e687e531ae8b345.png" alt="04739db9b7cc0b73e687e531ae8b345" /><figcaption aria-hidden="true">04739db9b7cc0b73e687e531ae8b345</figcaption></figure><p>将HideFromDebugger的值置1，从而实现反调试。</p><p>别人的反反调试：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2fdfad3653cd4d850494e556cee18aa1.png" alt="fdfad3653cd4d850494e556cee18aa1" /><figcaption aria-hidden="true">fdfad3653cd4d850494e556cee18aa1</figcaption></figure><p>把对应位置置0.</p><p>调用例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">DWORD</span><span class="hljs-params">(WINAPI* ZW_SET_INFORMATION_THREAD)</span> <span class="hljs-params">(HANDLE, DWORD, PVOID, ULONG)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ThreadHideFromDebugger 0x11</span><br>VOID <span class="hljs-title function_">DisableDebugEvent</span><span class="hljs-params">(VOID)</span><br>&#123;<br>    HINSTANCE hModule;<br>    ZW_SET_INFORMATION_THREAD ZwSetInformationThread;<br>    hModule = GetModuleHandleA(<span class="hljs-string">&quot;Ntdll&quot;</span>);<br>    ZwSetInformationThread = (ZW_SET_INFORMATION_THREAD)GetProcAddress(hModule, <span class="hljs-string">&quot;ZwSetInformationThread&quot;</span>);<br>    ZwSetInformationThread(GetCurrentThread(), ThreadHideFromDebugger, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Begin\n&quot;</span>);<br>    DisableDebugEvent();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;End\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ntcreatethreadex反调试">2.2 NtCreateThreadEx反调试</h2><p>Windows Vista新引入了NtCreateThreadEx函数，以下是函数声明：</p><p>在32位下和64位下函数原型不一致</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">NTSTATUS NTAPI <span class="hljs-title function_">NtCreateThreadEx</span> <span class="hljs-params">(</span><br><span class="hljs-params">    _Out_    PHANDLE              ThreadHandle,</span><br><span class="hljs-params">    _In_     ACCESS_MASK          DesiredAccess,</span><br><span class="hljs-params">    _In_opt_ POBJECT_ATTRIBUTES   ObjectAttributes,</span><br><span class="hljs-params">    _In_     HANDLE               ProcessHandle,</span><br><span class="hljs-params">    _In_     PVOID                StartRoutine,</span><br><span class="hljs-params">    _In_opt_ PVOID                Argument,</span><br><span class="hljs-params">    _In_     ULONG                CreateFlags,</span><br><span class="hljs-params">    _In_opt_ ULONG_PTR            ZeroBits,</span><br><span class="hljs-params">    _In_opt_ SIZE_T               StackSize,</span><br><span class="hljs-params">    _In_opt_ SIZE_T               MaximumStackSize,</span><br><span class="hljs-params">    _In_opt_ PVOID                AttributeList</span><br><span class="hljs-params">)</span>;<br></code></pre></td></tr></table></figure><p>其中CreateFlags可以使用如下标志：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> THREAD_CREATE_FLAGS_CREATE_SUSPENDED 0x00000001</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> THREAD_CREATE_FLAGS_SKIP_THREAD_ATTACH 0x00000002</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER 0x00000004</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> THREAD_CREATE_FLAGS_HAS_SECURITY_DESCRIPTOR 0x00000010</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> THREAD_CREATE_FLAGS_ACCESS_CHECK_IN_TARGET 0x00000020</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> THREAD_CREATE_FLAGS_INITIAL_THREAD 0x00000080</span><br></code></pre></td></tr></table></figure><p>​ 如果新线程设置了<code>THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER</code>标志，那么在创建时就可以向调试器隐藏该线程信息，这与<code>NtSetInformationThread</code>函数设置的<code>ThreadHideFromDebugger</code>相同。负责安全任务的代码可以在设置<code>THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER</code>标志的线程中执行。</p><hr /><h1 id="x03-ntqueryinformationprocess函数反调试">0x03 NtQueryInformationProcess函数反调试</h1><p>NtQueryInformationProcess函数是操作系统中十分有用的一个关键函数，可以用来查找进程的很多相关信息。以下是函数声明：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">NTSTATUS NTAPI NtQueryInformationProcess(<br><span class="hljs-string">  [in]</span>            HANDLE           ProcessHandle,<br><span class="hljs-string">  [in]</span>            PROCESSINFOCLASS ProcessInformationClass,<br><span class="hljs-string">  [out]</span>           PVOID            ProcessInformation,<br><span class="hljs-string">  [in]</span>            ULONG            ProcessInformationLength,<br><span class="hljs-string">  [out, optional]</span> PULONG           ReturnLength<br>);<br></code></pre></td></tr></table></figure><p>[官方文档][https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntqueryinformationprocess]</p><p>第一个参数表明待查询的目标进程句柄，而第二个参数则是标明查询的信息种类。</p><p>PROCESSINFOCALASS是一个枚举类型，能查询近百种信息，其中以下四种信息是最常见可用于检测调试器的存在。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">ProcessDebugPort            <span class="hljs-comment">// 0x7</span><br>ProcessDebugFlags            <span class="hljs-comment">// 0x1F</span><br>ProcessDebugObjectHandle    <span class="hljs-comment">// 0x1E</span><br>ProcessBasicInformation        <span class="hljs-comment">// 0x0</span><br></code></pre></td></tr></table></figure><h2 id="checkremotedebuggerpresent函数">3.1 CheckRemoteDebuggerPresent函数</h2><p>ProcessDebugPort端口是Windows调试子系统依赖的一个数据结构，可以通过检测调试端口的方式来检测进程是否被调试。</p><p>在CheckRemoteDebuggerPresent函数内部就是调用NtQueryInformationProcess函数查询<strong>ProcessDebugPort</strong>信息，判断目标进程是否在调试状态，没有调试器的时候值为0。</p><h2 id="processdebugobjecthandle">3.2 ProcessDebugObjectHandle</h2><p>ProcessDebugObjectHandle的内容为调试对象的句柄，没有调试器的时候值为0，以下为示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">DWORD bDebugger = <span class="hljs-number">-1</span>;<br>NTSTATUS status = NtQueryInformationProcess(<br>                GetCurrentProcess(),        <span class="hljs-comment">// 进程句柄</span><br>                <span class="hljs-number">0x1E</span>,                        <span class="hljs-comment">// 要检索的进程信息类型，ProcessDebugObjectHandle</span><br>                &amp;bDebugger,                    <span class="hljs-comment">// 接收进程信息的缓冲区指针</span><br>                <span class="hljs-keyword">sizeof</span>(DWORD),                <span class="hljs-comment">// 缓冲区大小</span><br>                <span class="hljs-literal">NULL</span>                        <span class="hljs-comment">// 实际返回进程信息的大小</span><br>                );<br></code></pre></td></tr></table></figure><h2 id="processdebugflags反调试">3.3 ProcessDebugFlags反调试</h2><p>进程调试标志位，当程序处于调试状态的时候ProcessDebugFlags = 0，以下为示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">DWORD bDebugger = <span class="hljs-number">0</span>;<br>NTSTATUS status = NtQueryInformationProcess(<br>                GetCurrentProcess(),        <span class="hljs-comment">// 进程句柄</span><br>                <span class="hljs-number">0x1F</span>,                        <span class="hljs-comment">// 要检索的进程信息类型，ProcessDebugFlags</span><br>                &amp;bDebugger,                    <span class="hljs-comment">// 接收进程信息的缓冲区指针</span><br>                <span class="hljs-keyword">sizeof</span>(DWORD),                <span class="hljs-comment">// 缓冲区大小</span><br>                <span class="hljs-literal">NULL</span>                        <span class="hljs-comment">// 实际返回进程信息的大小</span><br>                );<br></code></pre></td></tr></table></figure><h2 id="processbasicinformation反调试">3.4 ProcessBasicInformation反调试</h2><p>当使用ProcessBasicInformation标志调用NtQueryInformationProcess函数时，将返回<a href="https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntqueryinformationprocess#process_basic_information">PROCESS_BASIC_INFORMATION</a>结构，以下是在官方定义的基础上进行完整化的结构信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">PROCESS_BASIC_INFORMATION</span> </span><br><span class="hljs-class">&#123;</span><br>      DWORD ExitStatus;                     <span class="hljs-comment">// 接收进程终止状态</span><br>      DWORD PebBaseAddress;                 <span class="hljs-comment">// 接收进程环境块地址(PEB)</span><br>      DWORD AffinityMask;                     <span class="hljs-comment">// 接收进程关联掩码</span><br>      DWORD BasePriority;                     <span class="hljs-comment">// 接收进程的优先级类</span><br>      ULONG UniqueProcessId;                 <span class="hljs-comment">// 接收进程ID</span><br>      ULONG InheritedFromUniqueProcessId;     <span class="hljs-comment">// 接收父进程ID</span><br>&#125; PROCESS_BASIC_INFORMATION;<br></code></pre></td></tr></table></figure><p>通过这个标志我们就可以获得<strong>父进程ID</strong>(Reserved3)，后续在通过OpenProcess获取父进程句柄，调用GetProcessImageFileName获得父进程名进行比较即可判断是否被调试。</p><hr /><h1 id="x04-基于时间的反调试">0x04 基于时间的反调试</h1><p>在现代计算机中一段代码的执行通常不会消耗很多时间，但是如果程序处于调试状态，则他的执行时间就不可控了。这种检测本质就是通过获取时间的函数比较时间差进程检测。</p><hr /><h1 id="x05-基于异常处理的反调试">0x05 基于异常处理的反调试</h1><p>Windows的异常处理流程大致为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 交给调试器(进程必须被调试)<br><span class="hljs-bullet">2.</span> 执行VEH<br><span class="hljs-bullet">3.</span> 执行SEH<br><span class="hljs-bullet">4.</span> TopLevelEH(进程被调试时不会被执行)<br><span class="hljs-bullet">5.</span> 交给调试器(上面的异常处理都说处理不了，就再次交给调试器)<br><span class="hljs-bullet">6.</span> 调用异常端口通知csrss.exe<br></code></pre></td></tr></table></figure><h1 id="未完待续">未完待续</h1><p>https://www.anquanke.com/post/id/179709</p><p>https://www.anquanke.com/post/id/179710</p>]]></content>
    
    
    <categories>
      
      <category>Re学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
      <tag>Win</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PEB和TEB</title>
    <link href="/2023/08/04/PEB%E5%92%8CTEB/"/>
    <url>/2023/08/04/PEB%E5%92%8CTEB/</url>
    
    <content type="html"><![CDATA[<h1 id="teb">TEB</h1><p>Windows是一个强大的操作系统。为了方便开发者，微软将进程中的每个线程都设置了一个独立的结构数据。这个结构体内存储着当前线程大量的信息。这个结构被称为TEB（线程环境块）。通过TEB结构内的成员属性向下扩展，可以得到很多线程信息。这其中还包含大量的未公开数据。</p><div class="note note-warning">            <p>不过TEB结构在不同版本的操作系统中会进行更改</p><p>建议通过<a href="https://www.vergiliusproject.com/kernels">VergiliusProject</a>进行查询</p>          </div><p>在不同结构中的TEB结构的偏移查询：</p><table><thead><tr class="header"><th>Architecture</th><th>Can fold?</th><th>Notes</th></tr></thead><tbody><tr class="odd"><td>x86-32</td><td>Yes</td><td><code>mov eax, fs:[n]</code></td></tr><tr class="even"><td>x86-64</td><td>Yes</td><td><code>mov rax, gs:[n]</code></td></tr><tr class="odd"><td>arm</td><td>No</td><td>Cannot use offset load from coprocessor register</td></tr><tr class="even"><td>arm64</td><td>Yes</td><td><code>ldr x0, [x18, #n]</code></td></tr><tr class="odd"><td>alpha</td><td>No</td><td>Address returned by dedicated instruction</td></tr><tr class="even"><td>ia64</td><td>Yes</td><td>Can calculate effective address directly from r13</td></tr><tr class="odd"><td>MIPS</td><td>No</td><td>No absolute addressing mode</td></tr><tr class="even"><td>PowerPC</td><td>Yes</td><td><code>lwz r0, n(r13)</code></td></tr></tbody></table><p>对于TEB来说，最简单的获取方式就是通过fs:[0x18]来获取</p><p>pTEB-&gt;0x18 == *pTEB</p><p>fs:[0x18] == TEB</p><p>pTEB-&gt;0x30 == fs:[0x30] == PEB</p><p>SEH：pTEB-&gt;0 == fs:[0] == SEH链</p><h1 id="peb">PEB</h1><div class="note note-info">            <p>PEB(进程环境块)是TEB的一个成员</p><p>这个结构中存储着整个进程的信息。通过对PEB中成员的向下扩展可以找到一个存储着该进程所有模块数据的链表。</p>          </div><h2 id="x01-引入">0x01 引入</h2><p>常见的反调试函数：<code>IsDebuggerPresent()</code></p><p>本质上是读取当前进程的PEB里BeingDebugged的值用于判断自己是否处于调试状态</p><h2 id="x02-peb相关标志位反调试">0x02 PEB相关标志位反调试</h2><p>PEB是一个非常庞大的数据结构，它是用来存储每个进程的运行时数据。下图为<a href="https://kernelstruct.gitee.io/kernels/x86/Windows%2010/1511%20Threshold%202/_PEB">Windows 10的_PEB</a>部分结构。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//0x460 bytes (sizeof)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">PEB</span></span><br><span class="hljs-class">&#123;</span><br>    UCHAR InheritedAddressSpace;                                            <span class="hljs-comment">//0x0</span><br>    UCHAR ReadImageFileExecOptions;                                         <span class="hljs-comment">//0x1</span><br>    UCHAR BeingDebugged;                                                    <span class="hljs-comment">//0x2</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">    &#123;</span><br>        UCHAR BitField;                                                     <span class="hljs-comment">//0x3</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">        &#123;</span><br>            UCHAR ImageUsesLargePages:<span class="hljs-number">1</span>;                                    <span class="hljs-comment">//0x3</span><br>            UCHAR IsProtectedProcess:<span class="hljs-number">1</span>;                                     <span class="hljs-comment">//0x3</span><br>            UCHAR IsImageDynamicallyRelocated:<span class="hljs-number">1</span>;                            <span class="hljs-comment">//0x3</span><br>            UCHAR SkipPatchingUser32Forwarders:<span class="hljs-number">1</span>;                           <span class="hljs-comment">//0x3</span><br>            UCHAR IsPackagedProcess:<span class="hljs-number">1</span>;                                      <span class="hljs-comment">//0x3</span><br>            UCHAR IsAppContainer:<span class="hljs-number">1</span>;                                         <span class="hljs-comment">//0x3</span><br>            UCHAR IsProtectedProcessLight:<span class="hljs-number">1</span>;                                <span class="hljs-comment">//0x3</span><br>            UCHAR SpareBits:<span class="hljs-number">1</span>;                                              <span class="hljs-comment">//0x3</span><br>        &#125;;<br>    &#125;;<br>    VOID* Mutant;                                                           <span class="hljs-comment">//0x4</span><br>    VOID* ImageBaseAddress;                                                 <span class="hljs-comment">//0x8</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">PEB_LDR_DATA</span>* <span class="hljs-title">Ldr</span>;</span>                                              <span class="hljs-comment">//0xc</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">RTL_USER_PROCESS_PARAMETERS</span>* <span class="hljs-title">ProcessParameters</span>;</span>                 <span class="hljs-comment">//0x10</span><br>    VOID* SubSystemData;                                                    <span class="hljs-comment">//0x14</span><br>    VOID* ProcessHeap;                                                      <span class="hljs-comment">//0x18</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">RTL_CRITICAL_SECTION</span>* <span class="hljs-title">FastPebLock</span>;</span>                              <span class="hljs-comment">//0x1c</span><br>    VOID* AtlThunkSListPtr;                                                 <span class="hljs-comment">//0x20</span><br>    VOID* IFEOKey;                                                          <span class="hljs-comment">//0x24</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">    &#123;</span><br>        ULONG CrossProcessFlags;                                            <span class="hljs-comment">//0x28</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">        &#123;</span><br>            ULONG ProcessInJob:<span class="hljs-number">1</span>;                                           <span class="hljs-comment">//0x28</span><br>            ULONG ProcessInitializing:<span class="hljs-number">1</span>;                                    <span class="hljs-comment">//0x28</span><br>            ULONG ProcessUsingVEH:<span class="hljs-number">1</span>;                                        <span class="hljs-comment">//0x28</span><br>            ULONG ProcessUsingVCH:<span class="hljs-number">1</span>;                                        <span class="hljs-comment">//0x28</span><br>            ULONG ProcessUsingFTH:<span class="hljs-number">1</span>;                                        <span class="hljs-comment">//0x28</span><br>            ULONG ReservedBits0:<span class="hljs-number">27</span>;                                         <span class="hljs-comment">//0x28</span><br>        &#125;;<br>    &#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">    &#123;</span><br>        VOID* KernelCallbackTable;                                          <span class="hljs-comment">//0x2c</span><br>        VOID* UserSharedInfoPtr;                                            <span class="hljs-comment">//0x2c</span><br>    &#125;;<br>    ULONG SystemReserved[<span class="hljs-number">1</span>];                                                <span class="hljs-comment">//0x30</span><br>    ULONG AtlThunkSListPtr32;                                               <span class="hljs-comment">//0x34</span><br>    VOID* ApiSetMap;                                                        <span class="hljs-comment">//0x38</span><br>    ULONG TlsExpansionCounter;                                              <span class="hljs-comment">//0x3c</span><br>    VOID* TlsBitmap;                                                        <span class="hljs-comment">//0x40</span><br>    ULONG TlsBitmapBits[<span class="hljs-number">2</span>];                                                 <span class="hljs-comment">//0x44</span><br>    VOID* ReadOnlySharedMemoryBase;                                         <span class="hljs-comment">//0x4c</span><br>    VOID* SparePvoid0;                                                      <span class="hljs-comment">//0x50</span><br>    VOID** ReadOnlyStaticServerData;                                        <span class="hljs-comment">//0x54</span><br>    VOID* AnsiCodePageData;                                                 <span class="hljs-comment">//0x58</span><br>    VOID* OemCodePageData;                                                  <span class="hljs-comment">//0x5c</span><br>    VOID* UnicodeCaseTableData;                                             <span class="hljs-comment">//0x60</span><br>    ULONG NumberOfProcessors;                                               <span class="hljs-comment">//0x64</span><br>    ULONG NtGlobalFlag;                                                     <span class="hljs-comment">//0x68</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> _<span class="hljs-title">LARGE_INTEGER</span> <span class="hljs-title">CriticalSectionTimeout</span>;</span>                            <span class="hljs-comment">//0x70</span><br>    ULONG HeapSegmentReserve;                                               <span class="hljs-comment">//0x78</span><br>    ULONG HeapSegmentCommit;                                                <span class="hljs-comment">//0x7c</span><br>    ULONG HeapDeCommitTotalFreeThreshold;                                   <span class="hljs-comment">//0x80</span><br>    ULONG HeapDeCommitFreeBlockThreshold;                                   <span class="hljs-comment">//0x84</span><br>    ULONG NumberOfHeaps;                                                    <span class="hljs-comment">//0x88</span><br>    ULONG MaximumNumberOfHeaps;                                             <span class="hljs-comment">//0x8c</span><br>    VOID** ProcessHeaps;                                                    <span class="hljs-comment">//0x90</span><br>    VOID* GdiSharedHandleTable;                                             <span class="hljs-comment">//0x94</span><br>    VOID* ProcessStarterHelper;                                             <span class="hljs-comment">//0x98</span><br>    ULONG GdiDCAttributeList;                                               <span class="hljs-comment">//0x9c</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">RTL_CRITICAL_SECTION</span>* <span class="hljs-title">LoaderLock</span>;</span>                               <span class="hljs-comment">//0xa0</span><br>    ULONG OSMajorVersion;                                                   <span class="hljs-comment">//0xa4</span><br>    ULONG OSMinorVersion;                                                   <span class="hljs-comment">//0xa8</span><br>    USHORT OSBuildNumber;                                                   <span class="hljs-comment">//0xac</span><br>    USHORT OSCSDVersion;                                                    <span class="hljs-comment">//0xae</span><br>    ULONG OSPlatformId;                                                     <span class="hljs-comment">//0xb0</span><br>    ULONG ImageSubsystem;                                                   <span class="hljs-comment">//0xb4</span><br>    ULONG ImageSubsystemMajorVersion;                                       <span class="hljs-comment">//0xb8</span><br>    ULONG ImageSubsystemMinorVersion;                                       <span class="hljs-comment">//0xbc</span><br>    ULONG ActiveProcessAffinityMask;                                        <span class="hljs-comment">//0xc0</span><br>    ULONG GdiHandleBuffer[<span class="hljs-number">34</span>];                                              <span class="hljs-comment">//0xc4</span><br>    VOID (*PostProcessInitRoutine)();                                       <span class="hljs-comment">//0x14c</span><br>    VOID* TlsExpansionBitmap;                                               <span class="hljs-comment">//0x150</span><br>    ULONG TlsExpansionBitmapBits[<span class="hljs-number">32</span>];                                       <span class="hljs-comment">//0x154</span><br>    ULONG SessionId;                                                        <span class="hljs-comment">//0x1d4</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> _<span class="hljs-title">ULARGE_INTEGER</span> <span class="hljs-title">AppCompatFlags</span>;</span>                                   <span class="hljs-comment">//0x1d8</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> _<span class="hljs-title">ULARGE_INTEGER</span> <span class="hljs-title">AppCompatFlagsUser</span>;</span>                               <span class="hljs-comment">//0x1e0</span><br>    VOID* pShimData;                                                        <span class="hljs-comment">//0x1e8</span><br>    VOID* AppCompatInfo;                                                    <span class="hljs-comment">//0x1ec</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">UNICODE_STRING</span> <span class="hljs-title">CSDVersion</span>;</span>                                      <span class="hljs-comment">//0x1f0</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">ACTIVATION_CONTEXT_DATA</span>* <span class="hljs-title">ActivationContextData</span>;</span>                 <span class="hljs-comment">//0x1f8</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">ASSEMBLY_STORAGE_MAP</span>* <span class="hljs-title">ProcessAssemblyStorageMap</span>;</span>                <span class="hljs-comment">//0x1fc</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">ACTIVATION_CONTEXT_DATA</span>* <span class="hljs-title">SystemDefaultActivationContextData</span>;</span>    <span class="hljs-comment">//0x200</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">ASSEMBLY_STORAGE_MAP</span>* <span class="hljs-title">SystemAssemblyStorageMap</span>;</span>                 <span class="hljs-comment">//0x204</span><br>    ULONG MinimumStackCommit;                                               <span class="hljs-comment">//0x208</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">FLS_CALLBACK_INFO</span>* <span class="hljs-title">FlsCallback</span>;</span>                                 <span class="hljs-comment">//0x20c</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">LIST_ENTRY</span> <span class="hljs-title">FlsListHead</span>;</span>                                         <span class="hljs-comment">//0x210</span><br>    VOID* FlsBitmap;                                                        <span class="hljs-comment">//0x218</span><br>    ULONG FlsBitmapBits[<span class="hljs-number">4</span>];                                                 <span class="hljs-comment">//0x21c</span><br>    ULONG FlsHighIndex;                                                     <span class="hljs-comment">//0x22c</span><br>    VOID* WerRegistrationData;                                              <span class="hljs-comment">//0x230</span><br>    VOID* WerShipAssertPtr;                                                 <span class="hljs-comment">//0x234</span><br>    VOID* pUnused;                                                          <span class="hljs-comment">//0x238</span><br>    VOID* pImageHeaderHash;                                                 <span class="hljs-comment">//0x23c</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">    &#123;</span><br>        ULONG TracingFlags;                                                 <span class="hljs-comment">//0x240</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">        &#123;</span><br>            ULONG HeapTracingEnabled:<span class="hljs-number">1</span>;                                     <span class="hljs-comment">//0x240</span><br>            ULONG CritSecTracingEnabled:<span class="hljs-number">1</span>;                                  <span class="hljs-comment">//0x240</span><br>            ULONG LibLoaderTracingEnabled:<span class="hljs-number">1</span>;                                <span class="hljs-comment">//0x240</span><br>            ULONG SpareTracingBits:<span class="hljs-number">29</span>;                                      <span class="hljs-comment">//0x240</span><br>        &#125;;<br>    &#125;;<br>    ULONGLONG CsrServerReadOnlySharedMemoryBase;                            <span class="hljs-comment">//0x248</span><br>    ULONG TppWorkerpListLock;                                               <span class="hljs-comment">//0x250</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">LIST_ENTRY</span> <span class="hljs-title">TppWorkerpList</span>;</span>                                      <span class="hljs-comment">//0x254</span><br>    VOID* WaitOnAddressHashTable[<span class="hljs-number">128</span>];                                      <span class="hljs-comment">//0x25c</span><br>&#125;; <br></code></pre></td></tr></table></figure><h1 id="参考资料">参考资料</h1><p>一图流:</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2867232_UQX698BZWQ7UZ8Y.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>https://bbs.kanxue.com/thread-266678.htm#msg_header_h1_2</p><p>微软未公开数据：（收藏收藏，包含API，结构体等信息）</p><p>http://undocumented.ntinternals.net/</p>]]></content>
    
    
    <categories>
      
      <category>Re学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>奇奇怪怪的函数02</title>
    <link href="/2023/08/04/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E5%87%BD%E6%95%B002/"/>
    <url>/2023/08/04/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E5%87%BD%E6%95%B002/</url>
    
    <content type="html"><![CDATA[<h1 id="initterm-_initterm_e">1. _initterm ,_initterm_e</h1><p>官方文档里面的描述：</p><div class="note note-info">            <p>Internal methods that walk a table of function pointers and initialize them.</p><p>The first pointer is the starting location in the table and the second pointer is the ending location.</p><p>These methods are only called internally during the initialization of a C++ program. Don't call these methods in a program.</p><p>When these methods walk a table of function entries, they skip <code>NULL</code> entries and continue.</p><hr /><p>大概意思就是:</p><p>遍历函数指针表并初始化它们的内部方法, 第一个指针是表中的起始位置，第二个指针是表中的结束位置。</p><p>这些方法仅在 C++ 程序初始化期间在内部调用。不要在程序中调用这些方法。</p><p>当这些方法遍历函数条目表时，它们会跳过<code>NULL</code>条目并继续。</p>          </div><p>函数定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __cdecl _initterm(<br>   PVFV *,<br>   PVFV *<br>);<br><br><span class="hljs-type">int</span> __cdecl _initterm_e(<br>   PVFV *,<br>   PVFV *<br>);<br></code></pre></td></tr></table></figure><h1 id="ntcurrentteb">2. NtCurrentTeb()</h1><p>官方文档里面的描述：</p><div class="note note-info">            <p>The <strong>NtCurrentTeb</strong> routine returns a pointer to the Thread Environment Block (<a href="https://learn.microsoft.com/en-us/windows/desktop/api/winternl/ns-winternl-teb">TEB</a>) of the current thread.</p><hr /><p>大概意思就是:</p><p>NtCurrentTeb例程返回一个指向当前线程的线程环境块（TEB）的指针。</p>          </div><p>函数定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">_TEB * <span class="hljs-title">NtCurrentTeb</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>关于TEB和PEB的，请看这篇<a href="https://azureussimu.github.io/2023/08/04/PEB%E5%92%8CTEB">文章</a></p>]]></content>
    
    
    <categories>
      
      <category>奇奇怪怪的函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花指令</title>
    <link href="/2023/08/03/%E8%8A%B1%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/08/03/%E8%8A%B1%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="通过堆栈修改eip">通过堆栈修改EIP</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">_asm<br>&#123;<br>    call sub<br>    _emit <span class="hljs-number">0xE8</span><br>    jmp label<br>    sub:<br>    add<br>    dword<br>    ptr[esp], <span class="hljs-number">1</span><br>    retn<br>    label:<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="执行流程">执行流程：</h2><p>先call sub处的函数，此时sub函数外面的eip指向0xE8，函数内将栈上的外面的eip+=1，结果是外面的eip指向了jmp，函数退出来就jmp到label。</p><p>这里就是p都没做，全nop就行，但是有的时候ida发癫，会认为堆栈爆炸，patch然后让ida重新分析就行。</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux获取文件属性函数学习笔记</title>
    <link href="/2023/07/28/Linux%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/28/Linux%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>快下班了，先挖个坑</p><p>https://blog.csdn.net/qq_37858386/article/details/78702435</p><p>嘶，好像PE结构的坑还没填完</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下DIR等结构体学习笔记</title>
    <link href="/2023/07/28/Linux%E4%B8%8BDIR%E7%AD%89%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/28/Linux%E4%B8%8BDIR%E7%AD%89%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>快下班了，有空记得叫我写</p><p>学习链接</p><p>https://blog.csdn.net/zhuyi2654715/article/details/7605051</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次fridaHook</title>
    <link href="/2023/07/28/%E7%AC%AC%E4%B8%80%E6%AC%A1fridaHook/"/>
    <url>/2023/07/28/%E7%AC%AC%E4%B8%80%E6%AC%A1fridaHook/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面">写在前面</h1><p>用的是frida官方文档里面了的一道安卓题，脚本也是</p><p>本文只是记录自己第一次使用frida进行hook所踩的坑。</p><h1 id="apk分析">apk分析</h1><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230728153920868.png" alt="image-20230728153920868" /><figcaption aria-hidden="true">image-20230728153920868</figcaption></figure><p>逻辑倒是十分明显，你赢1000次就可以得到flag，游戏本体是一个剪刀石头布的游戏。</p><p>calc方式使用了native，可以查看apk包中的so文件：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230728154103074.png" alt="image-20230728154103074" /><figcaption aria-hidden="true">image-20230728154103074</figcaption></figure><p>只是单纯的返回个7</p><p>其实到这flag就有了：</p><p>SECCON{(1000 + 7) * 107的结果}</p><h1 id="hook">hook</h1><p>那hook点明白，在包体com.example.seccon2015.rock_paper_scissors中的MainActivity方法中，使用官方的hook.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 在这定义一个const声明的变量，保存要hook的类</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">MainActivity</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;com.example.seccon2015.rock_paper_scissors.MainActivity&#x27;</span>);<br>  <br>    <span class="hljs-comment">// 一个常量，记录触发的方法</span><br>    <span class="hljs-keyword">const</span> onClick = <span class="hljs-title class_">MainActivity</span>.<span class="hljs-property">onClick</span>;<br>    <span class="hljs-comment">//重载onClick方法</span><br>    onClick.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">v</span>) &#123;<br>      <span class="hljs-comment">// Show a message to know that the function got called</span><br>      <span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;onClick&#x27;</span>);<br>  <br>      <span class="hljs-comment">// 原onClick方法的调用</span><br>      onClick.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, v);<br>  <br>      <span class="hljs-comment">// 调用结束后，对数据进行改变</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">m</span>.<span class="hljs-property">value</span> = <span class="hljs-number">0</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">n</span>.<span class="hljs-property">value</span> = <span class="hljs-number">1</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">cnt</span>.<span class="hljs-property">value</span> = <span class="hljs-number">999</span>;<br>  <br>      <span class="hljs-comment">// Log to the console that it&#x27;s done, and we should have the flag!</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Done:&#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cnt</span>));<br>    &#125;;<br>  &#125;);<br></code></pre></td></tr></table></figure><p>使用命令行进行hook：</p><p><code>frida -U -f com.example.seccon2015.rock_paper_scissors -l .\hook.js</code></p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo298341301c5b833565d025928fe4c8b0.png" alt="98341301c5b833565d025928fe4c8b0" /><figcaption aria-hidden="true">98341301c5b833565d025928fe4c8b0</figcaption></figure><h1 id="踩的坑">踩的坑</h1><h2 id="frida_server启动失败">1.frida_server启动失败</h2><p>主要是自己sb，看进程不用<code>ps</code>用<code>ps -ef</code>，这东西记录的太全了，让我以为frida启动成功了</p><p>已经是root权限，像着linux那样启动文件：<code>su ./frida-server</code></p><p>笑死，根本启动不了</p><p>正常启动就行</p><p>如果手机中的frida-server启动了，但还是<code>unable to connect to remote frida-server</code></p><p>用<code>adb forward tcp:27042 tcp:27042</code>转发一下端口，如果还不行，把042全改成043，注意手机每次重新连接都要转发。</p><p>如果你是用WIFI来进行hook，hook时候多个参数-H。</p><h2 id="python脚本执行不成功">2.python脚本执行不成功</h2><p>不知道为啥官方的脚本会有问题，xman建议是使用命令行</p>]]></content>
    
    
    <categories>
      
      <category>Re学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>proc目录学习</title>
    <link href="/2023/07/26/proc%E7%9B%AE%E5%BD%95%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/07/26/proc%E7%9B%AE%E5%BD%95%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="proc目录简介">/proc目录简介</h1><p>首先来介绍一下/proc目录，它是一个虚拟的目录，其下面的文件和目录也都是虚拟的，不占用实际的存储空间，而是存在于系统内存中。proc以文件系统的方式为访问系统内核的操作提供接口，它是动态从系统内核中读出所需信息的。</p><div class="note note-info">            <ul><li>/proc/cmdline：显示内核启动的命令行。</li><li>/proc/cpuinfo：显示系统cpu的信息。</li><li>/proc/filesystems，显示当前注册了的文件系统列表，nodev表示为虚拟文件系统。</li><li>/proc/interrupts:显示当前系统的中断信息.</li><li>/proc/ioports：被占用的输入/输出地址范围列表。</li><li>/proc/kmsg：输出内核消息日志。</li><li>/proc/loadavg：监控cpu平均负载，其数值为所有核上cpu占用的累加值，前三个分别表示最近1、5、15分钟的平均负载，第四个表示当前运行进程数和进程总数，最后一个表示最近运行的进程id。</li><li>/proc/locks:打开文件上的加锁信息。</li><li>/proc/meminfo：显示物理及虚拟内存使用情况。</li><li>/proc/misc：内核函数misc_register登记的设备驱动程序。</li><li>/proc/modules：加载的内核模块列表。</li><li>/proc/mounts：当前系统所安装的文件系统信息（包括手动安装的）。</li><li>/proc/stat: 系统简要信息。</li><li>/proc/uptime：分别表示系统启动时间和系统空闲时间。</li><li>/proc/version：系统内核版本。</li><li>/proc/net: 其实际挂载点是/proc/self/net，能够显示当前各种网络情况，例如通过tcp文件可以查看tcp连接数及连接情况。</li><li>/proc/sys 报告各种不同的内核参数，某些参数能在root的情况下进行修改。</li><li>/proc/devices 当前挂载的所有软硬件设备(字符设备和块设备)，包括主设备号和设备名称。</li><li>/proc/asound：声卡相关的信息。</li><li>/proc/buddyinfo：每个内存区中每个order有多少块可用，和内存碎片问题有关。</li><li>/proc/bus: 输入设备信息。</li><li>/proc/cgroups：查看cgroups子系统信息。</li><li>/proc/diskstats：用于显示磁盘、分区和统计信息。</li><li>/proc/execdomains：安全相关的信息。</li><li>/proc/fb：帧缓冲设备信息。</li><li>/proc/iomem：记录物理地址的分配情况。</li><li>/proc/kallsyms：内核符号表信息。</li><li>/proc/pagetypeinfo：内存分页信息。</li><li>/proc/partitions：分区信息</li><li>/proc/sched_debug：cpu调度信息。</li><li>/proc/softirqs：软中断情况。</li><li>/proc/vmallocinfo：vmalloc内存分配信息。</li><li>/proc/vmstat：统计虚拟内存信息。</li><li>/proc/pid：显示进程相关的所有信息。</li></ul>          </div><p>懒得整理成表格了，那天要是看我有空就叫我整理成表格吧</p><h1 id="procxx进程目录">/proc/xx/进程目录</h1><p>在/proc目录下面还有很多目录的名字是数字，这些目录保存了当前系统中运行的所有进程的信息，数字对应的是进程的pid。</p><p>例子：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230726125449236.png" alt="image-20230726125449236" /><figcaption aria-hidden="true">image-20230726125449236</figcaption></figure><p>普通用户只能查看本进程相关的信息，需要取得root权限后才能查看其它进程信息，例如查看进程7289目录内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs shell">127|sagit:/proc/7289 $ ls -l<br>total 0<br>dr-xr-xr-x  2 shell shell 0 2023-07-27 15:49 attr<br>-rw-r--r--  1 shell shell 0 2023-07-27 15:49 autogroup<br>-r--------  1 shell shell 0 2023-07-27 15:49 auxv<br>-r--r--r--  1 shell shell 0 2023-07-27 15:49 cgroup<br>--w-------  1 shell shell 0 2023-07-27 15:49 clear_refs<br>-r--r--r--  1 shell shell 0 2023-07-27 15:43 cmdline<br>-rw-r--r--  1 shell shell 0 2023-07-27 15:49 comm<br>-rw-r--r--  1 shell shell 0 2023-07-27 15:49 coredump_filter<br>-r--r--r--  1 shell shell 0 2023-07-27 15:49 cpuset<br>lrwxrwxrwx  1 shell shell 0 2023-07-27 15:49 cwd -&gt; /proc/7289<br>-r--------  1 shell shell 0 2023-07-27 15:49 environ<br>lrwxrwxrwx  1 shell shell 0 2023-07-27 15:42 exe -&gt; /system/bin/sh<br>dr-x------  2 shell shell 0 2023-07-27 15:42 fd<br>dr-x------  2 shell shell 0 2023-07-27 15:49 fdinfo<br>-r--------  1 shell shell 0 2023-07-27 15:49 io<br>-r--r--r--  1 shell shell 0 2023-07-27 15:49 limits<br>dr-x------  2 shell shell 0 2023-07-27 15:49 map_files<br>-r--r--r--  1 shell shell 0 2023-07-27 15:49 maps<br>-rw-------  1 shell shell 0 2023-07-27 15:49 mem<br>-r--r--r--  1 shell shell 0 2023-07-27 15:49 mountinfo<br>-r--r--r--  1 shell shell 0 2023-07-27 15:49 mounts<br>-r--------  1 shell shell 0 2023-07-27 15:49 mountstats<br>dr-xr-xr-x 10 shell shell 0 2023-07-27 15:49 net<br>dr-x--x--x  2 shell shell 0 2023-07-27 15:49 ns<br>-rw-r--r--  1 shell shell 0 2023-07-27 15:49 oom_adj<br>-r--r--r--  1 shell shell 0 2023-07-27 15:49 oom_score<br>-rw-r--r--  1 shell shell 0 2023-07-27 15:42 oom_score_adj<br>-r--------  1 shell shell 0 2023-07-27 15:49 pagemap<br>-r--------  1 shell shell 0 2023-07-27 15:49 personality<br>--w-------  1 shell shell 0 2023-07-27 15:49 reclaim<br>lrwxrwxrwx  1 shell shell 0 2023-07-27 15:49 root -&gt; /<br>-rw-rw-rw-  1 shell shell 0 2023-07-27 15:49 sched_group_id<br>-rw-r--r--  1 shell shell 0 2023-07-27 15:49 sched_init_task_load<br>-rw-r--r--  1 shell shell 0 2023-07-27 15:49 sched_wake_up_idle<br>-r--r--r--  1 shell shell 0 2023-07-27 15:49 schedstat<br>-r--r--r--  1 shell shell 0 2023-07-27 15:46 smaps<br>-r--------  1 shell shell 0 2023-07-27 15:49 stack<br>-r--r--r--  1 shell shell 0 2023-07-27 15:43 stat<br>-r--r--r--  1 shell shell 0 2023-07-27 15:49 statm<br>-r--r--r--  1 shell shell 0 2023-07-27 15:48 status<br>-r--------  1 shell shell 0 2023-07-27 15:49 syscall<br>dr-xr-xr-x  3 shell shell 0 2023-07-27 15:49 task<br>-r--r--r--  1 shell shell 0 2023-07-27 15:49 time_in_state<br>-rw-rw-rw-  1 shell shell 0 2023-07-27 15:49 timerslack_ns<br>-rw-rw-rw-  1 shell shell 0 2023-07-27 15:49 top_app<br>-r--r--r--  1 shell shell 0 2023-07-27 15:48 wchan<br></code></pre></td></tr></table></figure><h1 id="进程目录文件或目录的分析">进程目录文件或目录的分析</h1><h2 id="cmdline">cmdline</h2><ul><li><strong>文件</strong></li></ul><p>该(虚拟)文件包含了启动该进程的整个命令行。它未曾格式化：程序与其参数之间没有空格，行末也没有换行。</p><h2 id="cwd">cwd</h2><ul><li><strong>目录</strong></li></ul><p>该符号链接指向该进程的当前工作目录。现在我见过的基本都是根目录，从上面的输出就能看出它链接到的是根目录。</p><h2 id="environ">environ</h2><ul><li><strong>文件</strong></li></ul><p>该文件包含为该进程定义的所有环境变量，格式为 <code>变量 = 值</code>。与 <code>cmdline</code> 文件一样，其内容未曾格式化过：各个变量之间没有分行，文件末尾也没有换行。</p><h2 id="exe">exe</h2><ul><li><strong>目录</strong></li></ul><p>这是指向该进程所执行的可执行程序文件的符号链接。上面的输出可以看出链接到/system/bin/adb，一般的用户进程是链接到/system/bin/app_process，这是zygote进程的实际实现文件，因为所有进程都是zygote孵化出来的，所以这里都会链接到它。</p><h2 id="fd">fd</h2><ul><li><strong>目录</strong></li></ul><p>在此子目录中包含了该进程当前打开的所有描述符。下面看一下进程7289的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">sagit:/proc/7289 $ ls -l fd<br>total 0<br>lrwx------ 1 shell shell 64 2023-07-27 15:50 0 -&gt; /dev/pts/0<br>lrwx------ 1 shell shell 64 2023-07-27 15:50 1 -&gt; /dev/pts/0<br>lrwx------ 1 shell shell 64 2023-07-27 15:50 10 -&gt; /dev/tty<br>lrwx------ 1 shell shell 64 2023-07-27 15:50 2 -&gt; /dev/pts/0<br></code></pre></td></tr></table></figure><p>实际上，这是该进程打开的文件描述符列表，每个描述符由一个符号链接表示，其名称为该描述符的编号，并指向该描述符打开的文件。注意这些符号链接的权限：它们的意义仅代表被相应描述符打开的文件的权限。</p><h2 id="maps">maps</h2><ul><li><strong>文件</strong></li></ul><p>这个文件中显示了该进程的虚拟地址空间的分布情况。该文件有6列，自左至右各列为：</p><ul><li>地址：库在进程里地址范围</li><li>权限：虚拟内存的权限，r=读，w=写,x=,s=共享,p=私有；</li><li>偏移量：库在进程里地址范围</li><li>设备：映像文件的主设备号和次设备号,当设备号为 0 且没有 inode 号或文件名时，它就是一个匿名映射，表示没有节点与内存相对应；</li><li>节点：映像文件的节点号；</li><li>路径: 映像文件的路径</li><li>每项都与一个vm_area_struct结构成员对应。</li></ul><p>利用进程8423来举例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs shell">sagit:/proc/7289 $ cat maps<br>5a29274000-5a292cc000 r-xp 00000000 103:1d 7356                          /system/bin/sh<br>5a292e2000-5a292e4000 r--p 0005e000 103:1d 7356                          /system/bin/sh<br>5a292e4000-5a292e5000 rw-p 00060000 103:1d 7356                          /system/bin/sh<br>5a292e5000-5a292e7000 rw-p 00000000 00:00 0<br>7cfd800000-7cfdc00000 rw-p 00000000 00:00 0                              [anon:libc_malloc]<br>7cfdd59000-7cfdd5b000 r-xp 00000000 103:1d 6092                          /system/lib64/libnetd_client.so<br>7cfdd5b000-7cfdd78000 ---p 00000000 00:00 0<br>7cfdd78000-7cfdd79000 r--p 0000f000 103:1d 6092                          /system/lib64/libnetd_client.so<br>7cfdd79000-7cfdd7a000 rw-p 00010000 103:1d 6092                          /system/lib64/libnetd_client.so<br>7cfdd83000-7cfde55000 r-xp 00000000 103:1d 6091                          /system/lib64/libc++.so<br>7cfde55000-7cfde6c000 ---p 00000000 00:00 0<br>7cfde6c000-7cfde76000 r--p 000d6000 103:1d 6091                          /system/lib64/libc++.so<br>7cfde76000-7cfde77000 rw-p 000e0000 103:1d 6091                          /system/lib64/libc++.so<br>7cfde77000-7cfde7a000 rw-p 00000000 00:00 0                              [anon:.bss]<br>7cfde9e000-7cfdea0000 r-xp 00000000 103:1d 6374                          /system/lib64/libdl.so<br>7cfdea0000-7cfdebd000 ---p 00000000 00:00 0<br>7cfdebd000-7cfdebe000 r--p 0000f000 103:1d 6374                          /system/lib64/libdl.so<br>7cfdebe000-7cfdebf000 rw-p 00000000 00:00 0                              [anon:.bss]<br>7cfdec7000-7cfdfb6000 r-xp 00000000 103:1d 6620                          /system/lib64/libc.so<br>7cfdfb6000-7cfdfd1000 ---p 00000000 00:00 0<br>7cfdfd1000-7cfdfd7000 r--p 000fa000 103:1d 6620                          /system/lib64/libc.so<br>7cfdfd7000-7cfdfd9000 rw-p 00100000 103:1d 6620                          /system/lib64/libc.so<br>7cfdfd9000-7cfdfda000 rw-p 00000000 00:00 0                              [anon:.bss]<br>7cfdfda000-7cfdfdb000 r--p 00000000 00:00 0                              [anon:.bss]<br>7cfdfdb000-7cfdfe3000 rw-p 00000000 00:00 0                              [anon:.bss]<br>7cfe01b000-7cfe052000 r-xp 00000000 103:1d 6495                          /system/lib64/libm.so<br>7cfe052000-7cfe06a000 ---p 00000000 00:00 0<br>7cfe06a000-7cfe06b000 r--p 0003f000 103:1d 6495                          /system/lib64/libm.so<br>7cfe06b000-7cfe06c000 rw-p 00040000 103:1d 6495                          /system/lib64/libm.so<br>7cfe06f000-7cfe08f000 r--s 00000000 00:13 16938                          /dev/__properties__/u:object_r:default_prop:s0<br>7cfe08f000-7cfe090000 rw-p 00000000 00:00 0                              [anon:linker_alloc]<br>7cfe09f000-7cfe0a0000 r--p 00000000 00:00 0                              [anon:atexit handlers]<br>7cfe0a0000-7cfe0c0000 r--s 00000000 00:13 17058                          /dev/__properties__/properties_serial<br>7cfe0c0000-7cfe0c2000 rw-p 00000000 00:00 0                              [anon:System property context nodes]<br>7cfe0c2000-7cfe0c9000 r--s 00000000 00:13 16892                          /dev/__properties__/property_info<br>7cfe0c9000-7cfe0ca000 rw-p 00000000 00:00 0                              [anon:linker_alloc_vector]<br>7cfe0ca000-7cfe0cb000 rw-p 00000000 00:00 0                              [anon:arc4random data]<br>7cfe0cb000-7cfe0cc000 rw-p 00000000 00:00 0                              [anon:linker_alloc_vector]<br>7cfe0cc000-7cfe0cd000 rw-p 00000000 00:00 0                              [anon:linker_alloc_small_objects]<br>7cfe0cd000-7cfe0ce000 rw-p 00000000 00:00 0                              [anon:linker_alloc]<br>7cfe0ce000-7cfe0ee000 r--s 00000000 00:13 16938                          /dev/__properties__/u:object_r:default_prop:s0<br>7cfe0ee000-7cfe0f0000 rw-p 00000000 00:00 0                              [anon:linker_alloc_vector]<br>7cfe0f0000-7cfe0f1000 rw-p 00000000 00:00 0                              [anon:linker_alloc_small_objects]<br>7cfe0f1000-7cfe0f2000 r--p 00000000 00:00 0                              [anon:linker_alloc]<br>7cfe0f2000-7cfe112000 r--s 00000000 00:13 16936                          /dev/__properties__/u:object_r:debug_prop:s0<br>7cfe112000-7cfe113000 ---p 00000000 00:00 0<br>7cfe113000-7cfe114000 rw-p 00000000 00:00 0<br>7cfe114000-7cfe115000 ---p 00000000 00:00 0<br>7cfe115000-7cfe135000 r--s 00000000 00:13 17058                          /dev/__properties__/properties_serial<br>7cfe135000-7cfe137000 rw-p 00000000 00:00 0                              [anon:System property context nodes]<br>7cfe137000-7cfe272000 r-xp 00000000 103:1d 7367                          /system/bin/linker64<br>7cfe272000-7cfe279000 r--s 00000000 00:13 16892                          /dev/__properties__/property_info<br>7cfe279000-7cfe27a000 r--p 00000000 00:00 0                              [anon:linker_alloc]<br>7cfe27a000-7cfe27b000 rw-p 00000000 00:00 0                              [anon:linker_alloc_vector]<br>7cfe27b000-7cfe27c000 rw-p 00000000 00:00 0                              [anon:linker_alloc_small_objects]<br>7cfe27c000-7cfe27d000 rw-p 00000000 00:00 0                              [anon:linker_alloc_vector]<br>7cfe27d000-7cfe27e000 rw-p 00000000 00:00 0                              [anon:linker_alloc_small_objects]<br>7cfe27e000-7cfe27f000 r--p 00000000 00:00 0                              [anon:atexit handlers]<br>7cfe27f000-7cfe280000 ---p 00000000 00:00 0                              [anon:thread signal stack guard]<br>7cfe280000-7cfe284000 rw-p 00000000 00:00 0                              [anon:thread signal stack]<br>7cfe284000-7cfe285000 rw-p 00000000 00:00 0                              [anon:arc4random data]<br>7cfe285000-7cfe286000 ---p 00000000 00:00 0                              [anon:bionic TLS guard]<br>7cfe286000-7cfe289000 rw-p 00000000 00:00 0                              [anon:bionic TLS]<br>7cfe289000-7cfe28a000 ---p 00000000 00:00 0                              [anon:bionic TLS guard]<br>7cfe28a000-7cfe28b000 r--p 00000000 00:00 0                              [vvar]<br>7cfe28b000-7cfe28c000 r-xp 00000000 00:00 0                              [vdso]<br>7cfe28c000-7cfe297000 r--p 00145000 103:1d 7367                          /system/bin/linker64<br>7cfe297000-7cfe298000 rw-p 00150000 103:1d 7367                          /system/bin/linker64<br>7cfe298000-7cfe29b000 rw-p 00000000 00:00 0<br>7cfe29b000-7cfe29c000 r--p 00000000 00:00 0<br>7cfe29c000-7cfe2a3000 rw-p 00000000 00:00 0<br>7fc781b000-7fc783c000 rw-p 00000000 00:00 0                              [stack]<br></code></pre></td></tr></table></figure><p>对于每个so文件会出现多次：</p><p>看它们的权限就明白了，r-xp是代码段，r--p是只读数据段，rw-p是读写数据段。</p><h2 id="smap">smap</h2><ul><li><strong>文件</strong></li></ul><p>这是进程使用内存的详细说明 , 比 maps 信息更详细</p><h2 id="root">root</h2><ul><li>目录</li></ul><p>该符号链接指向该进程使用的根目录。通常为 /</p><h2 id="stat">stat</h2><ul><li><strong>文件</strong></li></ul><p>包含了进程的众多信息和与CPU相关的信息，所有值都是从系统启动开始累计到当前时刻的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sagit:/proc/8423 # cat stat<br>8423 (.DungeonShooter) S 28120 28120 0 0 -1 1077952832 379799 22501 52 0 52306 7718 21 6 16 -4 142 0 128300431 10283085824 250149 18446744073709551615 411018997760 411019016668 549174228864 549174220000 484306082512 0 4608 1 1619039484 0 0 0 17 3 0 0 0 0 0 411019127392 411019128832 411669524480 549174229540 549174229639 549174229639 549174231006 0<br></code></pre></td></tr></table></figure><p>解释：</p><ul><li>pid = 8423 进程(包括轻量级进程，即线程)号</li><li>comm = .DungeonShooter 应用程序或命令的名字</li><li>task_state = S 任务的状态，R:runnign, S:sleeping (TASK_INTERRUPTIBLE), D:disk sleep (TASK_UNINTERRUPTIBLE), T: stopped, T:tracing stop,Z:zombie, X:dead</li><li>ppid = 28120 父进程ID</li><li>pgid = 28120(第二个) 线程组号</li><li>sid = 0 该任务所在的会话组ID</li><li>后面字段参考文章没说......那天查到了在看看..</li></ul><h2 id="statm">statm</h2><ul><li><strong>文件</strong></li></ul><p>包含了进程的内存页面相关的信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sagit:/proc/8423 # cat statm<br>2510783 250132 79509 5 0 2222893 0<br></code></pre></td></tr></table></figure><p>解释：</p><ul><li>size(pages):任务虚拟地址空间大小，VmSize/4</li><li>Resident(pages)：正在使用的物理内存大小，VmRSS/4</li><li>Shared(pages)：共享页数</li><li>Trs(pages)：程序所拥有的可执行虚拟内存大小， VmExe/4</li><li>Lrs(pages)：被映像倒任务的虚拟内存空间的库的大小，VmLib/4</li><li>Drs(pages)：程序数据段和用户态的栈的大小，(VmData+ VmStk )/4</li><li>dt(pages)：脏页数量</li></ul><h2 id="status">status</h2><ul><li><strong>文件</strong></li></ul><p>该文件包含该进程的众多信息：可执行文件名、当前状态、PID 和 PPID、实际及有效的 UID 和 GID、内存使用情况、以及其他。请注意，<code>stat</code> 和 <code>statm</code> 现已过时。它们包含的信息现存于 <code>status</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs shell">sagit:/proc/8423 # cat status<br>Name:   .DungeonShooter<br>State:  S (sleeping)<br>Tgid:   8423<br>Pid:    8423<br>PPid:   28120<br>TracerPid:      0<br>Uid:    10164   10164   10164   10164<br>Gid:    10164   10164   10164   10164<br>Ngid:   0<br>FDSize: 512<br>Groups: 3002 3003 9997 20164 50164<br>VmPeak: 10244096 kB<br>VmSize: 10042076 kB<br>VmLck:         0 kB<br>VmPin:         0 kB<br>VmHWM:   1003672 kB<br>VmRSS:    997928 kB<br>VmData:  8882068 kB<br>VmStk:      8448 kB<br>VmExe:        20 kB<br>VmLib:    389332 kB<br>VmPTE:      4088 kB<br>VmPMD:        60 kB<br>VmSwap:    24468 kB<br>Threads:        142<br>SigQ:   0/22094<br>SigPnd: 0000000000000000<br>ShdPnd: 0000000000000000<br>SigBlk: 0000000000001200<br>SigIgn: 0000002800000001<br>SigCgt: 00000006608094fc<br>CapInh: 0000000000000000<br>CapPrm: 0000000000000000<br>CapEff: 0000000000000000<br>CapBnd: 0000000000000000<br>CapAmb: 0000000000000000<br>Seccomp:        2<br><br>Speculation_Store_Bypass:       unknown<br>Cpus_allowed:   ff<br>Cpus_allowed_list:      0-7<br>Mems_allowed:   1<br>Mems_allowed_list:      0<br>voluntary_ctxt_switches:        3962<br>nonvoluntary_ctxt_switches:     545<br></code></pre></td></tr></table></figure><p>解释：</p><ul><li>Name: 应用程序或命令的名字</li><li>State: 任务的状态，运行/睡眠/僵死/</li><li>SleepAVG: 任务的平均等待时间(以nanosecond为单位)，交互式任务因为休眠次数多、时间长，它们的 sleep_avg 也会相应地更大一些，所以计算出来的优先级也会相应高一些。</li><li>Tgid: 线程组号</li><li>Pid: 任务ID</li><li>Ppid: 父进程ID</li><li>TracerPid: 接收跟踪该进程信息的进程的ID号</li><li>Uid: Uid euid suid fsuid</li><li>Gid: Gid egid sgid fsgid</li><li>Ngid</li><li>FDSize: 该字段是表示当前进程分配过的文件描述符的近似的最高值。如果刚开始打开了18个文件，则这里的FDSize等于32，若大于32，则以32为单位递增，例如33则是64；这个32的单位是依赖于系统位数的，如果是32位则是32，若是64位系统则是以64倍增。</li><li>Groups:</li><li>VmPeak: 虚拟内存峰值大小</li><li>VmSize(KB): 已经使用的虚拟内存大小</li><li>VmLck(KB): 任务已经锁住的物理内存的大小。锁住的物理内存不能交换到硬盘 (locked_vm)</li><li>VmPin(KB):</li><li>VmHWM(KB): 进程所使用的物理内存的峰值</li><li>VmRSS(KB): 应用程序正在使用的物理内存的大小，就是用ps命令的参数rss的值 (rss)</li><li>VmData(KB): 程序数据段的大小（所占虚拟内存的大小），存放初始化了的数据； (total_vm-shared_vm-stack_vm)</li><li>VmStk(KB): 任务在用户态的栈的大小 (stack_vm)</li><li>VmExe(KB): 程序所拥有的可执行虚拟内存的大小，代码段，不包括任务使用的库 (end_code-start_code)</li><li>VmLib(KB): 被映像到任务的虚拟内存空间的库的大小 (exec_lib)</li><li>VmPTE: 该进程的所有页表的大小，单位：kb</li><li>VmPMD</li><li>VmSwap：进程所使用的交换区的大小</li><li>Threads: 共享使用该信号描述符的任务的个数，在POSIX多线程序应用程序中，线程组中的所有线程使用同一个信号描述符。</li><li>SigQ: 待处理信号的个数</li><li>SigPnd: 屏蔽位，存储了该线程的待处理信号</li><li>ShdPnd: 屏蔽位，存储了该线程组的待处理信号</li><li>SigBlk: 存放被阻塞的信号</li><li>SigIgn: 存放被忽略的信号</li><li>SigCgt: 存放被俘获到的信号</li><li>CapInh (Inheritable): 能被当前进程执行的程序的继承的能力</li><li>CapPrm (Permitted): 进程能够使用的能力，可以包含CapEff中没有的能力，这些能力是被进程自己临时放弃的，CapEff是CapPrm的一个子集，进程放弃没有必要的能力有利于提高安全性</li><li>CapEff (Effective): 进程的有效能力</li><li>CapBnd: 是系统的边界能力,我们无法改变它。</li><li>Cpus_allowed: 指出该进程可以使用CPU的亲和性掩码,因为我们指定为4块CPU,所以这里就是F(1111)。</li><li>Cpus_allowed_list: 指出该进程可以使用CPU的列表,这里是0-7。</li><li>voluntary_ctxt_switches: 表示进程主动切换的次数.</li><li>nonvoluntary_ctxt_switches: 表示进程被动切换的次数.</li></ul><p>你问没写到的？我懒得查了</p><h2 id="mem">mem</h2><ul><li><strong>文件</strong></li></ul><p>这是一个很重要的虚拟文件，它可以用来访问该进程的内存页面，你可以通过open、read、lseek函数来访问里面的内容。如果你用cat来打印里面的内容是会出错的。</p><p>mem是进程的内存映射文件 , 通过 smaps 可以获取各个模块的地址，将 mem 看做一个文件 , 使用 fseek 跳转到对应偏移地址中 , 可以读取对应地址内存中的数据。</p><h2 id="task">task</h2><ul><li><strong>文件夹</strong></li></ul><p>task 目录是该进程的子线程</p><h2 id="oom_adj">oom_adj</h2><ul><li><strong>文件</strong></li></ul><p>这是进程的优先级</p><p>oom_adj 值越小 , 进程优先级越高 , 越不容易被杀死</p><h1 id="逆向相关大的">逆向相关大的</h1><p><strong>纯属总结</strong>：</p><ul><li>mem (!!!!)<ul><li>可以通过这个来修改内存，这很符合我对安卓逆向的想象。</li></ul></li><li>maps / smaps</li><li>task</li><li>environ</li><li>cwd / cmd</li></ul>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>adb指令记录</title>
    <link href="/2023/07/26/adb%E6%8C%87%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/07/26/adb%E6%8C%87%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="记在前面">记在前面</h1><p>本文旨在记录自己遇到用过的adb指令，方便日后查找</p><div class="note note-info">            <p>建议：使用本文档时，使用查找功能</p>          </div><div class="note note-warning">            <p>注：以下命令全部基于adb设置到环境变量之中</p>          </div><h1 id="adb指令非shell命令">adb指令(非shell命令)</h1><h2 id="安装app">安装app</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">adb <span class="hljs-keyword">install</span> apk文件绝对路径<br></code></pre></td></tr></table></figure><h2 id="卸载app">卸载app</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">adb</span> uninstall 包名<br></code></pre></td></tr></table></figure><h2 id="将设备文件拉取到本地">将设备文件拉取到本地</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">adb</span> pull 设备文件路径 本地保存路径<br></code></pre></td></tr></table></figure><h2 id="将本地文件上传到设备">将本地文件上传到设备</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">adb <span class="hljs-built_in">push</span> 本地文件路径 设备文件保存路径<br></code></pre></td></tr></table></figure><h2 id="截屏">截屏</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">adb <span class="hljs-keyword">shell </span><span class="hljs-keyword">screencap </span>-p 截图文件保存设备上的路径<br></code></pre></td></tr></table></figure><h2 id="录屏">录屏</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">adb <span class="hljs-keyword">shell </span><span class="hljs-keyword">screenrecord </span>录屏保存设备上的路径<br></code></pre></td></tr></table></figure><h2 id="输入文本内容">输入文本内容</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">adb <span class="hljs-built_in">shell</span> input <span class="hljs-keyword">text</span> <span class="hljs-string">&#x27;输入的内容&#x27;</span><br></code></pre></td></tr></table></figure><p>不懂这指令什么效果</p><h2 id="查看手机架构"><strong>查看手机架构</strong></h2><p>查看cpu架构：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">adb shell getprop ro<span class="hljs-selector-class">.product</span><span class="hljs-selector-class">.cpu</span>.abi<br></code></pre></td></tr></table></figure><p>查看该手机支持的全部架构：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">adb shell getprop ro<span class="hljs-selector-class">.product</span><span class="hljs-selector-class">.cpu</span>.abilist<br></code></pre></td></tr></table></figure><h2 id="查看所有进程信息">查看所有进程信息</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span> <span class="hljs-keyword">ps</span><br>adb <span class="hljs-keyword">shell</span> <span class="hljs-keyword">ps</span> -ef<br></code></pre></td></tr></table></figure><p>可以用shell的管道特性，来查找关键词的进程：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-string">&quot;ps |grep keyword&quot;</span></span><br></code></pre></td></tr></table></figure><p>keyword是要查找的关键词</p><h2 id="杀死进程">杀死进程</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">kill</span> -9 进程号</span><br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span> <span class="hljs-keyword">am</span> force-<span class="hljs-keyword">stop</span> 包名全称<br></code></pre></td></tr></table></figure><h2 id="查看当前运行app详细信息">查看当前运行app详细信息</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">adb shell dumpsys activity <span class="hljs-built_in">top</span><br></code></pre></td></tr></table></figure><h2 id="查看指定应用详细情况">查看指定应用详细情况</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> dumpsys 包名</span><br></code></pre></td></tr></table></figure><h2 id="查看指定包名应用的数据库存储信息">查看指定包名应用的数据库存储信息</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> dumpsys dbinfo 包名</span><br></code></pre></td></tr></table></figure><h2 id="端口转发">端口转发</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">adb</span> forward tcp:<span class="hljs-number">27042</span> tcp:<span class="hljs-number">27042</span><br></code></pre></td></tr></table></figure><h2 id="查看当前进程内存信息">查看当前进程内存信息</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> dumpsys meminfo 包名或者进程<span class="hljs-built_in">id</span></span><br></code></pre></td></tr></table></figure><h2 id="清空应用数据">清空应用数据</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">adb <span class="hljs-built_in">shell</span> pm <span class="hljs-keyword">clear</span> 包名<br></code></pre></td></tr></table></figure><h1 id="shell命令">shell命令</h1><p>绝大部分shell命令可以通过adb shell + [command]做到</p><h2 id="安装app-1">安装app</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pm <span class="hljs-keyword">install</span> apk路径<br></code></pre></td></tr></table></figure><h2 id="卸载app-1">卸载app</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">pm</span> uninstall 包名<br></code></pre></td></tr></table></figure><h2 id="启动应用">启动应用</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">am <span class="hljs-literal">start</span> -n 包名/包名.activity名称<br></code></pre></td></tr></table></figure><h2 id="启动服务">启动服务</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">am startservice -<span class="hljs-built_in">n</span> 包名/包名.service名称<br></code></pre></td></tr></table></figure><h2 id="查看设备ip地址">查看设备ip地址</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netcfg</span><br></code></pre></td></tr></table></figure><h2 id="运行java代码">运行java代码</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">app_process</span>  代码运行目录 代码主类<br></code></pre></td></tr></table></figure><h2 id="运行一个dex文件">运行一个dex文件</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">dalvikvm</span> -<span class="hljs-meta">cp</span> dex文件 运行主类<br></code></pre></td></tr></table></figure><h2 id="查看进程包名">查看进程包名</h2><p>通过/proc/pid目录中的cmdline可以得到指定pid进程包名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> cmdline<br></code></pre></td></tr></table></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230726125921112.png" alt="image-20230726125921112" /><figcaption aria-hidden="true">image-20230726125921112</figcaption></figure><p>本质是获得指定进程的cmd窗口内容</p><p>对于proc目录的详情，请参考：<a href="https://azureussimu.github.io/2023/07/26/proc%E7%9B%AE%E5%BD%95%E5%AD%A6%E4%B9%A0/">proc目录学习</a></p><h2 id="进程查询">进程查询</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef<br></code></pre></td></tr></table></figure><h2 id="查看指定应用debug数据">查看指定应用debug数据</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">run</span>-<span class="hljs-keyword">as</span> 包名<br></code></pre></td></tr></table></figure><h2 id="列出文件列表">列出文件列表</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">ls [-a|<span class="hljs-type">-A</span>……] [filename|<span class="hljs-type">directory</span>]<br></code></pre></td></tr></table></figure><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-a</td><td>显示指定目录下所有子目录与文件，包括隐藏文件</td></tr><tr class="even"><td>-A</td><td>显示指定目录下所有子目录与文件，包括隐藏文件，但不列出“.”、“..”</td></tr><tr class="odd"><td>-c</td><td>按文件的修改时间排列</td></tr><tr class="even"><td>-F</td><td>在目录名后面标记“/”，可执行文件后面标记“*”，符号链接后面标记“@”，管道后面标记“</td></tr><tr class="odd"><td>-I</td><td>以列表格式来显示文件的详细信息</td></tr><tr class="even"><td>-L</td><td>若指定文件为一个符号链接文件，则显示链接所指向的文件</td></tr><tr class="odd"><td>-o</td><td>与-l选项相同，只是不显示拥有者的信息</td></tr><tr class="even"><td>-r</td><td>按字母逆序或最早优先的顺序显示输出结果</td></tr><tr class="odd"><td>-R</td><td>递归式地显示指定目录的各个子目录中的文件</td></tr><tr class="even"><td>-t</td><td>按修改时间顺序显示输出结果</td></tr><tr class="odd"><td>-u</td><td>按文件上次存取的时间显示输出结果</td></tr><tr class="even"><td>-h</td><td>文件大小按k、M、G为单位显示，与-l一起使用</td></tr></tbody></table><p>备注：</p><p>.（点） 表示当前目录</p><p>..（点点） 表示上一级目录</p><h2 id="切换文件路径">切换文件路径</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span><span class="hljs-meta"> [directory]</span><br></code></pre></td></tr></table></figure><p>cd ~：切换到家目录</p><p>cd -：返回上一次操作目录</p><p>cd ../：返回上一级目录</p><p>注：如果单独使用cd命令，用户将返回到自己的主目录中，如果cd命令的目标路径不正确，系统会提示“没有这个文件或目录”，否则就从当前位置跳转到目标位置。目标路径名可以是绝对路径，也可以是相对路径。使用绝对路径，无论用户当前处在什么位置，只要是授权用户，就可以转移到指定目录中；使用相对路径时，cd命令以当前位置为起点，跳转到指定目录中。因此，这就需要用户事先明确自己所处的位置。</p><h2 id="创建普通文件更新访问文件的时间">创建普通文件、更新访问文件的时间</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">touch</span><span class="hljs-meta"> [filename]</span><br></code></pre></td></tr></table></figure><p>如果文件不存在，就创建该文件</p><p>如果文件存在，就更新文件的时间</p><h2 id="删除文件或目录">删除文件或目录</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">rm [-i|<span class="hljs-type">-f</span>|<span class="hljs-type">-r</span>|<span class="hljs-type">-v</span>] [DEST]<br></code></pre></td></tr></table></figure><p>DEST表示目标文件，既可以是普通文件，也可以是目录。rm命令支持多文件/目录删除。删除操作需要具有必要的权限，通常至少要对目标文件/目录具有写入权限。</p><p>rm dir/ -r：删除一个目录，-r表示递归地删除目录</p><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-f</td><td>非交互模式的删除操作，忽略不存在的文件</td></tr><tr class="even"><td>-i</td><td>交互模式的删除操作。在删除目标文件之前将给出提示，要求用户确认，回答“y”表示目标文件将被删除</td></tr><tr class="odd"><td>-r</td><td>若源文件是一个目录，rm命令将递归地删除该目录下的所有子目录和文件</td></tr><tr class="even"><td>-v</td><td>显示详细的删除过程</td></tr></tbody></table><h2 id="复制文件">复制文件</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">cp <span class="hljs-selector-attr">[-a|-d……]</span> <span class="hljs-selector-attr">[SOURSE]</span> <span class="hljs-selector-attr">[DEST]</span><br></code></pre></td></tr></table></figure><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-a</td><td>该选项通常在拷贝目录时使用，保留链接、文件属性，并递归地拷贝目录，其作用等于dpr选项的组合</td></tr><tr class="even"><td>-d</td><td>拷贝时保留链接</td></tr><tr class="odd"><td>-f</td><td>非交互模式的复制操作。覆盖已经存在的目标文件而不提示</td></tr><tr class="even"><td>-i</td><td>交互模式的复制操作，与-f选项相反。在覆盖目标文件之前将给出提示，要求用户确认，回答“y”表示目标文件将被覆盖</td></tr><tr class="odd"><td>-p</td><td>除复制源文件内容外，还将其修改时间和访问权限也同时复制</td></tr><tr class="even"><td>-r</td><td>若源文件是一个目录，cp命令将递归地复制该目录下的所有子目录和文件</td></tr></tbody></table><h2 id="移动文件">移动文件</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mv <span class="hljs-selector-attr">[-i|-f|-v]</span> <span class="hljs-selector-attr">[SOURSE]</span> <span class="hljs-selector-attr">[DEST]</span><br></code></pre></td></tr></table></figure><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-f</td><td>非交互模式的移动操作。覆盖已经存在的目标文件而不提示</td></tr><tr class="even"><td>-i</td><td>交互模式的移动操作。在覆盖目标文件之前将给出提示，要求用户确认，回答“y”表示目标文件将被覆盖</td></tr><tr class="odd"><td>-v</td><td>显示详细的移动过程</td></tr></tbody></table><h2 id="打印当前路径">打印当前路径</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><h2 id="修改文件或目录权限">修改文件或目录权限</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">chmod [<span class="hljs-type">options</span>] file<br>chmod (u/g/o/a)+/-/=(<span class="hljs-built_in">r</span>/w/x) filename<br></code></pre></td></tr></table></figure><p>u：user</p><p>g：group</p><p>o：other</p><p>a：all</p><p>+：获取一个权限</p><p>-：除去一个权限</p><p>=：赋值一个权限</p><p>r：可读</p><p>w：可写</p><p>x：可执行</p><p>将文件的权限用3个八进制数来表示，可以更方便地修改多个权限，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs example">rwxr-xr-x<br>111 101 101 (755) <br><br>rw-r--r--<br>110 100 100 (644)<br></code></pre></td></tr></table></figure><p>chmod 644 file 将file的权限改成rw- r-- r--</p><p>chmod 755 file 将file的权限改成rwx r-x r-x</p><p>chmod 777 file 使文件获取所有权限</p>]]></content>
    
    
    <categories>
      
      <category>安卓相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unicode常用范围</title>
    <link href="/2023/07/11/unicode%E5%B8%B8%E7%94%A8%E8%8C%83%E5%9B%B4/"/>
    <url>/2023/07/11/unicode%E5%B8%B8%E7%94%A8%E8%8C%83%E5%9B%B4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>爬虫从网站上爬取的内容在读写操作时经常会报以下错误：</p><p>UnicodeEncodeError: 'gbk' codec can't encode character '00b' in position 7: illegal multibyte sequence</p><p>所以需要我们对数据Unicode进行清洗，排除文章内异常的Unicode符号。</p></blockquote><h1 id="清洗思路">清洗思路</h1><p>我的思路是用正则表达式来匹配常用字，不在范围内的Unicode编码则去除。</p><p>.compile(u"[^常用字范围]+")匹配到非范围内字符后，</p><p>.sub()方法将特殊字符替换成空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">illegal_char</span>(<span class="hljs-params">s</span>):<br>    s = re \<br>        .<span class="hljs-built_in">compile</span>( <br>        <span class="hljs-string">u&quot;[^&quot;</span><br>        <span class="hljs-string">u&quot;\u4e00-\u9fa5&quot;</span><br>        <span class="hljs-string">u&quot;\u0041-\u005A&quot;</span><br>        <span class="hljs-string">u&quot;\u0061-\u007A&quot;</span><br>        <span class="hljs-string">u&quot;\u0030-\u0039&quot;</span><br>        <span class="hljs-string">u&quot;\u3002\uFF1F\uFF01\uFF0C\u3001\uFF1B\uFF1A\u300C\u300D\u300E\u300F\u2018\u2019\u201C\u201D\uFF08\uFF09\u3014\u3015\u3010\u3011\u2014\u2026\u2013\uFF0E\u300A\u300B\u3008\u3009&quot;</span><br>        <span class="hljs-string">u&quot;\!\@\#\$\%\^\&amp;\*\(\)\-\=\[\]\&#123;\&#125;\\\|\;\&#x27;\:\&quot;\,\.\/\&lt;\&gt;\?\/\*\+&quot;</span><br>        <span class="hljs-string">u&quot;]+&quot;</span>) \<br>        .sub(<span class="hljs-string">&#x27;&#x27;</span>, s)<br>    <span class="hljs-keyword">return</span> s<br></code></pre></td></tr></table></figure><h1 id="unicode范围">Unicode范围</h1><h2 id="常用范围"><strong>常用范围</strong></h2><table><thead><tr class="header"><th style="text-align: left;">名称</th><th style="text-align: left;">范围</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">中文</td><td style="text-align: left;">\u4e00-\u9fa5</td></tr><tr class="even"><td style="text-align: left;">日文平假名</td><td style="text-align: left;">\u3040-\u309f</td></tr><tr class="odd"><td style="text-align: left;">日文片假名</td><td style="text-align: left;">\u30a0-\u30ff</td></tr><tr class="even"><td style="text-align: left;">韩文</td><td style="text-align: left;">\uac00-\ud7ff</td></tr><tr class="odd"><td style="text-align: left;">英文字母</td><td style="text-align: left;">\u0041-\u005A,\u0061,\u007A</td></tr><tr class="even"><td style="text-align: left;">数字</td><td style="text-align: left;">u0030-u0039</td></tr><tr class="odd"><td style="text-align: left;">英文标点</td><td style="text-align: left;">!@#$%^&amp;<em>()-=[]{}\;':",./&lt;&gt;?/</em>+</td></tr><tr class="even"><td style="text-align: left;">中文标点</td><td style="text-align: left;">使用下面的中文标点挨个匹配</td></tr></tbody></table><p>注:网上有种方法写的中文标点匹配是 000-03f-，但01c，仍然会报错，建议将中文标点挨个匹配</p><h2 id="中文标点对应"><strong>中文标点对应</strong></h2><table><thead><tr class="header"><th style="text-align: left;">名称</th><th style="text-align: left;">Unicode</th><th style="text-align: left;">符号</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">句号</td><td style="text-align: left;">\u3002</td><td style="text-align: left;">。</td></tr><tr class="even"><td style="text-align: left;">问号</td><td style="text-align: left;">\uFF1F</td><td style="text-align: left;">？</td></tr><tr class="odd"><td style="text-align: left;">叹号</td><td style="text-align: left;">\uFF01</td><td style="text-align: left;">！</td></tr><tr class="even"><td style="text-align: left;">逗号</td><td style="text-align: left;">\uFF0C</td><td style="text-align: left;">，</td></tr><tr class="odd"><td style="text-align: left;">顿号</td><td style="text-align: left;">\u3001</td><td style="text-align: left;">、</td></tr><tr class="even"><td style="text-align: left;">分号</td><td style="text-align: left;">\uFF1B</td><td style="text-align: left;">；</td></tr><tr class="odd"><td style="text-align: left;">冒号</td><td style="text-align: left;">\uFF1A</td><td style="text-align: left;">：</td></tr><tr class="even"><td style="text-align: left;">引号</td><td style="text-align: left;">\u300C</td><td style="text-align: left;">「</td></tr><tr class="odd"><td style="text-align: left;"></td><td style="text-align: left;">\u300D</td><td style="text-align: left;">」</td></tr><tr class="even"><td style="text-align: left;"></td><td style="text-align: left;">\u300E</td><td style="text-align: left;">『</td></tr><tr class="odd"><td style="text-align: left;"></td><td style="text-align: left;">\u300F</td><td style="text-align: left;">』</td></tr><tr class="even"><td style="text-align: left;"></td><td style="text-align: left;">\u2018</td><td style="text-align: left;">‘</td></tr><tr class="odd"><td style="text-align: left;"></td><td style="text-align: left;">\u2019</td><td style="text-align: left;">’</td></tr><tr class="even"><td style="text-align: left;"></td><td style="text-align: left;">\u201C</td><td style="text-align: left;">“</td></tr><tr class="odd"><td style="text-align: left;"></td><td style="text-align: left;">\u201D</td><td style="text-align: left;">”</td></tr><tr class="even"><td style="text-align: left;">括号</td><td style="text-align: left;">\uFF08</td><td style="text-align: left;">（</td></tr><tr class="odd"><td style="text-align: left;"></td><td style="text-align: left;">\uFF09</td><td style="text-align: left;">）</td></tr><tr class="even"><td style="text-align: left;"></td><td style="text-align: left;">\u3014</td><td style="text-align: left;">〔</td></tr><tr class="odd"><td style="text-align: left;"></td><td style="text-align: left;">\u3015</td><td style="text-align: left;">〕</td></tr><tr class="even"><td style="text-align: left;"></td><td style="text-align: left;">\u3010</td><td style="text-align: left;">【</td></tr><tr class="odd"><td style="text-align: left;"></td><td style="text-align: left;">\u3011</td><td style="text-align: left;">】</td></tr><tr class="even"><td style="text-align: left;">破折号</td><td style="text-align: left;">\u2014</td><td style="text-align: left;">——</td></tr><tr class="odd"><td style="text-align: left;">省略号</td><td style="text-align: left;">\u2026</td><td style="text-align: left;">……</td></tr><tr class="even"><td style="text-align: left;">连接号</td><td style="text-align: left;">\u2013</td><td style="text-align: left;">–</td></tr><tr class="odd"><td style="text-align: left;">间隔号</td><td style="text-align: left;">\uFF0E</td><td style="text-align: left;">．</td></tr><tr class="even"><td style="text-align: left;">书名号</td><td style="text-align: left;">\u300A</td><td style="text-align: left;">《</td></tr><tr class="odd"><td style="text-align: left;"></td><td style="text-align: left;">\u300B</td><td style="text-align: left;">》</td></tr><tr class="even"><td style="text-align: left;"></td><td style="text-align: left;">\u3008</td><td style="text-align: left;">〈</td></tr><tr class="odd"><td style="text-align: left;"></td><td style="text-align: left;">\u3009</td><td style="text-align: left;">〉</td></tr></tbody></table><h2 id="非英文语系字符范围"><strong>非英文语系字符范围</strong></h2><table><thead><tr class="header"><th style="text-align: left;">范围</th><th style="text-align: left;">编码</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">2E80~33FFh</td><td style="text-align: left;">中日韩符号区</td><td style="text-align: left;">收容康熙字典部首、中日韩辅助部首、注音符号、日本假名、韩文音符，中日韩的符号、标点、带圈或带括符文数字、月份，以及日本的假名组合、单位、年号、月份、日期、时间等。</td></tr><tr class="even"><td style="text-align: left;">3400~4DFFh</td><td style="text-align: left;">中日韩认同文字扩充A区</td><td style="text-align: left;">中日韩认同表意文字扩充A区，总计收容6,582个中日韩汉字。</td></tr><tr class="odd"><td style="text-align: left;">4E00~9FFFh</td><td style="text-align: left;">中日韩认同表意文字区</td><td style="text-align: left;">中日韩认同表意文字区，总计收容20,902个中日韩汉字。</td></tr><tr class="even"><td style="text-align: left;">A000~A4FFh</td><td style="text-align: left;">彝族文字区</td><td style="text-align: left;">收容中国南方彝族文字和字根</td></tr><tr class="odd"><td style="text-align: left;">AC00~D7FFh</td><td style="text-align: left;">韩文拼音组合字区</td><td style="text-align: left;">收容以韩文音符拼成的文字</td></tr><tr class="even"><td style="text-align: left;">F900~FAFFh</td><td style="text-align: left;">中日韩兼容表意文字区</td><td style="text-align: left;">总计收容302个中日韩汉字</td></tr><tr class="odd"><td style="text-align: left;">FB00~FFFDh</td><td style="text-align: left;">文字表现形式区</td><td style="text-align: left;">收容组合拉丁文字、希伯来文、阿拉伯文、中日韩直式标点、小符号、半角符号、全角符号等。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>语言知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>奇怪的知识增加了</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件测试笔记</title>
    <link href="/2023/06/26/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/26/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>这门课是真的什么都找不到，概念又多，但是你看看概念又知道该怎么搞。。。。烦的一。。。</p><h1 id="模型驱动测试设计">模型驱动测试设计</h1><h2 id="发现一个软件失败的四个必要条件">发现一个软件失败的四个必要条件</h2><ul><li><strong>可达性</strong>（Reachability）：测试用例必须到达程序中包含故障的位置</li><li><strong>影响</strong>（Infection）：程序的故障部分被执行后会造成不正确的程序状态</li><li><strong>传播</strong>（Propagation）：被影响后的状态会传播且导致不正确的输出或者错误的最终状态</li><li><strong>揭示性</strong>（Revealability）：测试者能够观察到程序最终状态中不正确的部分</li></ul><h2 id="覆盖准则">覆盖准则</h2><p>定义测试需求的规则和过程的集合</p><ul><li>涵盖所有语句</li><li>涵盖所有功能需求</li></ul><h3 id="可以简化为四种结构">可以简化为四种结构</h3><ul><li>输入域</li><li>图</li><li>逻辑表达式</li><li>语法描述</li></ul><p>​</p><h1 id="测试自动化">测试自动化</h1><h2 id="测试自动化-1">测试自动化</h2><p>使用软件来控制测试用例的执行、实际输出和预期输出的比较、先验条件的设置，以及其他的测试控制和测试报告功能</p><ul><li>降低成本</li><li>减少人为错误</li><li>使回归测试变得更加容易</li></ul><h3 id="可测性">可测性</h3><p>为了评判测试准则是否达标，系统或组件在测试准则建立和测试用例性能提升方面所能提供的便利程度</p><p><strong>两个实际问题很大程度上决定了可测性</strong></p><ul><li>如何向软件提供测试数据</li><li>如何观察测试执行的结果</li></ul><h3 id="可观察性">可观察性</h3><p>观察程序行为的难易程度。程序行为包括输出、程序对运行环境、软件和硬件的影响</p><ul><li>嵌入式软件的可观察性很低</li></ul><h3 id="可控性">可控性</h3><p>向程序提供所需输入的难易程度。程序输入包括数据值、操作和行为</p><ul><li>来自键盘的输入很容易控制</li><li>来自硬件传感器或者分布式软件的输入很难控制</li></ul><p><strong>许多可观察性和可控性问题是用仿真来解决的</strong></p><h2 id="测试用例的结构">测试用例的结构</h2><ul><li><p>测试用例值：在待测软件上完成测试执行所需要的输入值</p></li><li><p>前缀值：将待测软件置于合适状态以接收测试用例值的必要输入</p></li><li><p>后缀值：测试用例值发送之后，待测软件仍然需要的输入</p></li><li><p>验证值：查看测试用例值结果所需要的值</p></li><li><p>退出值：终止程序或使程序回到一个稳定状态所需要的值或命令输入</p></li><li><p>预期结果：当软件的行为符合预期时，软件在测试用例中应产生的结果</p></li><li><p>测试用例：包括必要的测试用例值、前缀值、后缀值和预期结果，以便完整地执行和评估待测软件</p></li><li><p>测试集：测试用例的集合</p></li><li><p>可执行的测试脚本：处于一种可以在待测软件上自动运行和生成报告的形式的测试用例</p></li></ul><h1 id="测试优先">测试优先</h1><p>传统方法在最开始时尝试定义所有正确的行为</p><p>敏捷方法根据一组具体的测试用例来重定义正确性</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230623223356735.png" alt="image-20230623223356735" /><figcaption aria-hidden="true">image-20230623223356735</figcaption></figure><h2 id="测试装置的正确性验证">测试装置的正确性验证</h2><ul><li>测试必须<strong>自动化</strong><ul><li>测试自动化是测试驱动开发的先决条件</li></ul></li><li>每个测试都必须包含一个能够评估该测试是否正确执行的<strong>测试oracle</strong></li><li>测试代替了<strong>需求</strong></li><li>测试必须是<strong>高质量</strong>，并且能<strong>快速运行</strong></li><li>每次<strong>变更软件</strong>时都会运行测试</li></ul><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230623223638004.png" alt="image-20230623223638004" />TDD测试<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="TDD测试用例是指在测试驱动开发（Test-Driven Development，TDD）中，开发人员在编写代码之前先编写测试用例">[1]</span></a></sup></p><p>设计测试</p><p><strong>使用建模和准则</strong></p><ul><li>对输入域建模以设计测试用例</li><li>用图形、逻辑、语法来对软件行为建模</li><li>内置的完成机制</li><li>要求掌握离散数学</li></ul><hr /><h1 id="基于准则的设计测试">基于准则的设计测试</h1><ul><li><strong>测试需求</strong>：软件工件中测试用例必须满足或覆盖的指定元素</li><li><strong>覆盖准则</strong>：一个或者一组决定了在一个测试用例要覆盖的测试需求的规则</li></ul><p><strong>可以简化为四种结构</strong></p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230623224223946.png" alt="image-20230623224223946" /><figcaption aria-hidden="true">image-20230623224223946</figcaption></figure><p>上述四种结构可以从很多软件工件中提取</p><ul><li>图能从UML用例图、有限状态机、源代码等中提取</li><li>逻辑表达式能从源代码的决策、迁移的guard、用例图的条件等中提取</li></ul><h2 id="覆盖">覆盖</h2><p>给定一个覆盖准则C所包含的<strong>测试需求集TR</strong>，<strong>测试用例集T</strong>覆盖准则C，当且仅当对TR中的每一个测试需求tr，T中<strong>至少存在一个</strong>测试用例t满足tr</p><ul><li>100%覆盖在实际中是不可能的</li></ul><p><strong>不可行的测试需求</strong>：不能被满足的测试需求</p><ul><li>满足测试需求的用例值不存在，如Dead code</li><li>对大多数准则，检测需求是否不可行是<strong>不可判定的</strong></li></ul><h2 id="极小最小覆盖准则">极小/最小覆盖准则</h2><h3 id="极小测试用例集">极小测试用例集</h3><p>给定一个测试需求集TR和一个满足所有测试需求的测试用例集T，如果<strong>从T中移除任意单个的测试用例会导致T不再满足所有的测试需求</strong>，那么T就是极小的（<strong>没有冗余的</strong>）</p><h3 id="最小测试用例集">最小测试用例集</h3><p>给定一个测试需求集TR和一个满足所有测试需求的测试用例集T，<strong>如果不存在满足所有测试需求的更小的测试用例集</strong>，那么T就是最小的</p><ul><li>检测一个测试用例集是否极小的是容易的</li><li>检测一个测试用例集是否最小的是不可判定的</li></ul><h2 id="覆盖程度">覆盖程度</h2><p>给定一个测试需求集TR和一个测试用例集T，T满足TR中的测试需求数和TR的需求总数的比例</p><h2 id="准则覆盖">准则覆盖</h2><p>测试准则C1包含测试准则C2，当且仅当满足C1的<strong>所有</strong>测试用例集也满足C2</p><ul><li>假设覆盖准则C1包含覆盖准则C2，且有在程序P上的测试用例集T1满足C1，在程序P上的测试用例集T2满足C2<ul><li>T1一定满足C2</li><li>T2不一定满足C1</li><li>T2能揭示的故障T1不一定能揭示</li></ul></li></ul><h2 id="基于准则测试的好处">基于准则测试的好处</h2><ul><li><p>最大化“<strong>收益</strong>”</p><ul><li>更少的测试用例能更有效地发现故障</li></ul></li><li><p><strong>全面且极小</strong>重叠的测试用例集</p></li><li><p>软件工件的<strong>可追溯性</strong></p><ul><li><p>准则是从特定软件工件推导出来的</p></li><li><p>对回归测试提供内置支持</p></li></ul></li><li><p><strong>停止</strong>规则</p><ul><li>可以提前知道有多少测试用例</li></ul></li><li><p>便于自动化</p></li></ul><h2 id="好的覆盖准则的特征">好的覆盖准则的特征</h2><ol type="1"><li>能够很<strong>容易地自动产生</strong>测试需求</li><li>能够很<strong>高效地生成</strong>测试用例值</li><li>能够<strong>发现尽可能多</strong>的软件故障</li></ol><h1 id="输入空间划分">输入空间划分</h1><p>本质上，所有测试都是从待测软件的输入空间中选择（有限）元素</p><ul><li>即使是小程序，输入空间可能巨大甚至无穷</li></ul><p><strong>输入空间划分</strong>：根据程序输入的逻辑划分关系来直接划分输入空间</p><h2 id="优点">优点</h2><ul><li>可应用于多个级别的测试<ul><li>单元、集成、系统</li></ul></li><li>容易上手，无需自动化</li><li>易于调节，以便获得更多或更少的测试</li><li>不需要了解实现细节<ul><li>只需了解输入空间</li></ul></li></ul><h2 id="输入域">输入域</h2><ul><li><p>程序的输入域包含该程序的<strong>所有可能输入</strong></p></li><li><p>输入域定义为<strong>输入参数</strong>可能拥有的全部测试值</p><ul><li><p>方法参数</p></li><li><p>非局部变量</p></li><li><p>从文件中读取的数据</p></li><li><p>用户输入</p></li><li><p>代表程序当前状态的对象</p></li></ul></li><li><p>输入空间划分：将输入域<strong>划分</strong>为区块，并从每个区块中至少选择一个（代表性）值</p></li></ul><h2 id="域及其划分">域及其划分</h2><p>存在<strong>域D</strong>，域D上的<strong>划分q</strong>；</p><p>划分q定义一个区块集合<span class="math inline">\(B_q=\{b_1,b_2,b_3,....\}\)</span></p><p>划分必须满足两个属性：</p><ul><li>区块间必须两两不相交(互斥性)</li><li>区块的并能够覆盖域D(完备性)</li></ul><h2 id="输入域划分idm">输入域划分(IDM)</h2><h3 id="五个步骤">五个步骤</h3><ol type="1"><li>识别可测试的功能<ul><li>每个（公有）方法都是一个可测试的功能</li><li>同个类中的方法通常具有相同的特性</li></ul></li><li>识别所有参数<ul><li>通常较简单，甚至是机械的</li><li>完整性很重要</li></ul></li><li>对输入域建模<ul><li>输入域是由参数确定</li><li>输入域的结构是根据特征来定义的</li></ul></li><li>应用测试准则选择值的组合<ul><li>每个测试输入都有一个值对应于每个参数</li><li>每个特征都有一个区块</li><li>选择所有组合通常是不可行的</li><li>覆盖准则允许选择子集</li></ul></li><li>将组合值细化为测试输入</li></ol><h3 id="两种方法">两种方法</h3><ul><li><p>基于接口的输入域建模</p><ul><li><p>独立分析每个参数</p></li><li><p>简单的建模技术，主要依赖于语法</p></li><li><p>一些域和语义信息将不被使用</p><ul><li>可能导致IDM不全面</li></ul></li><li><p>忽略参数之间的关系</p></li></ul></li><li><p>基于功能的输入域建模</p><ul><li><p>识别与待测系统所设计的功能相对应的特征</p></li><li><p>可以结合专业领域和语义知识</p></li><li><p>可以利用参数之间的关系</p></li><li><p>建模是基于需求，而不是实现</p></li><li><p>同一个参数可能出现在多个特征中，因此很难将值转换为测试用例</p></li><li><p>需要更多的设计工作</p></li></ul></li></ul><h2 id="设计特征">设计特征</h2><h3 id="特征候选集">特征候选集</h3><ul><li>前置条件和后置条件</li><li>变量之间的关系（是否别名等）</li><li>变量与特殊值的关系（零、null、空等）</li><li>缺失的因素（影响出现执行的因素）</li></ul><p>注：不应该使用程序源代码，程序源代码应<strong>与图或逻辑准则</strong>一起使用</p><h2 id="选择区块和测试值">选择区块和测试值</h2><p><strong>关键：</strong>如何设计划分和选择代表性测试值</p><p>划分通常直接从特征设计开始，且一起完成</p><h3 id="识别代表性测试值的策略">识别代表性测试值的策略</h3><ul><li><strong>有效值、无效值和特殊值</strong></li><li>对某些区块进行<strong>子划分</strong></li><li>探索区块<strong>边界</strong></li><li>表示“<strong>正常使用</strong>”的值（大众路径）</li><li>尝试<strong>平衡</strong>每个特征中的区块数</li><li>检查<strong>完整性</strong>（遗留区块）和<strong>互斥性</strong>（重叠区块）</li></ul><h3 id="使用多个idm">使用多个IDM</h3><p>某些程序可能使用<strong>几十个甚至几百个</strong>参数</p><ul><li>采用分而治之，构建几个小型IDM</li><li>软件不同部分可以采用不同要求进行测试</li><li>不同的IDM有重叠是可以接受的<ul><li>同一变量可能出现在多个IDM中</li></ul></li></ul><h2 id="组合策略准则">组合策略准则(!!)</h2><h3 id="完全组合覆盖acc">完全组合覆盖(ACC)</h3><p>All Combination Coverage：必须使用来自所有特征区块的所有组合</p><p>即选择所有的组合</p><p>测试用例的数量是每个划分的所有区块数的乘积: <span class="math display">\[\Pi _{i=1}^{Q}(B_i)\\A_{Q}^{Q}\]</span></p><h3 id="单一覆盖准则ecc">单一覆盖准则(ECC)</h3><p>Each Choice Coverage: 每个特征每个区块的一个测试值必须在至少一个测试用例中出现</p><p>即每个测试值都至少用一次</p><p>测试用例的数量是划分区块数中的最大值 <span class="math display">\[MAX_{i=1}^{Q}(B_i)\]</span> 例子：</p><p>假如ECC的测试需求是：</p><p>{A1, B1, C1, A2, B2, C2, A3, B3, C3, A4, B4, C4}</p><p>那测试用例是：</p><p>{A1, B1, C1}、{A2, B2, C2}、{A3, B3, C3}、{A4, B4, C4}</p><h3 id="结对覆盖pwc">结对覆盖(PWC)</h3><p>Pair-Wise Coverage:每个特征对每个区块中的一个测试值必须要与其他特征的每个区块中的值进行组合</p><p>即两两配对，不在配对组合之中的，可以随意取值。</p><p>测试用例的数量是划分区块数中的最大两个数的乘积 <span class="math display">\[(MAX_{i=1}^{Q}(B_i))*(MAX_{j=1,j!=i}^{Q}(B_j))\]</span> <strong>例子</strong>：</p><table><thead><tr class="header"><th>特征划分</th><th>b1</th><th>b2</th><th>b3</th><th>b4</th></tr></thead><tbody><tr class="odd"><td>A</td><td>A1</td><td>A2</td><td>A3</td><td>A4</td></tr><tr class="even"><td>B</td><td>B1</td><td>B2</td><td>B3</td><td>B4</td></tr><tr class="odd"><td>C</td><td>C1</td><td>C2</td><td>C3</td><td>C4</td></tr></tbody></table><p>抽象标签下PWC的测试需求：</p><p>(A1,B1), (A1,B2), (A1,B3), (A1,B4), (A1,C1), (A1,C2), (A1,C3), (A1,C4), (A2,B1) … (A4,C4),(B1,C1) … (B4,C4)</p><p>所以生成的测试用例</p><p>A1, B1, C1 A1, B2, C2 A1, B3, C3 A1, B4, C4 A2, B1, C2 A2, B2, C3 A2, B3, C4 A2, B4, C1 A3, B1, C3 A3, B2, C4 A3, B3, C1 A3, B4, C2 A4, B1, C4 A4, B2, C1 A4, B3, C2 A4, B4, C3</p><h3 id="多项组合覆盖twc">多项组合覆盖(TWC)</h3><p>T-Wise Coverage: 所有由t个特征构成的组合的每个区块中的测试值都必须进行组合</p><p>就是PWC的威力加强版，PWC是两两组合，这个是一组有t个，t个之外的数据随意。</p><p>测试用例的数量是划分区块数中最大t个数的乘积</p><h3 id="基本选择覆盖bcc">基本选择覆盖(BCC)</h3><ul><li>测试者可能意识到某些值<strong>非常重要</strong></li><li>引入程序中少量但由关键的<strong>领域知识</strong></li></ul><p>Base Choice Coverage: 每个特征选取一个区块作为基本选择。使用每个特征的基本选择构成一个基本测试用例。剩余的测试用例保持基本测试用例中除了一个基本选择常量之外的所有值，并使用对应特征中的每个非基本选择来代替那个基本选择</p><p>就是确定一个基本用例，然后每次只在基本用例的基础上改一个，直到测试完所有的值。</p><p>测试用例集包括一个基本用例+其他区块一个用例 <span class="math display">\[1+\sum_{i=1}^Q(B_i-1)\]</span> <strong>例子</strong>：</p><p>还是PWC中的ABC三种输入。</p><p>设基本测试用例为：(A1,B1,C1)</p><p>那么测试用例如下：</p><p>(A1, B1, <strong>C2</strong>) (A1, <strong>B2</strong>, C1) (<strong>A2</strong>, B1, C1) (A1, B1, <strong>C3</strong>) (A1, <strong>B3</strong>, C1) (<strong>A3</strong>, B1, C1) (A1, B1, <strong>C4</strong>) (A1, <strong>B4</strong>, C1) (<strong>A4</strong>, B1, C1)</p><h3 id="多项基本选择覆盖mbcc">多项基本选择覆盖(MBCC)</h3><p>Multiple Base Choice Coverage: 每个特征选取<strong>一个或多个</strong>区块作为基本选择。使用每个特征的每个基本选择至少一次，构成一些基本测试用例。剩余的测试用例保持基本测试用例中除了一个基本选择常量之外的所有值，并使用对应特征中的每个非基本选择来代替那个基本选择</p><p>假设M个基本测试用例，每个特征有<span class="math inline">\(m_i\)</span>个基本选择，则测试用例的数量为 <span class="math display">\[M+\sum_{i=1}^{Q}(M*(B_i-m_i))\]</span> <strong>例子：</strong></p><p>假设基本测试用例为(A1,B1,C1)， (A2,B2,C2)</p><p>测试用例如下：</p><p>(A1, B1, C1) ： (A1, B1, C3) (A1, B3, C1) (A3, B1, C1) (A1, B1, C4) (A1, B4, C1) (A4, B1, C1)</p><p>(A2, B2, C2)： (A2, B2, C3) (A2, B3, C2) (A3, B2, C2) (A2, B2, C4) (A2, B4, C2) (A4, B2, C2)</p><h3 id="组合策略的包含关系">组合策略的包含关系</h3><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230625142208182.png" alt="image-20230625142208182" /><figcaption aria-hidden="true">image-20230625142208182</figcaption></figure><h2 id="特征之间的约束">特征之间的约束</h2><ul><li><p>有些区块的组合是不可行的</p></li><li><p>这些表示为区块间的约束</p></li><li><p>两种常见的约束类型</p><ul><li><p>来自一个特征的一个区块<strong>不能</strong>与来自另一个特征的某个区块组合</p></li><li><p>来自一个特征的一个区块<strong>只能</strong>与来自另一个特征的某个区块组合</p></li></ul></li><li><p>约束的处理依赖于所使用的准则</p><ul><li><p>ACC，PWC，TWC：丢弃不可行的组合对</p></li><li><p>BCC，MBCC：改变基本选择使得测试需求变得更可行</p></li></ul></li><li><p>如果IDM有太多的约束，这很有可能是结构上的问题，需要重新设计IDM</p></li></ul><h1 id="图覆盖">图覆盖</h1><h2 id="概述">概述</h2><ul><li><p>图是测试中最常用的结构</p></li><li><p>图来自许多不同来源和类型的软件工件</p><ul><li><p>控制流程图</p></li><li><p>设计结构</p></li><li><p>有限状态机和状态图</p></li><li><p>用例图</p></li></ul></li><li><p>基于图覆盖的测试就是以某种方式“覆盖”图</p></li></ul><h2 id="图的定义">图的定义</h2><ul><li>节点集合N，N不为空</li><li>初始节点集合N0，N0 ⊆N，且不为空</li><li>终止节点集合Nf，Nf ⊆N ，且不为空</li><li>边集合E， E ⊆N × N<ul><li>(ni,nj), ni为前序节点， nj后继节点</li></ul></li></ul><h2 id="路径">路径</h2><ul><li>路径：一个节点序列<span class="math inline">\([n_1, n_2, …, n_M]\)</span><ul><li>每对邻近节点<span class="math inline">\((n_i, n_i+1)\)</span>属于边集合<span class="math inline">\(E，1≤i≤M-1\)</span></li></ul></li><li>长度：边的数目<ul><li>单一节点可看作是长度为0的路径</li></ul></li><li>子路径：路径p的子序列称为p的子路径</li><li>环：开始节点和结束节点相同的路径</li></ul><h2 id="测试路径">测试路径</h2><ul><li><p>测试路径：一条开始于起始节点、结束于终止节点长度可能为零的路径</p></li><li><p>测试路径代表测试用例的执行</p><ul><li><p>有些测试路径可以由许多测试用例执行</p></li><li><p>某些测试路径不能由任何测试用例执行</p></li></ul></li><li><p>单入单出图（SESE）：单一起始节点且单一终止节点</p></li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230625142926464.png" alt="image-20230625142926464" /><figcaption aria-hidden="true">image-20230625142926464</figcaption></figure><h2 id="图覆盖准则">图覆盖准则</h2><ul><li>测试需求：描述测试路径的需求</li><li>测试准则：定义测试需求的规则</li><li>图覆盖准则：给定一个测试准则C所包含的测试需求集TR，测试用例集T覆盖准则C，当且仅当对TR中的每一个测试需求tr，测试路径集合path(T)中至少存在一条测试路径p满足tr<ul><li>结构化覆盖准则（控制流覆盖准则）</li><li>数据流覆盖准则</li></ul></li></ul><h3 id="结构化覆盖准则">结构化覆盖准则</h3><h4 id="节点覆盖nc">节点覆盖(NC)</h4><p>Node Coverage: 测试用例集T满足图G的节点覆盖，当且仅当N中每个语法上可达的节点n，path(T)中都有一条路径p访问n</p><p>简写：TR包含G中每个可达节点</p><p>节点覆盖也称<strong>语句覆盖</strong></p><h4 id="边覆盖ec">边覆盖(EC)</h4><p>Edge Coverage: TR包含G中每条长度小于等于1的可达路径</p><ul><li>稍强于节点覆盖</li><li>小于等于1：考虑只有一个节点没有边的图<ul><li>不然EC不包含NC</li></ul></li><li>NC和EC主要差别体现在没有else的if结构</li><li>也称分支覆盖</li></ul><h4 id="对边覆盖epc">对边覆盖(EPC)</h4><p>Edge Pair Coverage: TR包含G中每条长度小于等于2的可达路径</p><ul><li>类似EC，此处使用小于等于2，以包含EC和NC</li></ul><h4 id="完全路径覆盖cpc">完全路径覆盖(CPC)</h4><p>Complete Path Coverage: TR包含G中所有路径</p><p>不幸的是，如果图中有环，CPC是不可行的</p><p>折中考虑，让测试者指定要覆盖的路径</p><h4 id="指定路径覆盖spc">指定路径覆盖(SPC)</h4><p>Specified Path Coverage：TR包含一个指定的测试路径集合S</p><h4 id="例子">例子</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230625144120482.png" alt="image-20230625144120482" /><figcaption aria-hidden="true">image-20230625144120482</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230625144625054.png" alt="image-20230625144625054" /><figcaption aria-hidden="true">image-20230625144625054</figcaption></figure><h5 id="有环图的处理">有环图的处理</h5><ul><li><p>当图中有环，则有无穷多条的路径，所以CPC是不可行的</p></li><li><p>由于主观性（随着测试者不同而变化），SPC不是很令人满意</p></li><li><p>已有的处理方式：</p><ul><li>1970s：执行环一次</li><li>1980s：执行每条环一次</li><li>1990s：执行环0次，1次，多余1次</li><li>2000s：主路径（游历，顺路，绕路）</li></ul></li></ul><h5 id="简单路径">简单路径</h5><p>一条没有任何节点出现多于一次的路径，除了开始节点和结束节点可能相同外</p><h5 id="主路径">主路径</h5><p>一条不是其他任何简单路径的子路径的简单路径</p><h4 id="主路径覆盖ppc">主路径覆盖(PPC)</h4><p>Prime Path Coverage: TR包含G中每条主路径</p><ul><li>将游历所有长度为0，1，…的路径</li><li>PPC包含NC和EC</li><li>PPC几乎包含EPC，即不包含<ul><li>原因：</li><li>如果节点n有自循环边，那么EPC要求覆盖[n,n,m]和[m,n,n]，其中m和n存在边 [n,n,m]和[m,n,n]都不是简单路径，因而不是主路径</li></ul></li></ul><p><strong>得到一个图的主路径可以参考</strong>：</p><ul><li>从起始节点不进入环到达终止节点</li><li>从起始节点进入环（终止环节点“前”一个节点）</li><li>从环节点“后”一个节点出发到达环节点后从环中退出，并到达终止节点</li><li>环中各个节点自循环</li></ul><h4 id="往返路径sptc">往返路径(SPTC)</h4><p>Simple Round Trip Coverage: 对于G中所有存在往返路径的可达节点，TR包含至少一条往返路径</p><h4 id="完全往返路径crtc">完全往返路径(CRTC)</h4><p>Complete Round Trip Coverage: 对于G中所有存在往返路径的可达节点，TR包含所有往返路径</p><ul><li>这些准则忽视不在往返路径的节点和边</li><li>SPTC和CRTC都不包含NC、EC或EPC</li></ul><h4 id="访问游历和绕路">访问、游历和绕路</h4><p>主路径不允许有<strong>内循环</strong></p><ul><li><p>访问：若节点n存在测试路径p中，则称p访问n</p><p>​ 若边e存在测试路径p中，则称p访问e</p></li><li><p>游历：若路径q是测试路径p的子路径，则称p游历q</p></li><li><p>顺路游历：测试路径p<strong>顺路游历</strong>路径q，若q中每条边以同样顺序出现在p中</p><ul><li>暂时离开路径的某个节点，顺路访问其他节点再回到该节点</li></ul></li><li><p>绕路游历：测试路径p<strong>绕路游历</strong>路径q ，若q中每个节点以同样顺序出现在p中</p><ul><li>暂时离开路径的某个节点，绕路访问其他节点再回到原路径的下一个节点<strong>（跳过一条边）</strong></li></ul></li></ul><h4 id="不可行测试需求">不可行测试需求</h4><ul><li><p>不可行测试需求：不能满足的测试需求</p><ul><li><p>不可到达的语句（死代码）</p></li><li><p>存在矛盾的子路径（X&gt;0 and X&lt;0)</p></li></ul></li><li><p>大多数测试准则都存在一些不可行测试需求</p></li><li><p>当不允许顺路，很多结构化覆盖准则具有更多不可行测试需求</p></li></ul><h4 id="最大限度游历bet">最大限度游历(BET)</h4><p>Best Effort Touring: （1）不允许顺路条件下，满足尽可能多的测试需求；（2）允许顺路条件下，尽量满足剩下测试需求</p><h3 id="数据流覆盖准则">数据流覆盖准则</h3><p><strong>定义</strong>：当一个变量的值被存于内存时该变量所在位置（语句）</p><p>当获取一个变量的值时该变量所在位置（语句）</p><h4 id="定义使用对">定义使用对</h4><ul><li><strong>def</strong>(n)或<strong>def</strong>(e)：节点n或边e定义的变量集合</li><li><strong>use</strong>(n)或<strong>use</strong>(e)：节点n或边e使用的变量集合</li><li>定义使用对(DU pair)：两个位置的组对(li,lj)，且存在变量v在li被定义，在lj被使用</li><li><strong>无重复定义</strong>(Def-clear)：一条从li到lj的路径关于变量v是无重复定义，若该路径上除li外的任何点或边没有定义v</li><li><strong>到达</strong>：若存在一条从li到lj的路径关于变量v是无重复定义的，则处于li的v的定义能到达处于lj的使用</li></ul><h4 id="定义使用路径">定义使用路径</h4><p>一条从变量v的定义到达v的使用、且关于v是无重复定义的<strong>简单路径</strong></p><ul><li>du(ni,nj,v)：从ni到nj、关于v的定义使用路径集合</li><li>du(ni,v)：始于ni、关于v的定义使用路径集合</li></ul><h4 id="全定义覆盖adc">全定义覆盖(ADC)</h4><p>All-Defs Coverage: 对每个定义使用路径集合S=du(n,v)，TR包含S中至少一条路径d</p><h4 id="全使用覆盖auc">全使用覆盖(AUC)</h4><p>All-Uses Coverage: 对每个定义使用路径集合S=du(ni,nj,v)，TR包含S中至少一条路径d</p><h4 id="全定义使用覆盖adupc">全定义使用覆盖(ADUPC)</h4><p>All-DU-Paths Coverage: 对每个定义使用路径集合S=du(ni,nj,v)，TR包含S中每条路径d</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230626142626626.png" alt="image-20230626142626626" /><figcaption aria-hidden="true">image-20230626142626626</figcaption></figure><h3 id="基于源码的图覆盖">基于源码的图覆盖</h3><ul><li><p>最常用的图覆盖准则是针对源代码</p></li><li><p>图：通常是控制流程图</p></li><li><p>节点覆盖：执行每条语句（语句覆盖）</p></li><li><p>边覆盖：执行每条分支（分支覆盖）</p></li></ul><p><strong>数据流覆盖</strong>：控制流程图的补充</p><ul><li>定义：给变量赋值的相关语句</li><li>使用：使用变量的语句</li></ul><h4 id="控制流程图cfg">控制流程图(CFG)</h4><p>Control,flow graph: 通过描述控制结构对方法的所有可能执行进行建模的图</p><ul><li><p>节点：语句或者语句序列（基本块）</p></li><li><p>边：控制迁移</p></li><li><p>基本块：一段最长的可以被顺序执行的语句序列</p><ul><li><p>若第一条语句被执行，则所有语句都被执行</p></li><li><p>不包括分支和跳转语句</p></li></ul></li></ul><p><strong>例子</strong>：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230626143317815.png" alt="image-20230626143317815" /><figcaption aria-hidden="true">image-20230626143317815</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230626150518415.png" alt="image-20230626150518415" /><figcaption aria-hidden="true">image-20230626150518415</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230626150557702.png" alt="image-20230626150557702" /><figcaption aria-hidden="true">image-20230626150557702</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230626150606754.png" alt="image-20230626150606754" /><figcaption aria-hidden="true">image-20230626150606754</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230626150620408.png" alt="image-20230626150620408" /><figcaption aria-hidden="true">image-20230626150620408</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230626150639446.png" alt="image-20230626150639446" /><figcaption aria-hidden="true">image-20230626150639446</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230626150649201.png" alt="image-20230626150649201" /><figcaption aria-hidden="true">image-20230626150649201</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230626150700361.png" alt="image-20230626150700361" /><figcaption aria-hidden="true">image-20230626150700361</figcaption></figure><h4 id="源代码的数据流准则">源代码的数据流准则</h4><p>(和数据流的相似)</p><p><strong>定义：</strong></p><p>当变量的值被存于内存时该变量所在位置</p><ul><li>x出现在赋值语句的左部（如x=44）</li><li>x是方法的形式参数（方法被调用时隐式定义）</li><li>x是方法的实际参数且在方法体中被修改</li><li>x是程序的输入</li></ul><p><strong>使用：</strong></p><p>当获取变量的值时该变量所在位置</p><ul><li><p>x出现在赋值语句的右部</p></li><li><p>x出现在条件判定中</p></li><li><p>x是方法的实际参数</p></li><li><p>x是程序的输出</p></li><li><p>若一对定义使用对出现在同一个节点，该使用称为局部使用</p></li><li><p>数据流分析一般不考虑局部使用</p></li><li><p>当定义和使用出现在同一个节点时，只有定义出现在使用之后且该点处于循环中才称它们为定义使用对</p></li></ul><h1 id="逻辑覆盖">逻辑覆盖</h1><h2 id="语义逻辑准则">语义逻辑准则</h2><p>测试目的在逻辑表达式的真值表中<strong>选择某些子集</strong></p><h3 id="逻辑谓词和子句">逻辑谓词和子句</h3><ul><li><strong>谓词</strong>：计算结果为布尔值的表达式</li><li>谓词可能包括<ul><li>布尔变量</li><li>非布尔变量的比较（&gt;, &lt;, ==, &gt;=, &lt;=, !=）</li><li>（返回值为布尔值的）函数</li><li>¬（非）、 ∧（与）、∨（或）</li><li>→ （蕴含）、⨁（异或）、⟷（等价）</li></ul></li><li><strong>子句</strong>：不包含逻辑运算符的谓词</li></ul><h3 id="逻辑覆盖准则">逻辑覆盖准则</h3><p><strong>一些缩写</strong>：</p><ul><li>P：一个谓词集合</li><li>p：P中一个谓词</li><li>C：谓词集合P中的子句的集合</li><li>Cp：谓词p中的子句的集合</li><li>c：C中一个子句</li></ul><h4 id="谓词覆盖pc">谓词覆盖(PC)</h4><p>Predicate Coverage： 对于每个p∈P，TR包含两个需求：p的结果为真和p的结果为假</p><p>也叫决策覆盖(DC) - Decision Coverage</p><ul><li>在（控制流程）图上，表现为边覆盖</li></ul><h4 id="子句覆盖cc">子句覆盖(CC)</h4><p>Clause Coverage: 对于每个c∈C，TR包含两个需求：c的结果为真和c的结果为假</p><p>n也称“条件覆盖” - Condition Coverage</p><h4 id="组合覆盖coc">组合覆盖(CoC)</h4><p>Combinatorial Coverage: 对于每个p∈P，TR要求Cp中子句结果覆盖真值取值的每种可能组合</p><ul><li>简单、清晰、容易理解</li><li>但代码很高：N个子句，则有<span class="math inline">\(2^N\)</span>个测试用例</li></ul><h4 id="有效子句覆盖acc">有效子句覆盖(ACC)</h4><p>Active Clause coverage: 对于每个p∈P和每个主子句ci∈Cp，选择次子句cj使得ci决定p。对于每个ci ，TR有两个需求：ci的结果为真和ci的结果为假</p><p><strong>有效子句</strong>：这个子句能决定谓语的真假时的该子句，其他的子句叫次子句。只要不影响子句的有效子句定位，次子句取值随意。</p><h4 id="广义有效子句覆盖gacc">广义有效子句覆盖(GACC)</h4><p>General Active Clause coverage： 对于每个p∈P和每个主子句ci∈Cp，选择次子句cj使得ci决定p。对于每个ci ，TR有两个需求：ci的结果为真和ci的结果为假。<strong>当ci为真或假的时候，次子句cj的取值不必相同</strong></p><ul><li>谓语的值可以不管</li></ul><h4 id="限制性有效子句覆盖racc">限制性有效子句覆盖(RACC)</h4><p>Restricted Active Clause coverage: 对于每个p∈P和每个主子句ci∈Cp，选择次子句cj使得ci决定p。对于每个ci ，TR有两个需求：ci的结果为真和ci的结果为假。<strong>当ci为真或假的时候，次子句cj的取值必须相同</strong></p><ul><li>和GACC相比，RACC就是次子句要<strong>每次相同</strong>，谓语的值可以不管。</li></ul><h4 id="相关性有效子句约束cacc">相关性有效子句约束(CACC)</h4><p>Correlated Active Clause coverage: 对于每个p∈P和每个主子句ci∈Cp，选择次子句cj使得ci决定p。对于每个ci ，TR有两个需求：ci的结果为真和ci的结果为假。<strong>次子句cj的取值必须使得主子句ci取一种值时p的结果为真，而取另外一种值时p的结果为假</strong></p><ul><li>RACC相比，次子句的取值一定使得主子句决定谓语p的值。</li></ul><h4 id="无效子句覆盖icc">无效子句覆盖(ICC)</h4><p>Inactive Clause coverage: 对于每个p∈P和每个主子句ci∈Cp，选择<strong>次子句cj使得ci不能决定p</strong>。对于每个ci ，TR有四个需求：</p><p>​ (1)ci的结果为真并且p的结果为真； ​ (2)ci的结果为假并且p的结果为真； ​ (3)ci的结果为真并且p的结果为假； ​ (4)ci的结果为假并且p的结果为假；</p><ul><li>有效子句覆盖准则确保主子句影响谓词</li><li>相反，无效子句覆盖确保主子句不影响谓词</li></ul><h4 id="广义无效子句覆盖gicc">广义无效子句覆盖(GICC)</h4><p>General Inactive Clause coverage: 次子句cj在这些情况下的取值可以不同</p><h4 id="限制性无效子句覆盖ricc">限制性无效子句覆盖(RICC)</h4><p>Restricted Inactive Clause coverage: 当ci为真或假的时候，次子句cj的取值必须相同，即<strong>（1）和（2）次子句cj的取值必须相同</strong>，<strong>（3）和（4）也一样</strong></p><h4 id="不可行需求">不可行需求</h4><ul><li><p>考虑谓词(a &gt; b ∧ b &gt; c) ∨ c &gt; a</p><ul><li>(a &gt; b)=true, (b&gt;c)=true, (c&gt;a)=true是不可行的</li></ul></li><li><p>类似图覆盖准则，需要识别不可行需求</p><ul><li>不可判定问题</li></ul></li><li><p>两种方案</p><ul><li><p>直接忽略</p></li><li><p>寻找在一个包含的覆盖准则中所对应的测试需求，如使用CACC可行的测试需求来代替RACC中不可行的测试需求（类似最大限度游历）</p></li></ul></li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230626202620434.png" alt="image-20230626202620434" /><figcaption aria-hidden="true">image-20230626202620434</figcaption></figure><h4 id="让子句决定谓词">让子句决定谓词</h4><ul><li><p>对简单谓词，次子句的赋值比较容易</p></li><li><p>直接定义的方式</p><ul><li><p><span class="math inline">\(p_{c=true}\)</span>：将p中c的每个出现替换成true</p></li><li><p><span class="math inline">\(p_{c=false}\)</span>：将p中c的每个出现替换成false</p></li></ul></li><li><p>给次子句赋值，只需求解</p><ul><li><span class="math inline">\(p_c=p_{c=true} ⨁p_{c=false}\)</span></li></ul></li><li><p><span class="math inline">\(p_c\)</span>描述了c的取值决定p的条件</p></li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230626203523439.png" alt="image-20230626203523439" /><figcaption aria-hidden="true">image-20230626203523439</figcaption></figure><h4 id="变量重复">变量重复</h4><ul><li>不管谓词的形式如何，生成测试用例是相同的</li></ul><h4 id="无效主子句的次子句赋值">无效主子句的次子句赋值</h4><figure><img src="C:/Users/Azureus/AppData/Roaming/Typora/typora-user-images/image-20230626203455470.png" alt="image-20230626203455470" /><figcaption aria-hidden="true">image-20230626203455470</figcaption></figure><h4 id="真值表方式">真值表方式</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230626203719577.png" alt="image-20230626203719577" /><figcaption aria-hidden="true">image-20230626203719577</figcaption></figure><h3 id="语法逻辑覆盖准则">语法逻辑覆盖准则</h3><ul><li><p>语义逻辑覆盖准则可以不考虑谓词的形式</p><ul><li><p>既是优点也是缺点</p></li><li><p>不同形式可能也有影响，如短路求值</p></li></ul></li><li><p>语法逻辑准则侧重于逻辑谓词的形式</p><ul><li><p>比语义准则更好</p></li><li><p>相对更难理解和使用</p></li></ul></li></ul><h4 id="析取范式">析取范式</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230626204102294.png" alt="image-20230626204102294" /><figcaption aria-hidden="true">image-20230626204102294</figcaption></figure><ul><li>任何逻辑表达式都存在与之等值的析取范式</li></ul><h4 id="蕴含项覆盖ic">蕴含项覆盖(IC)</h4><p>Implicant Coverage: 给定谓词<span class="math inline">\(f\)</span>及其否定的<span class="math inline">\(\overline{f}\)</span>的DNF(析取范式)，对于<span class="math inline">\(f\)</span> 和<span class="math inline">\(\overline{f}\)</span>的每个蕴含项，TR要求该项的取值为真</p><ul><li>IC相对较弱：<ul><li><strong>单独</strong>测试每个蕴含项比较困难</li><li>DNF有<strong>多种</strong>形式</li></ul></li></ul><h4 id="极小dnf">极小DNF</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230626205245128.png" alt="image-20230626205245128" /><figcaption aria-hidden="true">image-20230626205245128</figcaption></figure><h4 id="唯一真值点utp">唯一真值点(UTP)</h4><ul><li><p>给定蕴含项，唯一真值点（UTP）是使得该项为真且其余蕴含项为假的赋值</p></li><li><p>一个唯一真值点的测试用例只关注一个蕴含项</p></li></ul><h4 id="多项唯一真值点覆盖mutp">多项唯一真值点覆盖(MUTP)</h4><p>给定谓词f的极小DNF，对于f中每个蕴含项i，选择<strong>唯一真值点</strong>使得<strong>不在i中的子句</strong>的取值包括真和假</p><p><strong>例子</strong>：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230626205713380.png" alt="image-20230626205713380" /><figcaption aria-hidden="true">image-20230626205713380</figcaption></figure><h4 id="近似假值点nfp">近似假值点(NFP)</h4><p>给定f的蕴含项i及其子句c，<strong>近似假值点（NFP）</strong>是使得<strong>f为假</strong>、但<strong>改变c</strong>的取值（其它子句的取值保持不变）则使得<strong>i为真</strong>(因而f也为真）的赋值</p><p>在近似假值点，c<strong>决定</strong>f（<strong>有效子句</strong>）</p><h4 id="唯一真值点-近似假值点配对覆盖cutpnfp">唯一真值点-近似假值点配对覆盖(CUTPNFP)</h4><p>Corresponding Unique True Point and Near False Point Pair Coverage: 给定谓词f的极小DNF，对于f中每个蕴含项i的每个字c，TR包括<strong>i的唯一真值点</strong>和<strong>i中c的近似假值点</strong>，且这两点的区别<strong>只在于c的取值</strong></p><ul><li>CUTPNFP包含限制性有效子句覆盖（RACC）</li></ul><p><strong>例子：</strong></p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230626205943969.png" alt="image-20230626205943969" /><figcaption aria-hidden="true">image-20230626205943969</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230626210105585.png" alt="image-20230626210105585" /><figcaption aria-hidden="true">image-20230626210105585</figcaption></figure><ul><li>MUTP ⊄ CUTPNFP</li></ul><h4 id="多项近似假值点覆盖mnfp">多项近似假值点覆盖(MNFP)</h4><p>给定谓词f的极小DNF，对于f中每个蕴含项i的每个字c，选择<strong>近似假值点</strong>使得<strong>不在i中的子句</strong>的取值包括真和假</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230626210333568.png" alt="image-20230626210333568" /><figcaption aria-hidden="true">image-20230626210333568</figcaption></figure><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>TDD测试用例是指在测试驱动开发（Test-Driven Development，TDD）中，开发人员在编写代码之前先编写测试用例 <a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络笔记</title>
    <link href="/2023/06/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>好难。。。</p><h1 id="网络概述">网络概述</h1><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230613220649764.png" alt="image-20230613220649764" /><figcaption aria-hidden="true">image-20230613220649764</figcaption></figure><p><strong>Internet</strong>最早起源于ARPAnet</p><p>公用数据网大多采用<strong>分组交换方式</strong> IP电话使用的数据交换技术是<strong>分组交换</strong></p><p>电路交换技术不采用<strong>“存储-转发”</strong>方式</p><h2 id="拓扑结构">拓扑结构</h2><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230614170155575.png" alt="image-20230614170155575" /><figcaption aria-hidden="true">image-20230614170155575</figcaption></figure><h2 id="主要功能">主要功能</h2><p>（1）建立数据通信</p><p>（2）实现资源共享</p><p>（3）增加可靠性</p><p>（4）提高系统处理能力</p><h2 id="网络协议三要素">网络协议三要素</h2><p>语法、语义、时序</p><h2 id="网络体系结构">网络体系结构</h2><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230614164008520.png" alt="image-20230614164008520" /><figcaption aria-hidden="true">image-20230614164008520</figcaption></figure><p>（1）物理层：规定物理接口，比特流透明传输。</p><p>（2）数据链路层：实现逻辑链路上无差错的数据帧传输。</p><p>（3）网络层：实现网络分组传输，解决寻址、路由、转发。</p><p>（4）传输层：实现进程之间可靠/无差错的端到端通信。</p><p>（5）应用层：根据应用进程通信要求，满足用户的需要。</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230614164940939.png" alt="image-20230614164940939" /><figcaption aria-hidden="true">image-20230614164940939</figcaption></figure><h3 id="tcpip">TCP/IP</h3><p>主要特点：</p><ul><li><p>在互联网应用层提供丰富的网络应用服务（C/S、P2P）</p></li><li><p>在传输层支持面向连接/可靠/无差错服务（TCP）和无连接/快速/高效服务（UDP）</p></li><li><p>较少的协议层次，实现简单、高效</p></li><li><p>实现多种异构网的互连问题，网际协议IP为互联网核心</p></li></ul><h1 id="应用层">应用层</h1><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230614171225134.png" alt="image-20230614171225134" /><figcaption aria-hidden="true">image-20230614171225134</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230614171504583.png" alt="image-20230614171504583" /><figcaption aria-hidden="true">image-20230614171504583</figcaption></figure><h2 id="应用程序体系结构的分类">2.1 应用程序体系结构的分类</h2><p>网络应用模式</p><ul><li>客户机/服务器结构（Client/Server, C/S）</li><li>点对点结构（Peer to Peer, P2P）</li><li>混合结构（Hybrid）</li></ul><h2 id="网络应用与应用层协议">网络应用与应用层协议</h2><h3 id="网络应用与应用层协议的基本概念">网络应用与应用层协议的基本概念</h3><p><strong>网络应用：</strong>基于网络的金融应用系统、电子政务、电子商务、远程医疗、远程数据存储等。</p><p><strong>应用层协议：</strong>网络应用主要组成部分。规定应用程序进程之间通信所遵循的通信规则，包括：如何构造进程通信报文、报文应包括的字段、每个字段意义、交互过程等。</p><h3 id="应用层协议的基本内容">应用层协议的基本内容</h3><ul><li>交换报文的类型。如请求报文与应答报文</li><li>各种报文格式与包含的字段类型</li><li>对每个字段意义的描述</li><li>进程在什么时间、如何发送报文，以及如何响应</li></ul><h3 id="应用层协议的类型">应用层协议的类型</h3><p>标准网络应用：E-mail、FTP、TELNET、Web等</p><p>专用应用层协议：很多P2P共享文件的应用层协议属于专用协议</p><h3 id="网络应用对传输层协议的选择">网络应用对传输层协议的选择</h3><p>有TCP和UDP</p><h4 id="tcp-功能完善面向连接可靠传输服务">TCP： 功能完善、面向连接、可靠传输服务</h4><ul><li>支持可靠的面向连接服务</li><li>支持字节流传输服务</li><li>支持全双工服务</li><li>进程在什么时间、如何发送报文，以及如何响应</li></ul><h4 id="udp-简单高效传输服务">UDP： <strong>简单、高效传输服务</strong></h4><ul><li>无连接、不可靠的传输</li><li>无提供拥塞控制机制</li><li>不提供最小延时保证</li></ul><table><thead><tr class="header"><th><strong>网络应用类型</strong></th><th><strong>应用层协议</strong></th><th><strong>传输层协议</strong></th></tr></thead><tbody><tr class="odd"><td>E-mail</td><td>SMTP</td><td>TCP</td></tr><tr class="even"><td>TELNET</td><td>TELNET</td><td>TCP</td></tr><tr class="odd"><td>Web</td><td>HTTP</td><td>TCP</td></tr><tr class="even"><td>FTP</td><td>FTP</td><td>TCP</td></tr><tr class="odd"><td>DNS</td><td>DNS</td><td>UDP或TCP</td></tr><tr class="even"><td>流媒体</td><td>Real Network</td><td>UDP或TCP</td></tr><tr class="odd"><td>VoIP</td><td>Net2phone</td><td>UDP</td></tr></tbody></table><h2 id="web服务">2.2 Web服务</h2><h3 id="基本概念">基本概念</h3><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230614173810042.png" alt="image-20230614173810042" /><figcaption aria-hidden="true">image-20230614173810042</figcaption></figure><p><strong>超文本传输协议HTTP：</strong></p><p>Web服务应用层协议，超文本在浏览器与Web服务器之间的传输协议。</p><p><strong>超文本标记语言HTML：</strong></p><p>文档中的特殊数据格式，一个文档可以链接到另一个文档</p><p><strong>统一资源定位符URL：</strong></p><p>标识Web中的资源，以便于用户查找</p><p><strong>超文本与超媒体：</strong></p><p>在Web系统中，信息按超文本方式组织；超媒体进一步扩展了超文本所链接的信息类型</p><p><strong>Web的工作方式：</strong></p><p>C/S</p><p>原因：<strong>网络资源分布的不均匀性</strong></p><h3 id="http工作机制">HTTP工作机制</h3><h4 id="url格式">URL格式</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230614175735160.png" alt="image-20230614175735160" /><figcaption aria-hidden="true">image-20230614175735160</figcaption></figure><h4 id="url与信息资源定位">URL与信息资源定位</h4><ul><li>访问Web网站要使用的HTTP协议 ，其形式为：</li><li>http://服务器名[:端口号]/路径/文件名</li><li>URL（:冒号左边）指明了URL的访问方式</li><li>http：超文本传输协议（HTTP）</li><li>ftp：文件传输协议（FTP）</li><li>telnet：交互式会话</li><li>mailto：电子邮件地址</li><li>HTTP的默认端口号是80（可以省略）</li><li>路径/文件名用于直接指向服务器中的某一个文件</li><li>省略路径和文件名，则URL就指向了Internet上的某个主页</li></ul><hr /><p>HTTP使用面向连接的TCP协议，客户端Web浏览器要与Web服务器之间建立一个TCP连接</p><h4 id="http协议两种状态非持续连接持续连接">HTTP协议两种状态：非持续连接、持续连接</h4><ul><li>非持续连接（HTTP1.0） 每次请求/响应都要建立一次TCP连接</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230617014949833.png" alt="image-20230617014949833" /><figcaption aria-hidden="true">image-20230617014949833</figcaption></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs applescript">RTT: <span class="hljs-built_in">round</span> trip <span class="hljs-built_in">time</span><br><br>在 HTTP 中，RTT 指的是从客户端向服务器发送一个请求并接收到服务器响应的时间。<br><br>TT 通常由以下两个部分组成：<br><br><span class="hljs-number">1.</span>发送请求的时间：客户端发送请求到服务器的时间，包括将请求发送到网络中所需的时间。<br><br><span class="hljs-number">2.</span>接收响应的时间：服务器响应到客户端的时间，包括将响应发送到网络中所需的时间。<br><br></code></pre></td></tr></table></figure><ul><li><p>持续连接</p><p>持续连接时，服务器在发出响应后保持该TCP连接，相同的客户端进程与服务器端之间的后续报文都通过该连接传送</p><p>持续连接工作有两种：<strong>非流水线和流水线</strong></p><p>非流水线：客户端只有在接收到前一个响应时才能发出新的请求</p><p>流水线：客户端在没有收到前一个响应时就发出新的请求</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230617015351404.png" alt="image-20230617015351404" /><figcaption aria-hidden="true">image-20230617015351404</figcaption></figure></li></ul><h3 id="http报文格式">HTTP报文格式</h3><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230617015853238.png" alt="image-20230617015853238" /><figcaption aria-hidden="true">image-20230617015853238</figcaption></figure><h4 id="请求报文">请求报文</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230617015706680.png" alt="image-20230617015706680" /><figcaption aria-hidden="true">image-20230617015706680</figcaption></figure><h4 id="应答报文">应答报文</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230617015720480.png" alt="image-20230617015720480" /><figcaption aria-hidden="true">image-20230617015720480</figcaption></figure><h4 id="应答状态码">应答状态码</h4><p>常见：</p><p>200：请求成功</p><p>202：请求被接受但是没有马上起作用</p><p>403：请求拒绝</p><p>404：not found</p><h2 id="电子邮件">2.3 电子邮件</h2><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230618202406298.png" alt="image-20230618202406298" /><figcaption aria-hidden="true">image-20230618202406298</figcaption></figure><p>电子邮箱由提供电子邮件服务的机构（ISP）为用户建立。</p><h3 id="基本组成">基本组成</h3><p>用户代理 邮件服务器 邮件传输协议：SMTP/MIME 邮件存储访问协议：POP、IMAP</p><h3 id="邮件协议">邮件协议</h3><p><strong>邮件传输协议</strong></p><ul><li>客户端到邮件服务器、邮件服务器之间简单邮件传输协议STMP</li><li>通用Internet邮件扩展协议<strong>MIME</strong></li></ul><p><strong>邮件存储访问协议</strong></p><ul><li>邮件服务器到客户端，邮政协议第3版<strong>POP-3</strong></li><li>Internet邮件访问协议第4版IMAP-4</li></ul><p><strong>STMP邮件报文封装</strong></p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230618202825435.png" alt="image-20230618202825435" /><figcaption aria-hidden="true">image-20230618202825435</figcaption></figure><ul><li>所有报文都是由ASCII码组成</li><li>报文由报文行组成，各行之间用回车、换行符分隔</li><li>报文的长度不能超过998个字符</li><li>报文行的长度≤78个字符之内（不包括回车换行符）</li><li>报文中可包括多个首部字段和首部内容</li><li>报文可包括一个主体，主体必须用一个空行与其首部分隔</li><li>除非需要使用回车与换行符，否则报文中不使用回车与换行符</li></ul><p><strong>报文的传输</strong></p><p>先发源地址，等待<code>250确认</code>再发送目的地址，等待<code>250确认</code>再发送DATA块，等待<code>354确认</code>再将首部+空行+主体发送，最后发送终结符，收到<code>250确认</code></p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230618203401603.png" alt="image-20230618203401603" /><figcaption aria-hidden="true">image-20230618203401603</figcaption></figure><p><strong>MIME协议基本内容</strong></p><ul><li>允许非7位ASCII码数据通过SMTP传输</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230618204128868.png" alt="image-20230618204128868" /><figcaption aria-hidden="true">image-20230618204128868</figcaption></figure><p><strong>POP3协议</strong></p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230618204224485.png" alt="image-20230618204224485" /><figcaption aria-hidden="true">image-20230618204224485</figcaption></figure><p><strong>IMAP4协议</strong></p><ul><li>与POP3类似，但功能更强</li><li>下载邮件之前检查邮件头部</li><li>下载邮件之前可用特定字符串搜索电子邮件的内容</li><li>可以下载部分电子邮件</li><li>可以在邮件服务器上创建、删除、更名邮箱</li></ul><h3 id="基于web的电子邮件">基于Web的电子邮件</h3><p>基于Web电子邮件，用户代理就是Web浏览器，<strong>用户与远程邮箱之间的通信使用的是HTTP协议，而不是POP3或IMAP4协议</strong></p><p><strong>邮件服务器之间</strong>的通信仍然使用<strong>SMTP协议</strong></p><h2 id="文件传输服务">2.4 文件传输服务</h2><h3 id="ftp">FTP</h3><ul><li>FTP允许用户将文件从一台计算机保证<strong>可靠</strong>传输到另一台计算机</li><li>FTP服务使用户可以方便地访问网络文件资源，无需对文件进行转换，服务效率高</li><li>FTP服务器：提供FTP服务的计算机; FTP客户端：请求FTP服务器的计算机</li><li>服务模式：C/S模式; 传输层协议：<strong>TCP(FTP协议)、UDP(TFTP协议)</strong></li><li>控制进程使用<strong>端口21</strong>，数据进程使用<strong>端口20</strong></li><li>控制连接先于数据连接被建立，并晚于数据连接被释放</li></ul><h4 id="工作原理">工作原理</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230618205332865.png" alt="image-20230618205332865" /><figcaption aria-hidden="true">image-20230618205332865</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230618205335890.png" alt="image-20230618205335890" /><figcaption aria-hidden="true">image-20230618205335890</figcaption></figure><h3 id="ftp和tftp的特点对比">FTP和TFTP的特点对比</h3><h4 id="ftp特点">FTP特点：</h4><ul><li><strong>交互式用户界面</strong>：利用FTP命令方便与服务器对话</li><li><strong>对文件格式说明</strong>：允许指定数据类型和格式（文本方式、二进制方式）</li><li><strong>权限控制</strong>：文件传输之前，向服务器提供登录用户名和口令</li></ul><h4 id="tftp特点">TFTP特点：(!!)</h4><ul><li><strong>传输可靠性</strong>：FTP面向连接的可靠传输，采用TCP；TFTP简洁、采用UDP</li><li><strong>协议命令集</strong>：FTP包含<strong>发送/接收文件、列出目录与删除文件等复杂命令</strong>，TFTP协议只定义<strong>文件发送/接收基本命令</strong></li><li><strong>数据表示</strong>：FTP可指定数据类型，TFTP只允许传输ASCII码或二进制文本文件</li><li><strong>用户鉴别</strong>：FTP有登录用户鉴别功能，TFTP不提供用户鉴别功能</li></ul><h3 id="注">注</h3><p>匿名FTP访问通常使用Anonymous作为用户名</p><p>浏览器软件支持访问FTP服务器，可以直接登录到FTP服务器并下载文件(x),下载可以匿名下载，无需登录</p><h2 id="域名系统与dns服务">2.5 域名系统与DNS服务</h2><p>DNS基于C/S模式的分布系统</p><h3 id="dns的作用">DNS的作用</h3><ul><li>主机域名转换成IP地址</li><li>能够方便访问各种网络资源和服务</li><li>实现互联网应用层协议的基础</li></ul><p><strong>例子</strong></p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230618210624273.png" alt="image-20230618210624273" /><figcaption aria-hidden="true">image-20230618210624273</figcaption></figure><h3 id="域名结构">域名结构</h3><ul><li>主机名字要求全局唯一，能在整个互联网通用</li><li>便于管理（名字分配、确认、回收）</li><li>便于映射，域名与IP地址之间映射（关键问题映射效率）</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230618210949704.png" alt="image-20230618210949704" /><figcaption aria-hidden="true">image-20230618210949704</figcaption></figure><h3 id="dns的基本原理">DNS的基本原理</h3><p>域名解析器：将域名转换为对应的IP地址的过程</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230618211115105.png" alt="image-20230618211115105" /><figcaption aria-hidden="true">image-20230618211115105</figcaption></figure><p><strong>域名解析算法</strong></p><ul><li>递归解析! <img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230618211147603.png" /></li><li>迭代解析</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230618211237138.png" alt="image-20230618211237138" /><figcaption aria-hidden="true">image-20230618211237138</figcaption></figure><h3 id="dns的高速缓存">DNS的高速缓存</h3><ul><li>复制：每个根目录被复制，该服务器副本存放在整个网络上。当一个新的网络加入互联网时，在本地的DNS服务器中配置一个根服务器表</li><li>缓存：使用高速缓存优化查询开销。每个服务器都保留了一个域名缓存，查询一个新的域名时，服务器将该绑定的一个副本置于它的缓存中</li></ul><h3 id="注-1">注</h3><p>DNS可以使用传输层无连接服务(DNS)</p><h1 id="传输层">传输层</h1><p>通过报文段传输</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230618212009479.png" alt="image-20230618212009479" /><figcaption aria-hidden="true">image-20230618212009479</figcaption></figure><h2 id="基本功能">3.1 基本功能</h2><p>根本目的：在网络层提供的数据通信服务基础上，实现主机<strong>进程间可靠</strong>服务，实现“端到端”服务（主机-主机 → 端-端），UDP的可靠性弱于TCP的可靠性</p><h4 id="传输层与应用层和网络层的关系">传输层与应用层和网络层的关系</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230618214601740.png" alt="image-20230618214601740" /><figcaption aria-hidden="true">image-20230618214601740</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230618214636931.png" alt="image-20230618214636931" /><figcaption aria-hidden="true">image-20230618214636931</figcaption></figure><hr /><p>传输层协议在本地主机操作系统控制下，为应用程序提供确定的服务</p><ul><li>网络层解决IP地址，传输层解决进程标识</li></ul><p>套接字：建立网络应用程序的可编程接口（应用编程接口API）(socket) IP地址+端口号，比如：202.1.2.5:80</p><p><strong>进程标识三元组</strong>：协议、本地地址、本地端口，也叫半相关</p><p><strong>进程通信标识五元组</strong>：协议、本地地址、本地端口、远程地址、远程端口号，也叫全相关</p><h3 id="端口号16bits">端口号(16bits)</h3><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230618233944599.png" alt="image-20230618233944599" /><figcaption aria-hidden="true">image-20230618233944599</figcaption></figure><ul><li><strong>熟知端口号：</strong>给每种服务器分配的确定的全局端口号，也叫公认端口号，范围在0~1023，统一分配与控制</li><li><strong>注册端口号：</strong>在IANA注册的端口号，没有明确的定义服务对象，不同程序可根据实际需要自己定义，范围在1024~49152</li><li><strong>临时端口号：</strong>客户端程序使用的临时端口号，由客户端上TCP/IP软件随机选取，范围在49152~65535</li></ul><h4 id="常见端口号">常见端口号</h4><p>表5-1 UDP常用的熟知端口号</p><p>DNS协议运行在UDP协议之上，使用端口号<strong>53</strong></p><table><thead><tr class="header"><th>端口号</th><th>服务进程</th><th>说 明</th></tr></thead><tbody><tr class="odd"><td><strong>53</strong></td><td><strong>Domain(DNS)</strong></td><td><strong>域名服务</strong> (!!)</td></tr><tr class="even"><td>67/68</td><td>DHCP</td><td>动态主机配置协议</td></tr><tr class="odd"><td><strong>69</strong></td><td><strong>TFTP</strong></td><td><strong>简单文件传输协议</strong> (!!)</td></tr><tr class="even"><td>111</td><td>RPC</td><td>远程过程调用</td></tr><tr class="odd"><td>123</td><td>NTP</td><td>网络时间协议</td></tr><tr class="even"><td>161/162</td><td>SNMP</td><td>简单网络管理协议</td></tr><tr class="odd"><td>520</td><td>RIP</td><td>路由信息协议</td></tr></tbody></table><p>表5-2 TCP常用的熟知端口号</p><table><thead><tr class="header"><th>端口号</th><th>服务进程</th><th>说 明</th></tr></thead><tbody><tr class="odd"><td><strong>20</strong></td><td><strong>FTP</strong></td><td><strong>文件传输（数据连接）</strong> (!!)</td></tr><tr class="even"><td><strong>21</strong></td><td><strong>FTP</strong></td><td><strong>文件传输（控制连接）</strong> (!!)</td></tr><tr class="odd"><td>23</td><td>TELNET</td><td>网络虚拟终端协议</td></tr><tr class="even"><td><strong>25</strong></td><td><strong>SMTP</strong></td><td><strong>简单邮件传输协议</strong> (!!)</td></tr><tr class="odd"><td><strong>80</strong></td><td><strong>HTTP</strong></td><td><strong>超文本传输协议</strong> (!!)</td></tr><tr class="even"><td>119</td><td>NNTP</td><td>网络新闻传输协议</td></tr><tr class="odd"><td>179</td><td>BGP</td><td>边界路由协议</td></tr></tbody></table><h2 id="tcp和udp比较">TCP和UDP比较</h2><table><thead><tr class="header"><th><strong>特征</strong>/<strong>描述</strong></th><th><strong>TCP</strong></th><th><strong>UDP</strong></th></tr></thead><tbody><tr class="odd"><td>一般描述</td><td>允许应用程序<strong>可靠</strong>地发送数据，<strong>功能齐全</strong></td><td><strong>简单</strong>、<strong>高速</strong>，只负责将应用层与网络层衔接起来</td></tr><tr class="even"><td>面向连接与无连接</td><td><strong>面向连接</strong>，在TPDU传输之前需要建立TCP连接</td><td><strong>无连接</strong>，在TPDU传输之前不需要建立UDP连接</td></tr><tr class="odd"><td>与应用层的数据接口</td><td><strong>基于字节流</strong>，应用层不需要规定特点的数据格式</td><td><strong>基于报文</strong>，应用层需要将数据分成包来传送</td></tr><tr class="even"><td>可靠性与确认</td><td><strong>可靠</strong>报文传输，对所有的数据均要确认</td><td><strong>不可靠</strong>，不需要对传输的数据确认，尽力而为地交付</td></tr><tr class="odd"><td>重传</td><td><strong>自动重传</strong>丢失的数据</td><td><strong>不负责检查</strong>是否丢失数据和重传</td></tr><tr class="even"><td>开销</td><td><strong>低</strong>，但高于UDP</td><td><strong>很低</strong></td></tr><tr class="odd"><td>传输速率</td><td><strong>高</strong>，但低于UDP</td><td><strong>很高</strong></td></tr><tr class="even"><td>适用的数据量</td><td>从少量到几个GB的数据</td><td>从少量到几百个字节的数据</td></tr><tr class="odd"><td>适用的应用类型</td><td>对数据传输可靠性要求较高的应用，例如文件与报文传输</td><td>发送数量比较少，对数据传输可靠性要求低的应用，例如IP电话、视频会议、多播与广播</td></tr></tbody></table><h2 id="udp">3.2 UDP</h2><h4 id="特点">特点</h4><ul><li><strong>无连接、不可靠</strong>：开销低、尽力而为</li><li><strong>面向报文的传输层协议</strong>：UDP 对应用层传递下来的报文，既不合并，也不拆分，而是保留这些报文的边界。UDP 层一次向对方交付一个完整的报文</li><li><strong>没有拥塞控制</strong>：网络出现的拥塞时，UDP不会使源主机的发送速率降低，适合实时通信应用</li><li><strong>首部开销小</strong>：只有8字节</li></ul><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230618235503309.png" /></p><h4 id="数据报格式">数据报格式</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230618235649210.png" alt="image-20230618235649210" /><figcaption aria-hidden="true">image-20230618235649210</figcaption></figure><ul><li>端口号：包括源端口号和目的端口号，分别表示发送方和接收方的进程端口号，各为2字节</li><li>长度：包括报头在内的用户数据报的总长度，2字节</li><li>校验和：用于检查整个数据报（含报头）是否传输出错，可选，若无，填0</li></ul><p>校验和计算：</p><ul><li>按每16位求和并在高位补0得到一个32位的求和结果</li><li>如果这个结果高16位不为0，则将高16位和低16位相加，高16位补上0，得到一个32位的结果</li><li>一直相加直到高16位为0，将低16位取反得到校验和</li></ul><p>直观点看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">udpCheckSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>res += num;<br><span class="hljs-keyword">if</span> (res &gt;&gt;&gt; <span class="hljs-number">16</span> != <span class="hljs-number">0</span>) &#123;<br>            res = (res &gt;&gt;&gt; <span class="hljs-number">16</span>) + (res &amp; <span class="hljs-number">0xffff</span>);<br>        &#125;<br>&#125;<br><span class="hljs-keyword">return</span> Integer.toHexString(~res).substring(<span class="hljs-number">4</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="tcp">3.3 TCP</h2><h3 id="特点-1">特点</h3><ul><li><strong>支持面向连接的服务</strong>：打电话式、会话式通信</li><li><strong>支持字节流传输</strong>：字节管道、字节按序传输和到达</li><li><strong>支持全双工服务</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="全双工：同时收发">[1]</span></a></sup>：一个应用进程可以同时收发数据、捎带确认</li><li>支持建立多个<strong>并发的TCP连接</strong>（服务器同时响应多个连接）</li><li><strong>支持可靠传输服务</strong>：不丢失、不重复、有序</li></ul><hr /><h3 id="报文格式">报文格式</h3><p>TCP报头长度</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230619011346114.png" alt="image-20230619011346114" /><figcaption aria-hidden="true">image-20230619011346114</figcaption></figure><ul><li><p><strong>发送序号（seq）</strong>：表示TCP数据字段的第一个字节的序号</p><p>连接建立时（<strong>即SYN=1</strong>），初始序号（ISN）由随机数生成器生成，发送端和接收端独立产生，可能不一样</p></li><li><p><strong>确认序号（ack）</strong>：只有当<strong>ACK位=1</strong>时有效，表示发送此报文段的进程期望接收的下一个新字节的序号。</p><p><strong>确认序号=N+1</strong>，表示接收方已经成功接收了序号为N及之前的所有字节，要求发送方接下来应该发送起始序号为N+1的字节段。</p></li></ul><p>(注：这个是发送报文，接收方的确认报文的ack=接收的发送报文的ack，seq=发送报文的seq+1；若是双方互通传数据，确认序号表示已经接收的最后一位数据的序号，序号为接收的确认序号+1，即请求发送的序号的第一位)</p><ul><li><strong>窗口值</strong>：指示当前进程可以接收的数据长度 (单位: 字节)。</li></ul><p>准备接收下一个TCP报文的接收方，通知即将发送报文的发送方下一个报文中最多可以发送的字节数，是发送方确定发送窗口的依据，是<strong>动态可变</strong><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="具体的查看拥塞控制">[2]</span></a></sup>的</p><ul><li><p><strong>报头长度</strong>：表示TCP报文首部的大小，单位是4字节</p><ul><li>该字段的取值范围是[5,15]</li><li>TCP头部的固定部分（除了TCP头部的选项）为4*5=20Byte</li></ul></li><li><p><strong>校验和</strong>：</p><p><strong>与UDP校验和的相同点</strong>：</p><p>1）计算方式相同；</p><p>2）也需要伪首部。</p><p><strong>与UDP校验和的不同点</strong>：</p><p>1）UDP校验和可选，TCP校验和必须；</p><p>2）伪首部协议字段值为6。</p></li></ul><table><thead><tr class="header"><th><strong>标志</strong></th><th><strong>说明(注重前三位)</strong></th></tr></thead><tbody><tr class="odd"><td><strong>SYN</strong></td><td>当SYN＝1，而ACK＝0时，表明这是一个建立连接请求报文，若对方同意建立该连接，则应在发回的报文中将SYN和ACK标志位同时置1。实质上，就是用SYN来代表Connection Request和Connection Accepted，用ACK位来区分这两种情况。</td></tr><tr class="even"><td><strong>ACK</strong></td><td>确认号字段的值有效。只有当ACK＝1时，确认序号字段才有意义。当ACK＝0时，确认序号没有意义。</td></tr><tr class="odd"><td><strong>FIN</strong></td><td>终止连接。当FIN＝1时，表明数据已经发送完毕，并请求释放连接。</td></tr><tr class="even"><td>RST</td><td>连接必须复位。当RST＝1时，表明出现严重差错，必须释放连接，然后重新建立连接。</td></tr><tr class="odd"><td>URG</td><td>此报文是紧急数据，应尽快传送出去。此标志位要与紧急指针字段配合使用，由紧急指针指出在本报文段中的紧急数据的最后一个字节的编号。</td></tr><tr class="even"><td>PSH</td><td>将数据推向前。当PSH＝1时，请求接收方TCP软件将该报文立即推送给应用程序。</td></tr></tbody></table><p><strong>TCP最大段长度（MSS）</strong></p><p>TCP报文数据部分的最大长度，不包括TCP报头长度。默认值为<strong>536字节</strong></p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230619012552441.png" alt="image-20230619012552441" /><figcaption aria-hidden="true">image-20230619012552441</figcaption></figure><hr /><h2 id="tcp基本通信过程">3.4 TCP基本通信过程</h2><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230619014224795.png" alt="image-20230619014224795" /><figcaption aria-hidden="true">image-20230619014224795</figcaption></figure><ul><li>通信建立---三次握手</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230619014351540.png" alt="image-20230619014351540" /><figcaption aria-hidden="true">image-20230619014351540</figcaption></figure><ul><li>通信释放---四次挥手 <img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230619014508304.png" alt="image-20230619014508304" /></li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230619014458352.png" alt="image-20230619014458352" /><figcaption aria-hidden="true">image-20230619014458352</figcaption></figure><h2 id="tcp滑动窗口与确认重传机制">3.5 TCP滑动窗口与确认重传机制</h2><ul><li><p>2个缓存、2个窗口</p><ul><li>发送方缓存：用于存储准备发送的数据</li><li>发送窗口：窗口值不为0，可以发送报文段</li><li>接收方缓存：将正确接收的字节流写入缓存，等待接收读取</li><li>接收窗口：窗口值等于接收缓存可以接收的字节流</li></ul></li><li><p>字节流<strong>分段</strong><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="由MSS控制">[3]</span></a></sup>，按段（序号）传输，捎带确认（确认号）</p></li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230619135428683.png" alt="image-20230619135428683" /><figcaption aria-hidden="true">image-20230619135428683</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230619135613194.png" alt="image-20230619135613194" /><figcaption aria-hidden="true">image-20230619135613194</figcaption></figure><h3 id="特点-2">特点</h3><ul><li>使用发送和接受缓冲区，以及滑动窗口机制控制TCP连接上的字节传输</li><li>TCP滑动窗口面向字节流，可以起到<strong>差错控制</strong>和<strong>流量控制</strong>作用</li><li>接收方可以在任何时候发送确认，窗口大小可由接收方根据需要增大或减少</li><li>发送窗口值<strong>不能超过</strong>接收窗口值，发送方可以根据自身需要来决定</li></ul><h3 id="重传定时器">重传定时器</h3><p>TCP滑动窗口使用超时重传机制</p><p>定时器设置与报文段往返时间RTT紧密相关。RTT表示一个报文段自发出到收到ACK的时间间隔。</p><ul><li>RTT随网络状态而随机波动，既非定值，也无规律</li><li>发送数据报的同时，需要对该报文的RTT进行估计</li></ul><p><span class="math display">\[Timeout=\beta \times RTT\]</span></p><p>其中：</p><ul><li>Timeout：本次定时器的时间值</li><li>RTT：对本次发出报文段的往返时间的估计值</li><li>β：常数值，大于1，推荐值为2</li></ul><p><span class="math display">\[RTT = \alpha \times 旧RTT+(1-\alpha)\times 最新RTT测量值\]</span></p><p>其中：</p><ul><li>α为常数值，小于1，推荐值为0.125</li></ul><h3 id="流量控制">流量控制</h3><p>由发送方控制发送速率，使之不超过接收速率，防止接收方来不及接收字节流，而出现报文丢失现象</p><h4 id="基本过程">基本过程：</h4><ul><li><p>接收方从缓存中读取速度大于等于字节到达速度，接收方在每个确认中发出一个<strong>非零窗口</strong>通告</p></li><li><p>如果发送方发送速度比接收方读取速度快，将造成缓冲区被全部占用，之后到达的字节因缓冲区溢出而丢弃。此时，接收方必须发出一个“<strong>零窗口</strong>”<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="纯ACK报文段(数据长度=0，窗口字段=0)">[4]</span></a></sup>的通告。告知当发送方停止发送（直到接收“非零窗口”通告为止）。</p></li><li><p>接收方需要接收能力给出一个合适的<strong>接收窗口</strong>，并将它写入TCP报头中，通知发送方。接收窗口又称为<strong>通知窗口</strong>。</p><p>为避免活锁，发送方使用一种叫坚持定时器(persist timer)来定期触发：发送方往接收方发送窗口探测报文段(数据长度&gt;0, 保证被TCP递送)。作为响应，接收方将自己的缓冲区可用空间大小放入ACK报文段的窗口字段，由此，发送方获知接收方是否能继续接收数据。</p></li></ul><h3 id="拥塞控制">拥塞控制</h3><h4 id="拥塞现象">1 拥塞现象</h4><p>当多个主机端点通过TCP向整个网络注入数据时，TCP如果不对注入数据的速率进行控制，将导致整个网络出现拥堵：</p><ul><li>往返时延增大导致TCP重传，进一步增加拥堵</li><li>中间路由器的缓冲容量有限。当IP数据报的到达率持续超过发出率时，中间路由器的缓冲变满, 只好丢弃新进的数据包，导致TCP重传。</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230619141120054.png" alt="image-20230619141120054" /><figcaption aria-hidden="true">image-20230619141120054</figcaption></figure><h4 id="拥塞控制-1">2 拥塞控制</h4><ul><li>实现拥塞控制最基本手段：TCP滑动窗口技术</li><li>发送数据，既要考虑接收能力，又要避免网络发生拥塞</li><li>发送窗口计算 <code>发送窗口 = Min（通知窗口，拥塞窗口）</code></li><li>通知窗口<strong>rwnd</strong>：接收方允许接收的能力，来自接收方流量控制（将“通知窗口”值放在TCP报头中，传送给发送端）</li><li>拥塞窗口<strong>cwnd</strong>：发送方根据网络拥塞情况得出的窗口值，来自发送方的流量控制</li></ul><h4 id="拥塞控制判定">拥塞控制判定</h4><ul><li>重传定时器超时 现在通信线路的传输质量一般都很好，因传输出差错而丢弃分组的概率是很小的（远小于 1 %）。只要出现了超时，就可以猜想网络可能出现了拥塞)</li><li>收到三个相同（重复）的 ACK 个别报文段会在网络中丢失，预示可能会出现拥塞（实际未发生拥塞），因此可以尽快采取控制措施，避免拥塞</li></ul><h4 id="tcp拥塞控制算法">3 TCP拥塞控制算法</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230619141351174.png" alt="image-20230619141351174" /><figcaption aria-hidden="true">image-20230619141351174</figcaption></figure><ul><li><p>慢开始阔值SST：慢开始阶段和拥塞避免阶段的分界线，初始值有算法设定</p></li><li><p>慢开始阶段：cwnd≤SST。在该阶段，cwnd初始值为1，且每结束一个RTT，cwnd翻倍</p></li><li><p>当cwnd=SST时：进入拥塞避免阶段</p></li></ul><p><strong>发生拥塞时：</strong></p><ol type="1"><li>拥塞避免阶段结束</li><li>设置SST=cwnd/2</li><li>cwnd重为1，进入新的慢开始阶段(Tahoe版本)或者cwnd减半，进入快恢复阶段(Reno版本)</li></ol><hr /><h1 id="网络层">网络层</h1><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230620154349263.png" alt="image-20230620154349263" /><figcaption aria-hidden="true">image-20230620154349263</figcaption></figure><h2 id="ipv4">4.1 IPv4</h2><h3 id="网络层的功能">网络层的功能</h3><ul><li><p><strong>路径决策</strong>：为分组在收发双方之间确定路径， 路由选择算法</p></li><li><p><strong>交换</strong>：在路由器的输入、输出端口传递分组</p></li><li><p>在网络层<strong>没有联接建立</strong>过程</p></li><li><p>路由器: 没有端对端的连接状态：在网络层<strong>不存在“连接”</strong>的概念</p></li></ul><h3 id="网络层的定位">网络层的定位</h3><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230620154626567.png" /></p><p><strong>网际协议 IP</strong> 是 TCP/IP 体系中两个最主要的协议之一。</p><p>与 IP 协议配套使用的还有三个协议：</p><ul><li>地址解析协议 <strong>ARP</strong> (Address Resolution Protocol)</li><li>网际控制报文协议 <strong>ICMP</strong> (Internet Control Message Protocol)</li><li>网际组管理协议 <strong>IGMP</strong> (Internet Group Management Protocol)</li></ul><h2 id="ipv4协议">4.2 IPv4协议</h2><h3 id="特点-3">特点</h3><ul><li>无连接、不可靠（尽力而为的服务）<ul><li>不维护 分组发送的状态信息，分组独立发送</li><li>不保证 不丢失、按序等</li></ul></li><li>为传输层屏蔽了物理网络的差异： 掩盖各种不同物理网和协议差异性，实现异构互连</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230620154836413.png" alt="image-20230620154836413" /><figcaption aria-hidden="true">image-20230620154836413</figcaption></figure><h2 id="ipv4地址结构">4.3 IPv4地址结构</h2><h3 id="ipv4地址标准分类">IPv4地址标准分类</h3><ul><li>IP地址的点分十进制表示法：地址长度为32位，采用点分十进制（X.X.X.X，X在[0,255]之间，占8位）表示</li><li>标准分类：网络号+主机号，根据网络号前缀和位数的差异，分为A、B、C、D和E五类</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230620155012852.png" alt="image-20230620155012852" /><figcaption aria-hidden="true">image-20230620155012852</figcaption></figure><table><thead><tr class="header"><th>网络类别</th><th>网络标识</th><th>二进制</th><th>十进制</th><th>网络地址长度</th><th>主机地址长度</th><th>最大网络数</th><th>最大主机数</th><th>使用范围</th></tr></thead><tbody><tr class="odd"><td>A</td><td>0</td><td>0xxxxxxx</td><td>1–126</td><td>1字节</td><td>3字节</td><td>126</td><td>16777214</td><td>大型网络</td></tr><tr class="even"><td>B</td><td>10</td><td>10xxxxxx</td><td>128–191</td><td>2字节</td><td>2字节</td><td>16383</td><td>65534</td><td>中型网络</td></tr><tr class="odd"><td>C</td><td>110</td><td>110xxxxx</td><td>192–223</td><td>3字节</td><td>1字节</td><td>2097151</td><td>254</td><td>小型网络</td></tr><tr class="even"><td>D</td><td>1110</td><td>1110xxxx</td><td>224–239</td><td></td><td></td><td></td><td></td><td>多播传送</td></tr><tr class="odd"><td>E</td><td>1110</td><td>11110xxx</td><td>240-247</td><td></td><td></td><td></td><td></td><td>保留</td></tr></tbody></table><h4 id="特殊ip地址">特殊IP地址</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230620155310665.png" alt="image-20230620155310665" /><figcaption aria-hidden="true">image-20230620155310665</figcaption></figure><h4 id="专用ip地址">专用IP地址</h4><table><thead><tr class="header"><th><strong>类别</strong></th><th><strong>网络号</strong></th><th><strong>总 数</strong></th></tr></thead><tbody><tr class="odd"><td>A</td><td>10</td><td>1</td></tr><tr class="even"><td>B</td><td>172.16 ~ 172.31</td><td>16</td></tr><tr class="odd"><td>C</td><td>192.168.0 ~ 192.168.255</td><td>256</td></tr></tbody></table><p>IP 地址是一种分等级的地址结构。分两个等级的好处是：</p><ul><li>IP 地址管理机构在分配 IP 地址时只分配网络号，而剩下的主机号则由得到该网络号的单位自行分配。这样就方便了 IP 地址的管理。</li><li>路由器仅根据目的主机所连接的网络号来转发分组（而不考虑目的主机号），这样就可以使路由表中的项目数大幅度减少，从而减小了路由表所占的存储空间。</li></ul><h3 id="ipv4划分">IPv4划分</h3><p>由两级划分变为三级划分：从主机位中拿出若干位作为<strong>子网位</strong>（也叫<strong>子网号字段</strong>），从而将一个网络进一步划分成多个子网</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230620172353239.png" alt="image-20230620172353239" /><figcaption aria-hidden="true">image-20230620172353239</figcaption></figure><p>子网位不能全为“0”，也不能全为“1”；</p><p>主机位不能全为“0”，也不能全为“1”。</p><h3 id="无类别域间路由">无类别域间路由</h3><p>不限制于标准分类（A/B/C）的地址结构，而是根据对地址管理需要灵活决定（使用<strong>可变长度子网掩码</strong>）</p><p>网络掩码采用：“<strong>IP地址/掩码</strong>”</p><h3 id="nat技术网络地址转换技术">NAT技术(<strong>网络地址转换</strong>技术)</h3><p>目的是解决IP地址短缺，有效快速补救办法</p><h4 id="概念">概念</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230620183624669.png" alt="image-20230620183624669" /><figcaption aria-hidden="true">image-20230620183624669</figcaption></figure><p>NAT软件通过维护一张源(IP地址,端口)到目的(IP地址,端口)的转换表，就可以完成互联网IP数据报到专用网IP数据报的内容转发</p><ul><li>“一对一”（静态NAT）</li><li>“多对多”（动态NAT）</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230620185023807.png" alt="image-20230620185023807" /><figcaption aria-hidden="true">image-20230620185023807</figcaption></figure><h2 id="ipv4分组格式">4.4 IPv4分组格式</h2><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230621015548522.png" alt="image-20230621015548522" /><figcaption aria-hidden="true">image-20230621015548522</figcaption></figure><p><strong>第一行：</strong></p><ul><li><strong>版本字段</strong>：占4bit，4代表IPv4，6代表IPv6</li><li><strong>分组头长度</strong>：占4bit，单位4B，范围[5,15] (当说首部固定长度，默认20B)</li><li><strong>服务类型字段</strong>：占8bit，指示路由器如何处理分组<ul><li>优先级：分组传输时，需要网络提供优先服务</li><li>延迟D（delay），（delay）、可靠性R（reliability）、吞吐量T（throughput）、成本C（cost）</li></ul></li><li><strong>总长度</strong>：占16bit，单位是字节，表示分组头长度和数据长度之和</li></ul><p><strong>第二行：</strong></p><ul><li><p><strong>标识</strong>：占16bit，用来标识不同的IP分段，最多能分配216-1个ID</p></li><li><p><strong>标志</strong>：占3bit，最高位固定为0，中间位为DF，最低位为MF</p><ul><li>DF=1，表示接收节点不能对分组进行分段。反之，则可</li><li>MF=0，表示接收的是最后一个分段。反之，则不是</li></ul></li><li><p><strong>段偏移</strong>：占13bit，表示分段在整个分组中的相对位置，以8字节为单位进行计数，因此分段长度应为8字节的整数倍</p></li></ul><p><strong>第三行</strong>：</p><ul><li><p><strong>生存时间TTL</strong>：占8bit，表示分组在网络中的存活时间，以跳数来计数</p></li><li><p><strong>协议</strong>：占8bit，表示IP的高层协议类型，可选值如表中所示</p></li></ul><table><thead><tr class="header"><th><strong>值</strong></th><th><strong>上层协议</strong></th><th><strong>值</strong></th><th><strong>上层协议</strong></th></tr></thead><tbody><tr class="odd"><td>1</td><td>ICMP</td><td>50</td><td>ESP(IPSec)</td></tr><tr class="even"><td>2</td><td>IGMP</td><td>51</td><td>AH(IPSec)</td></tr><tr class="odd"><td>6</td><td>TCP</td><td>89</td><td>OSPF</td></tr><tr class="even"><td>8</td><td>EGP</td><td>41</td><td>IPv6</td></tr><tr class="odd"><td>17</td><td>UDP</td><td></td><td></td></tr></tbody></table><ul><li><p><strong>头部校验和</strong>：用于头部校验</p><ul><li>不负责数据校验</li><li>降低延迟，提高效率</li></ul></li></ul><h3 id="分段与组装">分段与组装</h3><ul><li><p><strong>最大传输单元（MTU）</strong></p><p>链路帧的数据字段的最大长度，也就是封装链路帧时允许的IP分组大小上限</p><p><strong>特点</strong></p><ul><li>不同网络的MTU大小不同；</li><li>规定IP分组的最大长度为65535字节；</li><li>MTU一般小于IP分组长度，因此需要将IP分组分割成若干个较小的段，每个段的长度不超过MTU</li></ul></li><li><p>TCP最大段长度（MSS）</p><p>TCP报文数据部分的最大长度，不包括TCP报头长度，默认值为536字节</p></li></ul><h2 id="路由算法的选择和分组转发">4.5 路由算法的选择和分组转发</h2><p><strong>分组转发</strong>：</p><p>互联网中主机、路由器转发IP分组的过程</p><ul><li><p>默认路由（网关）：也叫第一跳路由，即主机所在局域网与互联网相连的网关</p></li><li><p>源（目的）路由器：发送（接收）主机的默认路由器</p></li></ul><p><strong>分组转发分类：</strong></p><ul><li>直接转发：源主机与目的主机在同一个网络或目的路由向目的主机转发分组</li><li>间接转发：源主机与目的主机不在一个网络</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622004204762.png" alt="image-20230622004204762" /><figcaption aria-hidden="true">image-20230622004204762</figcaption></figure><h3 id="路由算法">路由算法</h3><h4 id="评价依据">评价依据</h4><ul><li>算法必须是正确、稳定和公平的</li><li>算法应该尽量简单</li><li>算法必须能够适应网络拓扑和通信量的变化</li><li>算法应该是最佳的</li></ul><h4 id="量化指标">量化指标</h4><ul><li>跳数（hop count），跳数越少，路径越好</li><li>带宽（bandwidth），链路传输速率</li><li>延时（delay），从源结点到达目的结点时间开销</li><li>负载（load），路由器单位时间通信量</li><li>可靠性（reliability），传输过程中误码率</li><li>开销（overhead），传输过程中耗</li></ul><h4 id="类型">类型</h4><ul><li><p><strong>静态路由选择算法</strong>：</p><p>将到每个目的地址的路径都固定存储在路由表中，唯一地确定了从源主机到目的主机的路径</p><ul><li>路由表无法自动更新；路由表的更新由管理员手动完成</li></ul></li><li><p><strong>动态路由选择算法</strong>：</p><p>网络系统运行时，系统自行运行动态路由选择协议建立路由表</p><ul><li>网络结构变化时，可自动更新路径</li></ul></li></ul><h4 id="路由表">路由表</h4><p><strong>路由表二元组（N，R）</strong></p><p>其中N：目标网络地址，R：网络N的下一跳路由器地址</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622004922942.png" alt="image-20230622004922942" /><figcaption aria-hidden="true">image-20230622004922942</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622004955330.png" alt="image-20230622004955330" /><figcaption aria-hidden="true">image-20230622004955330</figcaption></figure><p><strong>路由表二元组（M，N，R）</strong></p><p>M是目标网络子网掩码</p><p>取出<strong>目的地址</strong>，逐项与路由表中的子网掩码做位与操作，得到目的<strong>子网地址</strong>，找到匹配条目</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622004926874.png" alt="image-20230622004926874" /><figcaption aria-hidden="true">image-20230622004926874</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622004931758.png" alt="image-20230622004931758" /><figcaption aria-hidden="true">image-20230622004931758</figcaption></figure><p><strong>特殊路由</strong></p><ul><li><strong>默认路由</strong>：路由选择过程中，若路由表中没有明确指明到达目的网络的路由信息，则将该分组转发到默认路由指定的路由器地址</li><li><strong>特定主机路由</strong>：路由表是基于网络地址，但允许为一个<strong>特定主机</strong>地址建立路由表项</li></ul><h3 id="ip路由汇聚">IP路由汇聚(!!)</h3><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622010344825.png" alt="image-20230622010344825" /><figcaption aria-hidden="true">image-20230622010344825</figcaption></figure><ul><li>减少路由表项数量重要手段</li><li>基于CIDR，网络前缀越长，主机地址数越少，寻址目的主机越容易</li><li>路由表项由（“网络前缀”、“下一跳地址”）组成</li><li>最长前缀匹配：路由选择具有最长网络前缀的路由</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622010445296.png" alt="image-20230622010445296" /><figcaption aria-hidden="true">image-20230622010445296</figcaption></figure><h3 id="路由协议">路由协议</h3><p>采用分层思想，用“化整为零、分而治之”办法解决路由选择问题</p><h4 id="自治系统as">自治系统(AS)</h4><ul><li>互联网由自治系统互联而成，“自治”管理（大学、公司、部门等），有权自主地定内部采用何种路由协议</li><li>域内路由选择：自治系统内部的路由选择</li><li>域间路由选择：不同自治系统之间的路由选择</li></ul><h5 id="协议">协议</h5><ul><li>内部网关协议（IGP）：AS内部使用的路由选择协议，RIP和OSPF协议</li><li>外部网关协议（EGP）：不同AS边界路由器之间交换路由信息，BGP协议</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622011229221.png" alt="image-20230622011229221" /><figcaption aria-hidden="true">image-20230622011229221</figcaption></figure><h3 id="路由信息协议rip">路由信息协议RIP</h3><h4 id="算法思想">算法思想</h4><ul><li>周期性向相邻路由器告知本地路由器可以到达的网络，以及到达该网络的距离（跳数）</li><li>路由向量（V，D）中，V-该路由器到达的目的网络地址；D-代表距离（跳数）</li><li>按照最短路径原则，刷新路由表</li></ul><h4 id="算法步骤">算法步骤</h4><ul><li><strong>初始化路由表</strong>：只包含与该路由器有直接相连的路由信息，距离均为0（本地路由）</li><li><strong>更新路由表</strong>（若路由器X到目的网络Y的距离为n）<ul><li>若原路由表中没有到网络Y的表项，则增加一个到网络Y的表项</li><li>若原路由表中已有到网络Y的表项（到目的网络Y经过路由器Z距离为m），则只要m＞n＋l，都进行更新。否则不变。更新后的下一站路由器应为X</li></ul></li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622011427547.png" alt="image-20230622011427547" /><figcaption aria-hidden="true">image-20230622011427547</figcaption></figure><h4 id="细节补充">细节补充</h4><ul><li>设置<strong>周期更新定时器</strong>，每隔30s在相邻路由器之间交换一次路由信息</li><li>如果接收到同一网络有多条距离相同的路径，将按照“先入为主”原则，取用<strong>第一条路径</strong>信息（直到该路径失效，或被更短路径取代）</li><li>根据向量距离路由选择算法，当有开销小的路径出现时，修改表中路由记录，否则一直保持下去</li><li>每个路由表项设有<strong>超时定时器</strong>，在路由表项被修改时开始计时，若<strong>180s</strong>后没有收到刷新信息时，表示<strong>该路径已经出现故障</strong>，将该项纪录置为“无效”（不删除该项路由记录）</li><li>RIP协议基于<strong>距离向量路由选择算法</strong>（Bellham-Ford）（DistanceVectorAlgorithms），使用“跳数” (即metric)来衡量到达目标地址的距离。（不是链路状态法！！！）</li></ul><h3 id="最短路径优先协议ospf">最短路径优先协议OSPF</h3><h4 id="主要特点">主要特点</h4><ul><li>使用<strong>链路状态协议</strong>（非RIP的向量距离路由协议）</li><li>路由器<strong>周期性地发送链路状态信息</strong>，AS内<strong>所有路由器</strong>都能形成链路状态数据库（可用端口、已知可达路由、链路状态信息）</li><li>在<strong>链路状态发生变化</strong>时，用<strong>洪泛法</strong>向<strong>所有路由器</strong>发送该信息（<strong>RIP仅向相邻路由器通报</strong>）</li><li>按照<strong>最短路径</strong>原则，刷新路由器之间交换链路状态信息有：费用、距离、延时、带宽等</li></ul><h4 id="算法过程">算法过程</h4><p>使用<strong>Dijkstra算法</strong></p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622012331428.png" alt="image-20230622012331428" /><figcaption aria-hidden="true">image-20230622012331428</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622012439469.png" alt="image-20230622012439469" /><figcaption aria-hidden="true">image-20230622012439469</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622012446131.png" alt="image-20230622012446131" /><figcaption aria-hidden="true">image-20230622012446131</figcaption></figure><h3 id="外部网关协议bgp">外部网关协议BGP</h3><h4 id="基本思想">基本思想</h4><ul><li>不同AS路由器之间交换路由信息</li><li>采用路径向量路由协议（<strong>不同于RIP、OSPF协议</strong>）</li><li>在<strong>链路状态发生变化</strong>时，用<strong>洪泛法</strong>向<strong>所有路由器</strong>发送该信息（RIP仅向相邻路由器通报）</li><li>每个AS至少有一个路由器作为该AS的“BGP发言人”</li></ul><h4 id="工作过程">工作过程</h4><ul><li><p>边界路由器初始化过程</p></li><li><p>BGP协议分组数据</p><ul><li>打开分组。用来与相邻的另一个BGP发言人建立关系</li><li>更新分组。发送路由信息，列出要撤销多条路由</li><li>保活分组。确认打开分组、周期性地证实相邻边界路由器存在</li><li>通知分组。用来发送检测到的差错</li></ul></li></ul><h3 id="路由器与第三层交换技术">路由器与第三层交换技术</h3><h4 id="主要功能-1">主要功能</h4><ul><li>建立、维护路由表</li><li>提供网络间分组转发功能</li></ul><h2 id="互联网控制报文协议icmp">4.6 互联网控制报文协议ICMP</h2><h3 id="icmp报文结构">ICMP报文结构</h3><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622014427440.png" alt="image-20230622014427440" /><figcaption aria-hidden="true">image-20230622014427440</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622014533153.png" alt="image-20230622014533153" /><figcaption aria-hidden="true">image-20230622014533153</figcaption></figure><h3 id="icmp差错报文">ICMP差错报文</h3><h4 id="路由重定向报文type-5">1 路由重定向报文(type: 5)</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622014606363.png" alt="image-20230622014606363" /><figcaption aria-hidden="true">image-20230622014606363</figcaption></figure><h4 id="超时报文type-11">2 超时报文(type: 11)</h4><ul><li>路由器转发分组时，TTL字段值减1后为0，则丢弃该分组，同时向源主机发送超时报文</li><li>分组所有分段在限定时间内（当第1个分段到达，启动定时器）未能到达目的主机时（分组无法组装），若多个分组出现这种情况，导致目的主机不能接收新的分组，从而出现“死锁”，将丢弃接收到的分段，并向源主机发送超时报文</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622015239258.png" alt="image-20230622015239258" /><figcaption aria-hidden="true">image-20230622015239258</figcaption></figure><h4 id="参数出错报文type-12">3 参数出错报文(type: 12)</h4><p>路由器发现以上4种差错情况以外的错误字段，丢弃该分组，向源结点发送参数出错报文。</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622015320663.png" alt="image-20230622015320663" /><figcaption aria-hidden="true">image-20230622015320663</figcaption></figure><h3 id="icmp查询报文">ICMP查询报文</h3><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622015405476.png" alt="image-20230622015405476" /><figcaption aria-hidden="true">image-20230622015405476</figcaption></figure><h4 id="时间戳请求和应答type-1314">1 时间戳请求和应答(type 13/14)</h4><ul><li>提供基本简单的网络时钟同步</li><li>用来确定IP分组在两个机器之间往返所需时间（时钟同步）</li><li>时间戳：<ul><li>初始时间戳：源主机发出请求的时间</li><li>接收时间戳：目的主机收到请求的时间</li><li>发送时间戳：目的主机发送应答时间</li></ul></li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622015634891.png" alt="image-20230622015634891" /><figcaption aria-hidden="true">image-20230622015634891</figcaption></figure><h4 id="回应请求与应答type-80">2 回应请求与应答(type: 8/0)</h4><ul><li>测试能否到达目的主机/路由器（网络连通性）</li><li>由主机发出请求，检查另一个主机能否可达（<strong>ping</strong>命令）</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622015727476.png" alt="image-20230622015727476" /><figcaption aria-hidden="true">image-20230622015727476</figcaption></figure><h4 id="地址掩码请求与应答type-1718">3 地址掩码请求与应答(type: 17/18)</h4><p>要得到网络子网掩码，主机向目标路由器发送地址掩码请求报文。路由器回送应答报文，向主机提供所需的掩码</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622015817484.png" alt="image-20230622015817484" /><figcaption aria-hidden="true">image-20230622015817484</figcaption></figure><h4 id="路由查询与通告type-109">4 路由查询与通告(type: 10/9)</h4><ul><li>主机要获取目标路由器是否正常工作，向目标路由器发送“询问与通告报文”。</li><li>主机广播/多播“路由器询问报文”，收到询问报文的路由器回送“通告报文”，广播其路由信息。</li><li>在没有主机询问时，路由器也可以周期性地发送路由器通告报文，不仅通告自己的存在，而且通告它所知道的网络中所有路由器。</li></ul><h4 id="细节">细节</h4><ul><li>ICMP报文作为IP分组数据转发（被封装在IP分组的数据段中）</li><li>包含ICMP报文的IP分组头的<strong>协议类型</strong>字段值设为：1</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622020021495.png" alt="image-20230622020021495" /><figcaption aria-hidden="true">image-20230622020021495</figcaption></figure><ul><li><p>源站(点)抑制报文：</p><p>用于通知源主机其发送的数据包已被路由器丢弃。这种报文是由路由器生成的，用于告诉源主机减慢其发送速度。</p></li><li><p>CRC校验错误时，路由器不会发送ICMP报文</p></li></ul><h2 id="地址解析协议arp">4.7 地址解析协议ARP</h2><ul><li>IP逻辑地址：实现不同物理网设备（主机、路由器等）地址统一</li><li>分组数据包最终在物理网络上传输（使用物理地址MAC）</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622020442492.png" alt="image-20230622020442492" /><figcaption aria-hidden="true">image-20230622020442492</figcaption></figure><h3 id="地址映射方法">地址映射方法</h3><ul><li>静态映射（人工维护地址映射表）不足：<ul><li>映射表不能及时反映网络设备变化（新添加了主机或路由器）</li><li>IP地址不变情况下更换网卡，重新映射（设备物理地址变化）</li><li>主机物理位置发生变化（IP地址变），但物理地址不变（IP变了）</li></ul></li><li>动态映射（ARP建立映射）</li></ul><h3 id="arp协议">ARP协议</h3><ul><li><strong>正向地址解析协议</strong>（ARP）：从已知IP地址解析对应的物理地址（MAC）的映射关系过程，从IP地址到物理地址</li><li><strong>反向地址解析</strong>（RARP）：从已知的物理地址解析对应的IP地址，从 IP地址到物理地址</li><li>解析过程：使用ARP请求分组、应答分组</li></ul><p><strong>下图中:B -&gt; byte</strong></p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622020619008.png" alt="image-20230622020619008" /><figcaption aria-hidden="true">image-20230622020619008</figcaption></figure><h4 id="字段意义">字段意义</h4><ul><li>硬件类型：16位，物理网络类型（1-以太网）</li><li>协议类型：16位，网络协议类型（08000x-IPv4协议）</li><li>硬件地址长度：8位，物理地址长度（6-以太网地址）</li><li>协议地址长度：8位，网络层地址长度（4-IPv4协议）</li><li>操作：16位，1-ARP请求分组；2-ARP应答分组</li><li>源（目的）结点MAC地址：6B，以太网源（目的）结点物理地址</li><li>源（目的）结点IP地址：4B，源（目的）结点IP地址</li><li>补充数据段：18B，ARP分组长度达到46B（最小帧64B要求）</li></ul><h4 id="分组的封装">分组的封装</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622020906681.png" alt="image-20230622020906681" /><figcaption aria-hidden="true">image-20230622020906681</figcaption></figure><h4 id="地址解析过程">地址解析过程</h4><h5 id="工作过程-1">工作过程</h5><p>目的mac地址不知道就填0 然后广播(FF:FF:FF:FF:FF:FF) 接收的主机跟自己的进行匹配，匹配上了就定向发回主机a</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622021206692.png" alt="image-20230622021206692" /><figcaption aria-hidden="true">image-20230622021206692</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622021211247.png" alt="image-20230622021211247" /><figcaption aria-hidden="true">image-20230622021211247</figcaption></figure><h5 id="本地arp高速缓存">本地ARP高速缓存</h5><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622021320763.png" alt="image-20230622021320763" /><figcaption aria-hidden="true">image-20230622021320763</figcaption></figure><h4 id="arp欺骗与防范选修">ARP欺骗与防范(选修)</h4><h5 id="arp协议缺陷">1. ARP协议缺陷</h5><ul><li>ARP高速缓存根据所接收的ARP协议包，随时进行动态更新</li><li>ARP协议无需连接，任意主机在无ARP请求时，也可以做出应答</li><li>ARP协议没有认证机制，只要接收的协议包有效，主机无条件根据协议包内容刷新本机ARP缓存，并不检查该协议包的合法性</li></ul><h5 id="arp欺骗过程">2. ARP欺骗过程</h5><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622021442055.png" alt="image-20230622021442055" /><figcaption aria-hidden="true">image-20230622021442055</figcaption></figure><h5 id="arp欺骗防范">3. ARP欺骗防范</h5><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622021528566.png" alt="image-20230622021528566" /><figcaption aria-hidden="true">image-20230622021528566</figcaption></figure><h1 id="链路层">链路层</h1><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622153241667.png" alt="image-20230622153241667" /><figcaption aria-hidden="true">image-20230622153241667</figcaption></figure><h2 id="链路">5.1 链路</h2><ul><li><p>链路：一条点到点的物理线路（中间没有任何其它交换结点），也叫物理链路</p></li><li><p>数据链路：物理线路/传输设备+规程（软硬件）保证数据传输正确性，也叫逻辑链路</p></li><li><p>通路：由许多链路串接而成（链路是通路的组成部分）</p></li><li><p>物理层：为数据传输提供所需要的物理链路。</p></li><li><p>数据链路层：将数据从物理链路的一个节点传送到下一个节点</p><ul><li>不同的链路采用不同的链路层协议，提供的服务不同</li></ul></li><li><p>网络层：将数据从数据链路的源主机传送到目的主机</p><ul><li>能够在各段链路层提供异构服务的情况下，完成端到端的工作</li></ul></li></ul><h2 id="差错产生原因">5.2 差错产生原因</h2><p>信道存在底噪，数据就会被影响</p><ul><li>在物理通信线路上传输数据信号<strong>一定</strong>存在差错（收发数据不一致！）</li><li>在原始、有差错物理线路上层，采取差错检测、差错控制等方法，将物理线路改造成无差错的数据链路（向网络层提供高质量服务）</li><li>物理层以上各层都有改善数据传输质量责任，数据链路层差错控制最重要</li></ul><p>根本原因：噪声</p><p>类型：</p><ul><li>热（白）噪声：由热噪声引起的差错是随机差错，或随机差错。是由电子热运动引起的，具有“<strong>幅度小，不能够消除</strong>”等特点</li><li>冲击噪声：引起的差错是突发差错，具有“呈突发状，常由外界因素引起，幅度可能相当大，<strong>无法靠提高信噪比</strong>来避免”，是主要差错原因</li></ul><h3 id="信噪比snr">信噪比(SNR)</h3><p><strong>定义</strong></p><p>所需的信号强度与背景噪声的强度。其定义为信号功率与噪声功率的比例，以分贝为单位</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622154625740.png" alt="image-20230622154625740" /><figcaption aria-hidden="true">image-20230622154625740</figcaption></figure><p><strong>要点</strong></p><ul><li>一般来说，信噪比越大，说明混在信号里的噪声越小，信号质量越好</li><li>信噪比越高，接收端误码率越低</li><li>提高信噪比的手段：提高信号发射功率、降低环境干扰</li></ul><h3 id="误码率ber">误码率(BER)</h3><p><strong>定义</strong></p><p>表示二进制比特流在数据传输系统中被传错的概率</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622155138258.png" alt="image-20230622155138258" /><figcaption aria-hidden="true">image-20230622155138258</figcaption></figure><p><strong>要点</strong></p><ul><li><p>误码率是衡量数据传输系统正常工作状态下<strong>传输可靠性</strong>的参数</p></li><li><p>传输出现误码是正常且<strong>不可避免</strong>的，只要控制在一个合理的范围内</p></li><li><p>误码率只是衡量通信系统的一个指标，<strong>并非越低越好</strong></p></li><li><p>非二进制数据传输系统的误码率计算，需<strong>折合成二进制</strong></p></li></ul><h3 id="差错校验与纠正-检错码edc和纠错码ecc">差错校验与纠正-检错码(EDC)和纠错码(ECC)</h3><p>检错码：自动发现差错的编码</p><p>纠错码：不仅能发现差错，还能自动纠正差错的编码</p><h4 id="思想">思想</h4><p>在向信道发送数据之前，先按某种关系加上一定的<strong>冗余位</strong>（差错控制编码），构成<strong>码字</strong>再发送。接收方收到码字后查看<strong>信息位</strong>和冗余位，并检查它们的关系（<strong>校验</strong>），以发现传输中是否存在差错</p><ul><li><p>码字（n比特）=信息位（k比特）+ 冗余位（r比特）</p></li><li><p>编码效率<span class="math inline">\(R=\frac{k}{n}=\frac{k}{k+r}\)</span>,R越大，编码效率越高</p></li></ul><p>常见的检错纠错：</p><ul><li>校验和：常用于传输层，检错码</li><li>奇偶校验：较简单，检错码</li><li>循环冗余校验：较复杂，检错码</li><li>海明码：纠错码</li></ul><p>注：</p><ul><li>差错检测和纠正技术<strong>不能保证</strong>接收方检测到所有的比特差错，即可能出现未检测到的比特差错，而接收方并未发现。</li><li>选择一个合适的差错检测方案使未检测到的情况发生的概率很小</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622161228968.png" alt="image-20230622161228968" /><figcaption aria-hidden="true">image-20230622161228968</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622161246890.png" alt="image-20230622161246890" /><figcaption aria-hidden="true">image-20230622161246890</figcaption></figure><h3 id="校验和">校验和</h3><p>常用于<strong>传输层</strong>，TCP/UCP报文的差错检测。</p><p><strong>校验位的计算</strong>：将要发送的数据看成是一个16位整数的序列，将这些16 位整数加起来，得到的和作为检验位。</p><p><strong>发送端</strong></p><ul><li>将数据的每两个字节当作一个16位的整数，可分成若干整数</li><li>将所有16 位的整数求和</li><li>对得到的和逐位取反，作为检查和，放在报文段首部，一起发送</li></ul><p><strong>接收端</strong></p><p>对接收到的信息 (包括检查和)按与发送方相同的方法反码求和</p><ul><li>等于“0”：收到的数据无差错</li><li>不等于“0”：收到的数据出现差错</li></ul><h3 id="奇偶校验码">奇偶校验码</h3><ul><li>奇偶校验：在信息位后面加上<strong>一位</strong>校验位使得码字中“1”的个数为奇(偶)数</li></ul><h3 id="海明码纠错">海明码(纠错)</h3><p>利用<strong>一个以上</strong>的校验位，不仅可以验证是否有错，还能在数据出错时指明出错的位置</p><p>若用r个监督关系式产生r个校正因子，区分无错、码字中n个不同位置的位错，则要求<span class="math inline">\(2^r \geqslant n+1\)</span>，即<span class="math inline">\(2^r \geqslant k+r+1\)</span></p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622162520708.png" alt="image-20230622162520708" /><figcaption aria-hidden="true">image-20230622162520708</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622162555463.png" alt="image-20230622162555463" /><figcaption aria-hidden="true">image-20230622162555463</figcaption></figure><h3 id="循环冗余校验码crc校验码">循环冗余校验码(CRC校验码)</h3><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622163111670.png" alt="image-20230622163111670" /><figcaption aria-hidden="true">image-20230622163111670</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622163149628.png" alt="image-20230622163149628" /><figcaption aria-hidden="true">image-20230622163149628</figcaption></figure><ul><li>自动反馈重发（ARR纠错）：收发双方在发现帧传输错误时，采用反馈/重发方法纠正错误</li><li>接收方通过检错码检查接收数据是否正确，发现传输错误就采用ARR纠错</li></ul><h2 id="流量控制-1">5.3 流量控制</h2><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622163905837.png" alt="image-20230622163905837" /><figcaption aria-hidden="true">image-20230622163905837</figcaption></figure><h3 id="单帧停止等待协议">单帧停止等待协议</h3><ul><li>发送方每次发送一帧后，需要等待确认帧返回，再发送下一帧</li><li>发送方收到否认帧（数据帧错），重新发送出错的数据帧</li><li>优点：协议简单、容易实现</li><li>缺点：帧传输效率低下</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622165021957.png" alt="image-20230622165021957" /><figcaption aria-hidden="true">image-20230622165021957</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622165035094.png" alt="image-20230622165035094" /><figcaption aria-hidden="true">image-20230622165035094</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622165054816.png" alt="image-20230622165054816" /><figcaption aria-hidden="true">image-20230622165054816</figcaption></figure><p>帧传输总延时 = 2*传播延时+(数据帧处理延时+确认帧处理延时)+数据帧发送延时+确认帧发送延时</p><p>tT ≈tf+2tp ，因为处理延时和确认报文很短，<strong>忽略不计</strong></p><p>帧传播效率 = 数据帧发送延时 / 帧传输总延时</p><h3 id="连续arq协议">连续ARQ协议</h3><h4 id="拉回重发gbn">拉回重发(GBN)</h4><p>（1）发送方发送N个帧以后，若发现该N个帧的前一个帧在计时器超时后仍未返回其确认信息，则该帧被判断为出错或丢失，此时将重发该出错帧及随后的N个帧；</p><p>（2）采用<strong>累积确认</strong>的方法，即对某一数据帧的确认即表明该数据帧及这以前所有的数据帧均已正确接收</p><h4 id="选择重发sr">选择重发(SR)</h4><p>（1）每一个发送缓冲区有一个计时器，当计时器超时时，缓冲区的帧就会重传；</p><p>（2）如果接收方怀疑帧出错，就会发一个否定帧NAK给发送方，要求重传NAK中指定的帧</p><h3 id="滑动窗口协议">滑动窗口协议</h3><p>链路层滑动窗口与传输层TCP滑动窗口原理相同</p><ul><li>一个是针对于帧的传送</li><li>另一个是针对字节数据的传送</li></ul><p>详情见TCP滑动窗口</p><h2 id="局域网参考模型与以太网工作原理">5.4 局域网参考模型与以太网工作原理</h2><h3 id="介质控制访问">介质控制访问</h3><h4 id="定义">定义</h4><p>用来决定广播信道中<strong>信道分配</strong>的协议，属于数据链路层的一个子层，称为介质访问控制（Medium Access Control，MAC）子层</p><h4 id="任务"><strong>任务</strong></h4><p>为使用介质的每个节点隔离来自同一信道上其它节点所传送的信号，以协调活动节点的传输</p><h4 id="分类">分类</h4><p>信道划分介质访问控制：<strong>频分多路复用、时分多路复用</strong>、波分多路复用、码分多路复用【静态划分】 随机访问介质访问控制：ALOHA、<strong>CSMA/CD</strong>、CSMA/CA 【动态划分】 轮询访问介质访问控制：令牌传递协议【动态划分】</p><h4 id="频分多路复用与时分多路复用">频分多路复用与时分多路复用</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622170652817.png" alt="image-20230622170652817" /><figcaption aria-hidden="true">image-20230622170652817</figcaption></figure><h4 id="随机介质控制访问-纯aloha">随机介质控制访问-纯ALOHA</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622170717146.png" alt="image-20230622170717146" /><figcaption aria-hidden="true">image-20230622170717146</figcaption></figure><ul><li>每个主机均自由地发送数据帧</li><li>不考虑由于信道不良引起的误码</li><li>碰撞后，各主机等待一段随机的时间，然后再进行重传。若再发生碰撞，则需要再等待一段随机的时间，直到重传成功为止</li><li>效率较低</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622170826354.png" alt="image-20230622170826354" /><figcaption aria-hidden="true">image-20230622170826354</figcaption></figure><h4 id="时隙aloha">时隙ALOHA</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622170846497.png" alt="image-20230622170846497" /><figcaption aria-hidden="true">image-20230622170846497</figcaption></figure><ul><li>将所有主机进行时间同步，并将时间划分为一段段等长的时隙（time slot）</li><li>只能在每个时隙的开始时才能发送一个数据帧</li><li>时隙长度T0使得每个帧正好在一个时隙内发送完毕</li><li>每个帧到达后，一般都要在缓存中等待一段小于T0然后才发送出去</li></ul><h4 id="csmacd">CSMA/CD</h4><ul><li>以太网数据传输特点</li><li>载波侦听多路访问/冲突检测（CSMA/CD）技术<ul><li>载波侦听：监听总线占用</li><li>多路访问：平等访问总线</li><li>冲突检测：冲突不可避免</li></ul></li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622170942626.png" alt="image-20230622170942626" /><figcaption aria-hidden="true">image-20230622170942626</figcaption></figure><p><strong>冲突窗口概念</strong></p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622171007290.png" alt="image-20230622171007290" /><figcaption aria-hidden="true">image-20230622171007290</figcaption></figure><h3 id="以太网帧结构">以太网帧结构</h3><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230622171349067.png" alt="image-20230622171349067" /><figcaption aria-hidden="true">image-20230622171349067</figcaption></figure><ul><li>前导符/帧前定界符：由10101010比特流组成</li><li>目的地址、源地址：MAC地址（6字节）</li><li>类型：网络层协议类型（0x800表示IP协议；0x8137表示IPX协议</li><li>数据：46B~1500B（帧头长度为18B）</li><li>帧校验：32位CRC校验（目的地址、源地址、类型、帧数据）</li></ul><h3 id="以太网卡结构">以太网卡结构</h3><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622171454297.png" alt="image-20230622171454297" /><figcaption aria-hidden="true">image-20230622171454297</figcaption></figure><h2 id="局域网技术与数据链路层协议">5.5 局域网技术与数据链路层协议</h2><ul><li><p>现代以太网技术: 交换式局域网</p></li><li><p>交换技术应用于高性能局域网技术</p><ul><li><p>传统共享介质局域网（所有结点共享一条传输介质）不可避免发生冲突（结点数量不断增加，网络负荷加重，网络效率急剧下降）</p></li><li><p>克服网络规模与网络性能矛盾，将共享介质改为交换方式，即二层交换技术</p></li><li><p>二层交换技术不关心三层协议</p><ul><li><p>不会检查网络层，IPV4、IPV6等三层协议分组均可以穿越二层交换机</p></li><li><p>网桥、交换机</p></li></ul></li></ul></li></ul><h3 id="网桥">网桥</h3><h4 id="基本特征">基本特征</h4><ul><li>互联两个不同数据链路层协议（不同传输介质、不同传输率）</li><li>以接收、存储、地址过滤与转发方式实现网络之间通信</li><li>需要互联网络在数据链路层以上采用相同协议</li><li>分隔两个网络之间的广播通信量，改善互联网络性能与安全性</li></ul><h4 id="层次结构">层次结构</h4><p>从802.X到802.Y的网桥</p><ul><li>不同的帧格式-重新封装</li><li>不同的传输速率-缓存</li><li>不同的最大帧长度-切割</li><li>不同的安全策略</li><li>不同的服务质量要求</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622171647475.png" alt="image-20230622171647475" /><figcaption aria-hidden="true">image-20230622171647475</figcaption></figure><h4 id="透明网桥">透明网桥</h4><ul><li>通过透明网桥，将多个局域网连接起来，硬件和软件不需要做任何变化。</li><li>透明网桥工作在混杂模式，接受所有的帧</li><li>当一个帧到达网桥时，它必须做出丢弃还是转发的决策。</li><li>决策通过在网桥内部的地址表中，查找目的MAC地址而做出的。</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622171748929.png" alt="image-20230622171748929" /><figcaption aria-hidden="true">image-20230622171748929</figcaption></figure><h4 id="网桥的内部结构">网桥的内部结构</h4><p>当一个帧到达网桥时：</p><ul><li>源地址是否有匹配：有-&gt;检查更新 / 没有-&gt;逆向学习</li><li>目的地址是否有匹配：有-&gt;转发 / 没有-&gt;广播</li></ul><h4 id="变化拓扑的适应">变化拓扑的适应</h4><ol type="1"><li>当网桥往表中加入记录时，必须要打时间戳，</li><li>如果收到帧的源地址在表中有记录，也要更新时间戳，</li><li>网桥需要周期性的扫描转发表，把超时的记录从表中面删除</li></ol><h4 id="网桥转发的原理">网桥转发的原理</h4><ul><li>如果查到目的端口和源端口是相同，就会丢弃这一帧，</li><li>如果目的端口和源端口不同，就会转发这一帧，</li><li>如果这个目的地址没有在表里面查到，就会广播这一帧。</li></ul><h3 id="局域网交换机">局域网交换机</h3><h4 id="结构与工作原理">结构与工作原理</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622172145089.png" alt="image-20230622172145089" /><figcaption aria-hidden="true">image-20230622172145089</figcaption></figure><ul><li>泛洪广播 目的地址未知，或广播地址，除源端口外在其他所有的端口进行转发</li><li>转发 对于已经学习到的目的地址，直接转发到相应的端口。</li><li>过滤 目的地址和源地址所处的端口是相同的，将帧丢弃。</li><li>逆向学习 读取真的源地址和达到端口进行学习，补充更新转发表。</li></ul><h4 id="三种交换方式">三种交换方式</h4><ul><li>直接交换方式<ul><li>交换机只接收数据帧头部，检测目的地址，立即转发（无论帧是否出错）</li><li>帧出错检测由结点主机完成（延迟小，缺乏差错检测）</li></ul></li><li>存储转发交换方式<ul><li>交换机完整地接收数据帧，并检测差错。若帧正确，则根据帧目的地址确定输出端口，进行转发出</li><li>具有帧差错检测能力，延迟大</li></ul></li><li>改进的直接交换方式（二者结合）<ul><li>检查帧的长度是否够64个字节，如果小于64字节则丢弃（碎片帧）；如果大于64字节，则转发。</li><li>不提供差错检测，但是出错的机会比直接转发小，数据处理速度比存储转发方式快</li></ul></li></ul><h4 id="vlan">VLAN</h4><ul><li>一种网络服务（不是组网技术）</li><li>交换式局域网技术是实现VLAN基础（用户与局域网资源一种逻辑组合）</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622172332590.png" alt="image-20230622172332590" /><figcaption aria-hidden="true">image-20230622172332590</figcaption></figure><h1 id="ipv6">IPv6</h1><p>IPv6地址使用<strong>128位</strong>地址</p><h2 id="ipv6的优势与特点">7.1 IPv6的优势与特点</h2><h3 id="优势">优势</h3><ul><li>解决<strong>地址耗尽</strong>问题：IPv6采用128位的地址空间，几乎能够做到不受任何限制地提供IP地址。 “地球上的每一粒沙子都拥有一个IPv6地址”。</li><li>改善<strong>网络性能</strong>：IPv6数据包远远大于IPv4数据包的64KB，应用程序可以利用最大传输单元MTU获得更高效的数据传输速率</li><li>方便各项业务开展：充足的IPv6地址保证了通信终端都可以获得外网IP地址，无需NAT的中转</li><li>服务质量保证：负载均衡，实现优先级控制和服务质量保证</li><li>安全性更高：内置了安全机制IPSec，确保端到端通信的完整性和保密性</li><li>支持移动性：保证在通信不中断的情况下，漫游到其他网络</li></ul><h3 id="特点-4">特点</h3><ul><li>新的协议头格式</li><li>巨大的地址空间</li><li>有效的分级寻址和路由结构</li><li>有状态和无状态的地址自动配置</li><li>内置的安全机制</li><li>更好地支持QoS</li></ul><h2 id="ipv6地址格式">7.2 IPv6地址格式</h2><h3 id="冒分十六进制地址表示法">冒分十六进制地址表示法</h3><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622172638348.png" alt="image-20230622172638348" /><figcaption aria-hidden="true">image-20230622172638348</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622172658673.png" alt="image-20230622172658673" /><figcaption aria-hidden="true">image-20230622172658673</figcaption></figure><h3 id="内嵌ipv4地址表示法">内嵌IPv4地址表示法</h3><p>将IPv4地址嵌入于IPv6地址中，形式如下</p><p><span class="math display">\[x: x: x: x: x: x:d.d.d.d\]</span> 其前96位采用冒分十六进制表示，后32位地址使用IPv4的点分十进制表示。 例如： <span class="math display">\[::192.168.0.1  与  ::FFFF:192.168.0.1\]</span></p><h3 id="ipv6前缀格式">IPv6前缀格式</h3><ul><li>IPv6不支持子网掩码，它只支持前缀长度表示法</li><li>前缀是IPv6地址的一部分，用作IPv6路由或子网标识。其格式为： IPv6地址/前缀长度n，例如：60位前缀20010DB80000CD30，可以写为：2001:0DB8:0:CD30::/60</li></ul><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622172907391.png" alt="image-20230622172907391" /><figcaption aria-hidden="true">image-20230622172907391</figcaption></figure><h2 id="ipv6地址分类">7.3 IPv6地址分类</h2><p>IPv6地址主要分为：单播地址、组播地址、任意播地址</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622172943585.png" alt="image-20230622172943585" /><figcaption aria-hidden="true">image-20230622172943585</figcaption></figure><h2 id="ipv6的分组结构">7.4 IPv6的分组结构</h2><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622173016382.png" alt="image-20230622173016382" /><figcaption aria-hidden="true">image-20230622173016382</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622173024470.png" alt="image-20230622173024470" /><figcaption aria-hidden="true">image-20230622173024470</figcaption></figure><p><strong>IPv6扩展头部的特点包括</strong>：逐跳选项报头、目的选项报头、路由选项报头、分段选项报头、认证选项报头、封装安全有效载荷报头。</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622173050288.png" alt="image-20230622173050288" /><figcaption aria-hidden="true">image-20230622173050288</figcaption></figure><h3 id="扩展头部各字段含义">扩展头部各字段含义</h3><h4 id="逐跳选项报头hop-by-hop-option-header">1. 逐跳选项报头（hop-by-hop option header）</h4><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622173146365.png" alt="image-20230622173146365" /><figcaption aria-hidden="true">image-20230622173146365</figcaption></figure><h4 id="目的选项报头destination-option-header">2.目的选项报头（destination option header）</h4><p>用于指定中间结点或目的结点的分组转发参数。有两种使用方式： （1）如果存在路由选项报头，那么目的选项报头指定每个中间结点都要转发或处理的选项。在这种情况下，目的选项报头出现在路由选项报头之前。 （2）如果不存在路由选项报头，或目的选项报头出现在路由选项报头之后，则目的选项报头指定在最后的路由结点要转发或处理的选项</p><h2 id="ipv6与ipv4分组头的对比">7.5 IPv6与IPv4分组头的对比</h2><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622173237016.png" alt="image-20230622173237016" /><figcaption aria-hidden="true">image-20230622173237016</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622173245332.png" alt="image-20230622173245332" /><figcaption aria-hidden="true">image-20230622173245332</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230622173251453.png" alt="image-20230622173251453" /><figcaption aria-hidden="true">image-20230622173251453</figcaption></figure><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>全双工：同时收发 <a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>具体的查看拥塞控制 <a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>由MSS控制 <a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>纯ACK报文段(数据长度=0，窗口字段=0) <a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE结构学习笔记</title>
    <link href="/2023/06/04/PE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/04/PE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="pe文件结构学习笔记">PE文件结构学习笔记</h1><h1 id="结构图片">结构图片</h1><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PE%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="PE结构示意图" /><figcaption aria-hidden="true">PE结构示意图</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PE%E6%96%87%E4%BB%B6%E5%A4%B4.jpg" alt="PE文件头" /><figcaption aria-hidden="true">PE文件头</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PE%E5%A4%B4.png" alt="PE头" /><figcaption aria-hidden="true">PE头</figcaption></figure><h1 id="基本概念">基本概念</h1><table><thead><tr class="header"><th>名称</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>地址</td><td>是“<strong>虚拟地址</strong>” 而不是“<strong>物理地址</strong>”。</td></tr><tr class="even"><td>镜像文件</td><td>包含以 EXE 文件为代表的 “可执行文件”、以DLL文件为代表的“动态链接库”。</td></tr><tr class="odd"><td>RVA</td><td>英文全称 Relatively Virtual Address。偏移（又称“相对虚拟地址”）。相对镜像基址的偏移。</td></tr><tr class="even"><td>节</td><td><strong>节</strong>是PE文件中<strong>代码</strong>或<strong>数据</strong>的基本单元。原则上讲，节只分为“<strong>代码节</strong>”和“<strong>数据节</strong>”。</td></tr><tr class="odd"><td>VA</td><td>英文全称 Virtual Address。基址</td></tr></tbody></table><p>​ PE（ Portable Execute）文件是Windows下可执行文件的总称，常见的有 <strong>DLL，EXE，OCX，SYS</strong> 等。它是微软在 UNIX 平台的 COFF（通用对象文件格式）基础上制作而成。<strong>最初设计用来提高程序在不同操作系统上的移植性，但实际上这种文件格式仅用在 Windows 系列操作系统下</strong>。</p><div class="note note-info">            <p>PE文件是指 32 位可执行文件，也称为PE32。64位的可执行文件称为 PE+ 或 PE32+，是PE(PE32)的一种扩展形式（不是PE64)。</p>          </div><hr /><p>PE文件的结构一般来说如下图所示：从起始位置开始依次是 <strong>DOS头</strong>，<strong>NT头</strong>，<strong>节表</strong> 以及 <strong>具体的节</strong>。</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo220130914221950000" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo220191026221922478.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h2 id="pe-文件的执行顺序">PE 文件的执行顺序</h2><ol type="1"><li><p>当一个PE文件被执行时, <strong>PE装载器</strong>首先检查DOS header里的PE header的偏移量。如果找到，则直接跳转到PE header的位置。</p></li><li><p>当<strong>PE装载器</strong>跳转到PE header后，第二步要做的就是检查PE header是否有效。如果该PE header有效，就跳转到PE header的尾部。</p></li><li><p>紧跟PE header尾部的是节表。PE装载器执行完第二步后开始读取节表中的节段信息，并采用文件映射的方法将这些节段映射到内存，<strong>同时附上节表里指定节段的读写属性</strong>。</p><div class="note note-info">            <p>在执行一个PE文件的时候，Windows并不在一开始就将整个文件读入内存，而是采用与内存映射的机制，也就是说，<strong>Windows装载器在装载的时候仅仅建立好虚拟地址和PE文件之间的映射关系，只有真正执行到某个内存页中的指令或者访问某一页中的数据时，这个页面才会被从磁盘提交到物理内存</strong>，这种机制使文件装入的速度和文件大小没有太大的关系。</p>          </div></li><li><p>PE文件映射入内存后，PE装载器将继续处理PE文件中类似import table(输入表)的逻辑部分。</p></li></ol><h2 id="pe-文件结构说明">PE 文件结构说明</h2><h3 id="dos头">1. DOS头</h3><p>用来兼容 MS-DOS 操作系统的，目的是当这个文件在 MS-DOS 上运行时提示一段文字，大部分情况下是：This program cannot be run in DOS mode. 还有一个目的，就是指明 NT 头在文件中的位置。</p><h3 id="nt头">2. NT头</h3><p>包含windows PE文件的主要信息，其中包括一个 <strong>'PE' 字样的签名</strong>,<strong>PE文件头(IMAGE_FILE_HEADER)</strong>和 <strong>PE可选头(IMAGE_OPTIONAL_HEADER32)。</strong></p><h3 id="节表">3. 节表</h3><p>是 PE 文件后续节的描述，windows 根据节表的描述加载每个节。</p><h3 id="节">4. 节</h3><p>每个节实际上是一个容器，可以包含代码、数据等等，每个节可以有独立的内存权限，比如代码节默认有读/执行权限，节的名字和数量可以自己定义，未必是上图中的三个。</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo220191026013517622.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h2 id="相对虚拟地址rva和虚拟地址va">相对虚拟地址RVA和虚拟地址VA</h2><p>当一个 PE 文件被加载到内存中以后，我们称之为 " 映象 "（image）。</p><div class="note note-info">            <p><strong>一般来说，PE文件在硬盘上和在内存里是不完全一样的</strong>，<strong>被加载到内存以后其占用的虚拟地址空间要比在硬盘上占用的空间大一些</strong>，<strong>这是因为各个节在硬盘上是连续的，而在内存中是按页对齐的，所以加载到内存以后节之间会出现一些 “空洞” 。</strong></p>          </div><p>因为存在这种对齐，所以在 PE 结构内部，表示某个位置的地址采用了两种方式：</p><ol type="1"><li>针对在硬盘上存储文件中的地址，称为 <strong>原始存储地址</strong> 或 <strong>物理地址,表示距离文件头的偏移。</strong></li><li>针对加载到内存以后映象中的地址，称为 <strong>相对虚拟地址（RVA），表示相对内存映象头的偏移</strong>。</li></ol><p><strong>堆栈</strong>：堆栈里面的数据都是临时存储的数据，作为参数、局部变量、计算的中间值等临时的存储位置。使用数据时，用pop出栈使用数据，并清除堆栈上对应数据。</p><p>然而 CPU 的某些指令是需要使用绝对地址的，比如取全局变量的地址，传递函数的地址，以及编译后的汇编指令中肯定需要用到绝对地址而不是相对映象头的偏移，因此 PE 文件会建议操作系统将其加载到某个<strong>内存地址</strong>，这个叫基地址。段地址其实就是一种基地址，但基地址并不等于就是段地址。</p><p>所谓基地址(可以理解为汇编中全局变量)，顾名思义就可以理解为基本地址，他是相对偏移量的计算基准，即参考位置。</p><p>基地址可以理解为内存中整个PE文件的头地址文件最开始的位置，编译器便根据这个地址求出代码中一些全局变量和函数的地址，并将这些地址用到对应的指令中。</p><p>这种表示方式叫做 <strong>虚拟地址（VA）</strong>。</p><hr /><p>未完待续</p>]]></content>
    
    
    <categories>
      
      <category>Re学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACTF新生赛2020_Splendid_MineCraft刷题记录</title>
    <link href="/2023/05/19/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-Splendid-MineCraft%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/05/19/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-Splendid-MineCraft%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>总算搞定这题了，这题是SMC</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230519002002154.png" alt="image-20230519002002154" /><figcaption aria-hidden="true">image-20230519002002154</figcaption></figure><p>通过三个strtok可以猜测flag格式是:ACTF{123456_ABCDEF_abcdef}</p><p>先看unk_4051D8： 强制分析了一下：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230519002209602.png" alt="image-20230519002209602" /><figcaption aria-hidden="true">image-20230519002209602</figcaption></figure><p>发现前面是正常的代码，后面是不正常的代码，简要分析一下0x4051E1~0x4051F5，可以知道这是根据esi+1f+edi的地址上面的数据处理。但是esi是未知的：</p><p>这就要看前面的神奇部分了：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230519002443484.png" alt="image-20230519002443484" /><figcaption aria-hidden="true">image-20230519002443484</figcaption></figure><div class="note note-info">            <p>首先需要知道$在汇编里面的含义:</p><p>$是intel汇编格式中的一个预定符号，表示当前指令所在的地址偏移。</p><p>所以可知”call $+5”操作的含义就是</p><p>假设call $+5指令的地址为A，那此指令可以翻译为call A+5</p><p>而call指令一般为5个字节，所以此指令完成的操作即为:</p><p>将下一条指令的地址push到栈中，然后跳转到下一条指令</p>          </div><p>所以这里的实际意义是：</p><ol type="1"><li>call将"pop esi"指令地址入栈</li><li>跳转至"pop esi"指令执行</li><li>"pop esi"将栈顶的值保存到esi中</li></ol><p>这样就知道了esi的值，就可以对后面的smc进行ida python脚本解密了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idc<br><span class="hljs-keyword">import</span> ida_bytes<br>addr = <span class="hljs-number">0x4051FC</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x152</span>):<br>    b = ida_bytes.get_byte(addr+i)<br>    b ^= <span class="hljs-number">0x72</span><br>    idc.patch_byte(addr+i, b)<br></code></pre></td></tr></table></figure><p>得到第一段校验:</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230519003310135.png" alt="image-20230519003310135" /><figcaption aria-hidden="true">image-20230519003310135</figcaption></figure><p>解密脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = <span class="hljs-string">&quot;&quot;</span><br>enc11 = <span class="hljs-string">&quot;3@1b;b&quot;</span><br>enc12 = <span class="hljs-string">&quot;elcome&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    b = (<span class="hljs-built_in">ord</span>(enc11[i]) ^ <span class="hljs-built_in">ord</span>(enc12[i]))+<span class="hljs-number">0x23</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(b), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    flag += <span class="hljs-built_in">chr</span>(b)<br></code></pre></td></tr></table></figure><p>回去看main，</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230519002002154.png" alt="image-20230519002002154" /><figcaption aria-hidden="true">image-20230519002002154</figcaption></figure><p>可以知道是将输入的第一部分全部异或，得到v9(0x20)</p><p>再进行第二段smc</p><p>idapython解密即可:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">addr = <span class="hljs-number">0x00405018</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>, <span class="hljs-number">496</span>):<br>    b = ida_bytes.get_byte(addr+i)<br>    b ^= <span class="hljs-number">0x20</span><br>    idc.patch_byte(addr+i, b)<br></code></pre></td></tr></table></figure><p>对于__asm{jmp eax},查看其反汇编：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230519003631479.png" alt="image-20230519003631479" /><figcaption aria-hidden="true">image-20230519003631479</figcaption></figure><p>大体上是知道这个pop是smc的函数的开头，jmp将后面修改的部分连在一起：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230519003755476.png" alt="image-20230519003755476" /><figcaption aria-hidden="true">image-20230519003755476</figcaption></figure><p>a1是这个函数的开始地址,v6是写在这个函数之前的256位数组的开头，v6+k+358恰巧是这段代码中的数据:</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230519003925323.png" alt="image-20230519003925323" /><figcaption aria-hidden="true">image-20230519003925323</figcaption></figure><p>第二段大概就是将第二部分的输入的k位异或k+131,得到的值再去v6的256大小的表寻值。</p><p>解密脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">flag += <span class="hljs-string">&quot;_&quot;</span><br><br><br>enc2Map = [<span class="hljs-number">0xF6</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xAF</span>]<br>enc2 = [<span class="hljs-number">0x30</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x63</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    index = enc2Map.index(enc2[i])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(index ^ (i+<span class="hljs-number">131</span>)), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    flag += <span class="hljs-built_in">chr</span>(index ^ (i+<span class="hljs-number">131</span>))<br></code></pre></td></tr></table></figure><p>回去main函数分析：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230519004314982.png" alt="image-20230519004314982" /><figcaption aria-hidden="true">image-20230519004314982</figcaption></figure><p>知道了是直接明文比对.</p><p>flag就出了.</p><p>ACTF{yOu0y*_knowo3_5mcsM&lt;}</p>]]></content>
    
    
    <categories>
      
      <category>CTF write up</category>
      
      <category>buu刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HDCTF2019-MFC刷题记录</title>
    <link href="/2023/04/18/HDCTF2019-MFC%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/04/18/HDCTF2019-MFC%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="mfc">MFC</h1><p>第一次遇到，记录一下；</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2PicGo2image-20230418001312342.png" alt="image-20230418001312342" /><figcaption aria-hidden="true">image-20230418001312342</figcaption></figure><p>既然是控件，那就是调用API，这个用了普通的VMP(有时间一定会学)，今天就用工具。</p><p>用xspy分析一下这个程序：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230418001413585.png" alt="image-20230418001413585" /><figcaption aria-hidden="true">image-20230418001413585</figcaption></figure><p>可以看到调用了不少API，同时发现</p><p>OnMsg:0464,func= 0x00402170(mfc.exe+ 0x002170 )</p><p>有点不一般，0464 这是一个没有系统库名的，而且数字特殊，所以写一个程序发送一个有关这个数字的消息，用FindWindow函数获取窗口句柄，SendMessage函数发送消息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        HWND h = ::<span class="hljs-built_in">FindWindowA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;Flag就在控件里&quot;</span>);<br>        <span class="hljs-keyword">if</span> (h)<br>        &#123;<br>                <span class="hljs-built_in">SendMessage</span>(h, <span class="hljs-number">0x464</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;false&quot;</span>);<br>        &#125;<br> <br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230418001544207.png" alt="image-20230418001544207" /><figcaption aria-hidden="true">image-20230418001544207</figcaption></figure><p>在xspy中会发现有一串这样的字符串，仔细观察发现句柄有一串奇怪字符</p><p>00190E3E(944c8d100f82f0c18b682f63e4dbaa207a2f1e72581c2f1b)</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230418001611346.png" alt="image-20230418001611346" /><figcaption aria-hidden="true">image-20230418001611346</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>CTF write up</category>
      
      <category>buu刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>re学习记录 初试dll注入</title>
    <link href="/2023/03/03/re%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-dll%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/03/03/re%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-dll%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>最近在看水滴的课，学到了一点点关于dll注入。</p><p>大体上是利用了win系统运行可执行文件会加载dll，但是会优先加载最近的dll文件，就是说你在同一个文件夹下的会优先加载。</p><p>对于课后作业就是造个dll将判断点nop掉，因为加了UPX壳，自己直接本地改又无法保存，只能使得每次都要改，这样就很麻烦，所以可以用这个方法使得自动打进去。</p><p>经过简单的调试就能找到比较点:</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230303010224855.png" alt="image-20230303010224855" /><figcaption aria-hidden="true">image-20230303010224855</figcaption></figure><p>就是0x4010fd,只要把这玩意nop掉就行(或者将je改成jne)</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230303010419738.png" alt="image-20230303010419738" /><figcaption aria-hidden="true">image-20230303010419738</figcaption></figure><p>使用工具就可以快速写出dll补丁，但是还没搞懂为什么我使用hook APi会导致注入失败，就是连注入调用都没有。</p>]]></content>
    
    
    <categories>
      
      <category>Re学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sha散列家族</title>
    <link href="/2023/02/19/Sha%E6%95%A3%E5%88%97%E5%AE%B6%E6%97%8F/"/>
    <url>/2023/02/19/Sha%E6%95%A3%E5%88%97%E5%AE%B6%E6%97%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="sha家族离散">Sha家族离散</h1><h2 id="sha-1">SHA-1</h2><h3 id="流程概况">流程概况</h3><p>对于任意长度的明文，SHA1首先对其进行分组，使得每一组的长度为<strong>512位</strong>，然后对这些明文分组反复重复处理。对于每个明文分组的摘要生成过程如下：</p><ol type="1"><li><p>将512位的明文分组划分为16个子明文分组，每个子明文分组为32位。</p></li><li><p>申请5个32位的链接变量，记为A、B、C、D、E。</p></li><li><p>16份子明文分组扩展为80份。</p></li><li><p>80份子明文分组进行4轮运算。</p></li><li><p>链接变量与初始链接变量进行求和运算。</p></li><li><p>链接变量作为下一个明文分组的输入重复进行以上操作。</p></li><li><p>最后，5个链接变量里面的数据就是SHA1摘要。</p></li></ol><h3 id="分组">1. 分组</h3><p>对任意长度的明文，先是先将明文填充到448(mod512)位，然后再将真正的明文的长度(未填充到448位之前的)以64位表示，附加在以填充到448位的明文之后。</p><div class="note note-info">            <p>与MD5不同的是，SHA1的原始报长不能超过<span class="math inline">\(2^{64}\)</span>，而且SHA1的明文长度从低位开始填充。</p><table><thead><tr class="header"><th>差异处</th><th>MD5</th><th>SHA1</th></tr></thead><tbody><tr class="odd"><td>摘要长度</td><td>128位</td><td>160位</td></tr><tr class="even"><td>运算步骤数</td><td>64</td><td>80</td></tr><tr class="odd"><td>基本逻辑函数数目</td><td>4</td><td>4</td></tr><tr class="even"><td>常数数目</td><td>64</td><td>4</td></tr></tbody></table>          </div><p>对于512位的明文分组，SHA1将其再分成16份子明文分组（sub-block），每份子明文分组为32位，我们使用M[k]（k= 0, 1,……15）来表示这16份子明文分组。之后还要将这16份子明文分组扩充到80份子明文分组，我们记为W[k]（k= 0, 1,……79），扩充的方法如下。 <span class="math display">\[W _t = M_t \ 当0\leq t\leq 15\\W_t = (W_{t-3} \oplus W_{t-8} \oplus W_{t-14} \oplus W_{t-16}) &lt;&lt;&lt; \ 1\\[&lt;&lt;&lt;] \rightarrow 循环左移\]</span> SHA1有4轮运算，每一轮包括20个步骤（一共80步），最后产生160位摘要，这160位摘要存放在5个32位的链接变量中，分别标记为A、B、C、D、E。这5个链接变量的初始值以16进制位表示如下。</p><div class="note note-success">            <p>A=0x67452301 B=0xEFCDAB89 C=0x98BADCFE D=0x10325476 E=0xC3D2E1F0</p>          </div><h3 id="轮运算">2. 4轮运算</h3><p>SHA1有4轮运算，每一轮包括20个步骤，一共80步，当第1轮运算中的第1步骤开始处理时，A、B、C、D、E五个链接变量中的值先赋值到另外5个记录单元A′，B′，C′，D′，E′中。这5个值将保留，用于在第4轮的最后一个步骤完成之后与链接变量A，B，C，D，E进行求和操作。</p><p>SHA1的4轮运算，共80个步骤使用同一个操作程序，如下：</p><p><span class="math display">\[A,B,C,D,E←[(A&lt;&lt;&lt;5)+ ft(B,C,D)+E+W_t+K_t],A,(B&lt;&lt;&lt;30),C,D\\其中 ft(B,C,D)为逻辑函数，W_t为子明文分组W[t]，K_t为固定常数。\]</span> 这个操作程序的意义为:</p><p>● 将<span class="math inline">\([(A&lt;&lt;&lt;5)+ ft(B,C,D)+E+W_t+K_t]\)</span>的结果赋值给链接变量A；</p><p>● 将链接变量A初始值赋值给链接变量B；</p><p>● 将链接变量B初始值循环左移30位赋值给链接变量C；</p><p>● 将链接变量C初始值赋值给链接变量D；</p><p>● 将链接变量D初始值赋值给链接变量E。</p><p><span class="math inline">\(ft(B,C,D)\)</span>:</p><table><thead><tr class="header"><th>轮</th><th>步骤</th><th>函数定义</th></tr></thead><tbody><tr class="odd"><td>1</td><td>0≤t≤19</td><td><span class="math inline">\(ft(B,C,D)=(B\ and\ C)\ or\ ((not B)\ and\ D)\)</span></td></tr><tr class="even"><td>2</td><td>20≤t≤39</td><td><span class="math inline">\(ft(B,C,D)=B⊕C⊕D\)</span></td></tr><tr class="odd"><td>3</td><td>40≤t≤59</td><td><span class="math inline">\(ft(B,C,D)=(B\ and\ C)\ or\ (B\ and\ D)\ or\ (C\ and\ D)\)</span></td></tr><tr class="even"><td>4</td><td>60≤t≤79</td><td><span class="math inline">\(ft(B,C,D)=B⊕C⊕D\)</span></td></tr></tbody></table><p>在操作程序中需要使用固定常数<span class="math inline">\(K_i\)</span>（i= 0，1，2，……79）</p><table><thead><tr class="header"><th>轮</th><th>步骤</th><th><span class="math inline">\(K_t\)</span></th></tr></thead><tbody><tr class="odd"><td>1</td><td>0≤t≤19</td><td>5A827999</td></tr><tr class="even"><td>2</td><td>20≤t≤39</td><td>6ED9EBA1</td></tr><tr class="odd"><td>3</td><td>40≤t≤59</td><td>8F188CDC</td></tr><tr class="even"><td>4</td><td>60≤t≤79</td><td>CA62C1D6</td></tr></tbody></table><h3 id="添加">3. 添加</h3><p><span class="math display">\[h_0 = A + A^′，h_1 = B + B^′，h_2 = C + C^′，h_3 = D + D^′，h_4 = E + E^′\]</span></p><p><span class="math inline">\(h_0\)</span>~<span class="math inline">\(h_4\)</span>作为输入成为下一个512位明文分组的链接变量A，B，C，D，E。当最后一个明文分组计算完成以后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">result = (A &lt;&lt; <span class="hljs-number">32</span>*<span class="hljs-number">4</span>) | (B &lt;&lt; <span class="hljs-number">32</span>*<span class="hljs-number">3</span>) | (C &lt;&lt; <span class="hljs-number">32</span>*<span class="hljs-number">2</span>) | (D &lt;&lt; <span class="hljs-number">32</span>) | E<br></code></pre></td></tr></table></figure><h2 id="sha-2">SHA-2</h2><p>SHA-2可再分为六个不同的算法标准，包括了：SHA-224、SHA-256、SHA-384、SHA-512、SHA-512/224、SHA-512/256。</p><p>这些变体除了生成摘要的长度、循环运行的次数等一些细微差异之外，基本结构是一致的。</p><h2 id="sha-256">SHA-256</h2><h3 id="概述">概述</h3><p>总体上，HSA256与MD4、MD5以及HSA-1等哈希函数的操作流程类似，待哈希的消息在继续哈希计算之前首先要进行以下两个步骤：</p><ul><li><p>对消息进行补位处理，是的最终的长度是512位的倍数，然后</p></li><li><p>以512位为单位对消息进行分块为<span class="math inline">\(M^{(1)},M^{(2)},...,M^{(N)}\)</span></p></li></ul><p>消息区块将进行逐个处理：从一个固定的初始哈希<span class="math inline">\(H^{(0)}\)</span>开始，进行以下序列的计算： <span class="math display">\[H^{(i)} = H^{(i-1)}+C_{M^{(i-1)}}(H^{(i-1)})\]</span> 其中<span class="math inline">\(C\)</span>是SHA256的压缩函数，<span class="math inline">\(+\)</span>是<span class="math inline">\(mod\ 2^{32}\)</span>加法，即将两个数字加在一起，如果对<span class="math inline">\(2^{32}\)</span>取余, <span class="math inline">\(H^{(N)}\)</span>是消息区块的哈希值</p><h3 id="详细描述">详细描述</h3><p>SHA256的压缩函数主要对512位的消息区块和256位的中间哈希值进行操作，本质上，它是一个通过将消息区块为密钥对中间哈希值进行加密的256位加密算法。 因此，为了描述SHA256算法，有以下两方面的组件需要描述：</p><ul><li>SHA256压缩函数</li><li>SHA256消息处理流程</li></ul><p>以下的描述当中所使用到的标记如下：</p><ul><li>⊕: 按位异或</li><li><span class="math inline">\(\wedge\)</span>: 按位与</li><li><span class="math inline">\(\vee\)</span>: 按位或</li><li>¬: 补位</li><li><span class="math inline">\(+\)</span>: 相加以后对<span class="math inline">\(2^{32}\)</span>求余</li><li><span class="math inline">\(R^n\)</span>: 右移n位</li><li><span class="math inline">\(S^n\)</span>: 循环右移n位</li></ul><p>以上所有的操作都是针对32位字节.</p><h4 id="常量初始化">常量初始化</h4><p>初始哈希值<span class="math inline">\(H^{(0)}\)</span>取自自然数中前面8个素数(2,3,5,7,11,13,17,19)的平方根的小数部分, 并且取前面的32位.</p><p>于是, 质数2的平方根的小数部分取前32位就对应<code>0x6a09e667</code>.</p><p>如此类推, 初始哈希值由以下8个32位的哈希初值构成: $ H_1^{(0)}=6a09e667 $ $ H_2^{(0)}=bb67ae85 $ $ H_3^{(0)}=3c6ef372 $ $ H_4^{(0)}=a54ff53a $ $ H_5^{(0)}=510e527f $ $ H_6^{(0)}=9b05688c $ $ H_7^{(0)}=1f83d9ab $ $ H_8^{(0)}=5be0cd19 $ SHA256算法当中还使用到64个常数, 取自自然数中前面64个素数的立方根的小数部分的前32位, 如果用16进制表示, 则相应的常数序列如下:</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dns">[<span class="hljs-number">428a2f98</span> <span class="hljs-number">71374491</span> b5c0fbcf e9b5dba5<br> <span class="hljs-number">3956</span>c25b <span class="hljs-number">59f111f1</span> <span class="hljs-number">923f82a4</span> ab1c5ed5<br> d807aa<span class="hljs-number">98 12835b01</span> <span class="hljs-number">243185</span>be <span class="hljs-number">550</span>c7dc3<br> <span class="hljs-number">72</span>be5d74 <span class="hljs-number">80d</span>eb1fe <span class="hljs-number">9</span>bdc06a7 c19bf174<br> e49b69c1 efbe4786 <span class="hljs-number">0</span>fc19dc6 <span class="hljs-number">240</span>ca1cc<br> <span class="hljs-number">2d</span>e92c6f <span class="hljs-number">4</span>a7484aa <span class="hljs-number">5</span>cb0a9dc <span class="hljs-number">76</span>f988da<br> <span class="hljs-number">983e5152</span> a831c66d b<span class="hljs-number">00327c8</span> bf597fc7<br> c6e00bf3 d<span class="hljs-number">5a79147</span> <span class="hljs-number">06</span>ca63<span class="hljs-number">51 14292967</span><br> <span class="hljs-number">27</span>b70a85 <span class="hljs-number">2e1b2138</span> <span class="hljs-number">4d</span>2c6dfc <span class="hljs-number">53380d13</span><br> <span class="hljs-number">650a7354</span> <span class="hljs-number">766</span>a0abb <span class="hljs-number">81</span>c2c92e <span class="hljs-number">92722c85</span><br> a2bfe8a1 a81a664b c24b8b70 c76c51a3<br> d<span class="hljs-number">192e819</span> d<span class="hljs-number">6990624</span> f40e3585 <span class="hljs-number">106</span>aa070<br> <span class="hljs-number">19a4c116</span> <span class="hljs-number">1e376c08</span> <span class="hljs-number">2748774</span>c <span class="hljs-number">34</span>b0bcb5<br> <span class="hljs-number">391</span>c0cb3 <span class="hljs-number">4</span>ed8aa4a <span class="hljs-number">5</span>b9cca4f <span class="hljs-number">682</span>e6ff3<br> <span class="hljs-number">748</span>f82ee <span class="hljs-number">78</span>a5636f <span class="hljs-number">84c87814</span> <span class="hljs-number">8</span>cc70208<br> <span class="hljs-number">90</span>befffa a4506ceb bef9a3f7 c<span class="hljs-number">67178f2</span>]<br></code></pre></td></tr></table></figure><h4 id="消息补全">消息补全</h4><p>和SHA-1相同的补全方法。</p><ul><li>将补码处理后的消息以512位为单位分块为: <span class="math inline">\(M^{(1)},M^{(2)},...,M^{(N)}\)</span>, 其中第<span class="math inline">\(i\)</span>个消息块的前32位表示为: <span class="math inline">\(M_0^{(i)}\)</span>, 后面32位为: <span class="math inline">\(M_1^{(i)}\)</span>, 以此类推, 最后32位的消息块可表示为: <span class="math inline">\(M_{15}^{(i)}\)</span>. 我们采用Big endian约定对数据进行编码, 即认为第一个字节是最高位字节, 因此, 对于每一个32位字节, 最最左边的比特是最大的比特位.</li></ul><h4 id="摘要计算主循环">摘要计算主循环</h4><p>哈希计算算法如下:</p><ul><li><p><span class="math inline">\(For\ i = i\rightarrow N\)</span>(N=是补全后消息块个数)</p><ul><li><p>用第<span class="math inline">\((i-1)\)</span>个中间哈希值来对<span class="math inline">\(a,b,c,d,e,f,g,h\)</span>进行初始化，当<span class="math inline">\(i=1\)</span>时，就初始化哈希，即 $ a H_1^{(i-1)} $ $ b H_2^{(i-1)} $ $ $ $ h H_8^{(i-1)} $</p></li><li><p>应用SHA256压缩函数来更新<span class="math inline">\(a,b,c,d,e,f,g,h\)</span></p><ul><li><p><span class="math inline">\(Forj = 0 \rightarrow 63\)</span></p><ul><li>计算<span class="math inline">\(Ch(e,f,g),M_{aj}(a,b,c),\Sigma_0(a),\Sigma_1(e),W_j\)</span> <span class="math inline">\(T_1 \leftarrow h +\Sigma_1(e)+Ch(e,f,g)+K_j+W_j\)</span> $ T_2 <em>0(a)+M</em>{aj}(a,b,c) $ $ h g $ $ g f $ $ f e $ $ e d+T_1 $ $ d c $ $ c b $ $ b a $ $ a T_1 + T_2 $</li></ul></li></ul></li><li><p>计算第<span class="math inline">\(i\)</span>个中间哈希值<span class="math inline">\(H^{(i)}\)</span> $ H_1<sup>{(i-1)} a+H_1</sup>{(i-1)} $ $ H_2<sup>{(i-1)} b+H_2</sup>{(i-1)} $ $  $ $ H_8<sup>{(i-1)} h+H_8</sup>{(i-1)} $</p></li></ul></li><li><p><span class="math inline">\(H^{(N)}=(H_1^{(N)},H_2^{(N)},...,H_8^{(N)})\)</span>为最终的哈希值<span class="math inline">\(M\)</span>;</p></li></ul><h4 id="逻辑函数定义">逻辑函数定义</h4><p>SHA256算法当中所使用到的6个逻辑函数如下：每个函数都对32位字节进行操纵，并输出32位字节。 $ Ch(x,y,z)=(xy)(¬xz)<span class="math display">\[M_{aj}(x,y,z) = (x\wedge y)\oplus(x\wedge z)\oplus(y\wedge z)\]</span> _0(x) = S<sup>2(x)S</sup>{13}(x)S^{22}(x)<span class="math display">\[\Sigma_1(x) = S^6(x)\oplus S^{11}(x)\oplus S^{25}(x)\]</span> _0(x) = S<sup>7(x)S</sup>{18}(x)R^{3}(x)$$ _1(x) = S<sup>{17}(x)S</sup>{19}(x)R^{10}(x) $ 扩展消息块<span class="math inline">\(W_0,W_1,...,W_{63}\)</span>通过以下方式进行计算：</p><ul><li><p><span class="math inline">\(W_j = M_j^{(i)}\ forj = 0,1,2,..,15\)</span></p></li><li><p><span class="math inline">\(Forj = 16 \rightarrow 63\)</span></p><ul><li><span class="math inline">\(W_j \leftarrow \sigma_1(W_{j-2})+W_{j-7}+\sigma_0(W_{j-15})+W_{j-16}\)</span></li></ul></li></ul><h3 id="图像表示">图像表示</h3><p>SHA256压缩函数的图形表示如下：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2v2-a92b02c5d0a28bd16dd40981bae86da7_720w.webp" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>扩展消息块<span class="math inline">\(W_j\)</span>的求解算法可以表示如下:</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2v2-a27fcce00e3a2709b536b5db5b32b9fd_720w.webp" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h3 id="伪代码">伪代码</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">Note <span class="hljs-number">1</span>: All variables are <span class="hljs-number">32</span> bit unsigned integers <span class="hljs-keyword">and</span> addition is calculated modulo <span class="hljs-number">232</span><br>Note <span class="hljs-number">2</span>: For <span class="hljs-number">each</span> round, there is one round constant k[i] <span class="hljs-keyword">and</span> one entry <span class="hljs-keyword">in</span> the message schedule array w[i], <span class="hljs-number">0</span> ≤ i ≤ <span class="hljs-number">63</span><br>Note <span class="hljs-number">3</span>: The compression function uses <span class="hljs-number">8</span> working variables, a through h<br>Note <span class="hljs-number">4</span>: Big-endian convention is used when expressing the constants <span class="hljs-keyword">in</span> this pseudocode,<br>    <span class="hljs-keyword">and</span> when parsing message block data from bytes to words, for example,<br>    the first <span class="hljs-built_in">word</span> of the input message <span class="hljs-string">&quot;abc&quot;</span> after padding is <span class="hljs-number">0x61626380</span><br><br>Initialize hash values:<br>(first <span class="hljs-number">32</span> <span class="hljs-meta">bits</span> of the fractional parts of the square roots of the first <span class="hljs-number">8</span> primes <span class="hljs-number">2</span>..<span class="hljs-number">19</span>):<br>h0 := <span class="hljs-number">0x6a09e667</span><br>h1 := <span class="hljs-number">0xbb67ae85</span><br>h2 := <span class="hljs-number">0x3c6ef372</span><br>h3 := <span class="hljs-number">0xa54ff53a</span><br>h4 := <span class="hljs-number">0x510e527f</span><br>h5 := <span class="hljs-number">0x9b05688c</span><br>h6 := <span class="hljs-number">0x1f83d9ab</span><br>h7 := <span class="hljs-number">0x5be0cd19</span><br><br>Initialize array of round constants:<br>(first <span class="hljs-number">32</span> <span class="hljs-meta">bits</span> of the fractional parts of the cube roots of the first <span class="hljs-number">64</span> primes <span class="hljs-number">2</span>..<span class="hljs-number">311</span>):<br>k[<span class="hljs-number">0</span>..<span class="hljs-number">63</span>] :=<br>   <span class="hljs-number">0x428a2f98</span>, <span class="hljs-number">0x71374491</span>, <span class="hljs-number">0xb5c0fbcf</span>, <span class="hljs-number">0xe9b5dba5</span>, <span class="hljs-number">0x3956c25b</span>, <span class="hljs-number">0x59f111f1</span>, <span class="hljs-number">0x923f82a4</span>, <span class="hljs-number">0xab1c5ed5</span>,<br>   <span class="hljs-number">0xd807aa98</span>, <span class="hljs-number">0x12835b01</span>, <span class="hljs-number">0x243185be</span>, <span class="hljs-number">0x550c7dc3</span>, <span class="hljs-number">0x72be5d74</span>, <span class="hljs-number">0x80deb1fe</span>, <span class="hljs-number">0x9bdc06a7</span>, <span class="hljs-number">0xc19bf174</span>,<br>   <span class="hljs-number">0xe49b69c1</span>, <span class="hljs-number">0xefbe4786</span>, <span class="hljs-number">0x0fc19dc6</span>, <span class="hljs-number">0x240ca1cc</span>, <span class="hljs-number">0x2de92c6f</span>, <span class="hljs-number">0x4a7484aa</span>, <span class="hljs-number">0x5cb0a9dc</span>, <span class="hljs-number">0x76f988da</span>,<br>   <span class="hljs-number">0x983e5152</span>, <span class="hljs-number">0xa831c66d</span>, <span class="hljs-number">0xb00327c8</span>, <span class="hljs-number">0xbf597fc7</span>, <span class="hljs-number">0xc6e00bf3</span>, <span class="hljs-number">0xd5a79147</span>, <span class="hljs-number">0x06ca6351</span>, <span class="hljs-number">0x14292967</span>,<br>   <span class="hljs-number">0x27b70a85</span>, <span class="hljs-number">0x2e1b2138</span>, <span class="hljs-number">0x4d2c6dfc</span>, <span class="hljs-number">0x53380d13</span>, <span class="hljs-number">0x650a7354</span>, <span class="hljs-number">0x766a0abb</span>, <span class="hljs-number">0x81c2c92e</span>, <span class="hljs-number">0x92722c85</span>,<br>   <span class="hljs-number">0xa2bfe8a1</span>, <span class="hljs-number">0xa81a664b</span>, <span class="hljs-number">0xc24b8b70</span>, <span class="hljs-number">0xc76c51a3</span>, <span class="hljs-number">0xd192e819</span>, <span class="hljs-number">0xd6990624</span>, <span class="hljs-number">0xf40e3585</span>, <span class="hljs-number">0x106aa070</span>,<br>   <span class="hljs-number">0x19a4c116</span>, <span class="hljs-number">0x1e376c08</span>, <span class="hljs-number">0x2748774c</span>, <span class="hljs-number">0x34b0bcb5</span>, <span class="hljs-number">0x391c0cb3</span>, <span class="hljs-number">0x4ed8aa4a</span>, <span class="hljs-number">0x5b9cca4f</span>, <span class="hljs-number">0x682e6ff3</span>,<br>   <span class="hljs-number">0x748f82ee</span>, <span class="hljs-number">0x78a5636f</span>, <span class="hljs-number">0x84c87814</span>, <span class="hljs-number">0x8cc70208</span>, <span class="hljs-number">0x90befffa</span>, <span class="hljs-number">0xa4506ceb</span>, <span class="hljs-number">0xbef9a3f7</span>, <span class="hljs-number">0xc67178f2</span><br><br>Pre-processing (Padding):<br>begin with the original message of length L <span class="hljs-meta">bits</span><br>append a single <span class="hljs-string">&#x27;1&#x27;</span> bit<br>append K <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-meta">bits</span>, where K is the minimum number &gt;= <span class="hljs-number">0</span> such that L + <span class="hljs-number">1</span> + K + <span class="hljs-number">64</span> is a multiple of <span class="hljs-number">512</span><br>append L as a <span class="hljs-number">64</span>-bit big-endian integer, making the total post-processed length a multiple of <span class="hljs-number">512</span> <span class="hljs-meta">bits</span><br><br>Process the message <span class="hljs-keyword">in</span> successive <span class="hljs-number">512</span>-bit chunks:<br>break message <span class="hljs-keyword">into</span> <span class="hljs-number">512</span>-bit chunks<br>for <span class="hljs-number">each</span> chunk<br>    create a <span class="hljs-number">64</span>-entry message schedule array w[<span class="hljs-number">0</span>..<span class="hljs-number">63</span>] of <span class="hljs-number">32</span>-bit words<br>    (The initial values <span class="hljs-keyword">in</span> w[<span class="hljs-number">0</span>..<span class="hljs-number">63</span>] don<span class="hljs-string">&#x27;t matter, so many implementations zero them here)</span><br><span class="hljs-string">    copy chunk into first 16 words w[0..15] of the message schedule array</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array:</span><br><span class="hljs-string">    for i from 16 to 63</span><br><span class="hljs-string">        s0 := (w[i-15] rightrotate  7) xor (w[i-15] rightrotate 18) xor (w[i-15] rightshift  3)</span><br><span class="hljs-string">        s1 := (w[i- 2] rightrotate 17) xor (w[i- 2] rightrotate 19) xor (w[i- 2] rightshift 10)</span><br><span class="hljs-string">        w[i] := w[i-16] + s0 + w[i-7] + s1</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Initialize working variables to current hash value:</span><br><span class="hljs-string">    a := h0</span><br><span class="hljs-string">    b := h1</span><br><span class="hljs-string">    c := h2</span><br><span class="hljs-string">    d := h3</span><br><span class="hljs-string">    e := h4</span><br><span class="hljs-string">    f := h5</span><br><span class="hljs-string">    g := h6</span><br><span class="hljs-string">    h := h7</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Compression function main loop:</span><br><span class="hljs-string">    for i from 0 to 63</span><br><span class="hljs-string">        S1 := (e rightrotate 6) xor (e rightrotate 11) xor (e rightrotate 25)</span><br><span class="hljs-string">        ch := (e and f) xor ((not e) and g)</span><br><span class="hljs-string">        temp1 := h + S1 + ch + k[i] + w[i]</span><br><span class="hljs-string">        S0 := (a rightrotate 2) xor (a rightrotate 13) xor (a rightrotate 22)</span><br><span class="hljs-string">        maj := (a and b) xor (a and c) xor (b and c)</span><br><span class="hljs-string">        temp2 := S0 + maj</span><br><span class="hljs-string"> </span><br><span class="hljs-string">        h := g</span><br><span class="hljs-string">        g := f</span><br><span class="hljs-string">        f := e</span><br><span class="hljs-string">        e := d + temp1</span><br><span class="hljs-string">        d := c</span><br><span class="hljs-string">        c := b</span><br><span class="hljs-string">        b := a</span><br><span class="hljs-string">        a := temp1 + temp2</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Add the compressed chunk to the current hash value:</span><br><span class="hljs-string">    h0 := h0 + a</span><br><span class="hljs-string">    h1 := h1 + b</span><br><span class="hljs-string">    h2 := h2 + c</span><br><span class="hljs-string">    h3 := h3 + d</span><br><span class="hljs-string">    h4 := h4 + e</span><br><span class="hljs-string">    h5 := h5 + f</span><br><span class="hljs-string">    h6 := h6 + g</span><br><span class="hljs-string">    h7 := h7 + h</span><br><span class="hljs-string"></span><br><span class="hljs-string">Produce the final hash value (big-endian):</span><br><span class="hljs-string">digest := hash := h0 append h1 append h2 append h3 append h4 append h5 append h6 append h7</span><br></code></pre></td></tr></table></figure><h3 id="代码实现">代码实现</h3><p>1)sha256.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright (c)</span><br><span class="hljs-comment"> * Filename:    sha256.h</span><br><span class="hljs-comment"> * Brief:       SHA256算法实现</span><br><span class="hljs-comment"> * Depend:      C++11</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Version:     V1.0.0</span><br><span class="hljs-comment"> * Date:        2019/11/08-2019/11/13</span><br><span class="hljs-comment"> * Author:      LucianY</span><br><span class="hljs-comment"> * Note:        初次版本。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Version:     V2.0.0</span><br><span class="hljs-comment"> * Date:        2023/01/04</span><br><span class="hljs-comment"> * Author:      LucianY</span><br><span class="hljs-comment"> * Note:        1、代码优化：使用单例模式；</span><br><span class="hljs-comment"> *              2、debug：支持加密空字符串；</span><br><span class="hljs-comment"> *              3、性能优化。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Attention:   输入信息中有中文时，得到的数字指纹与使用其他工具得到数字指纹可能不相同。原因是不同平台中文的编码方式不同。</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> LY_SHA256_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LY_SHA256_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdint&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">namespace</span> Ly &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief SHA256加密类</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sha256</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//! 获取单例</span><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> Sha256 &amp;<span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">static</span> Sha256 instance;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * @brief: 使用SHA256算法，加密输入信息（获取数字指纹）</span><br><span class="hljs-comment">     * @param[in] message: 输入信息</span><br><span class="hljs-comment">     * @return: 摘要（数字指纹）</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; <span class="hljs-title">encrypt</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; message)</span> <span class="hljs-type">const</span></span>;<br><br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * @brief: 获取十六进制表示的信息摘要（数字指纹）</span><br><span class="hljs-comment">     * @param[in] message: 输入信息</span><br><span class="hljs-comment">     * @return: 十六进制表示的信息摘要（数字指纹）</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function">std::string <span class="hljs-title">getHexMessageDigest</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;message)</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-comment">/// SHA256算法中定义的6种逻辑运算 ///</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">uint32_t</span> <span class="hljs-title">ch</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> x, <span class="hljs-type">uint32_t</span> y, <span class="hljs-type">uint32_t</span> z)</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> (x &amp; y) ^ ((~x) &amp; z);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">uint32_t</span> <span class="hljs-title">maj</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> x, <span class="hljs-type">uint32_t</span> y, <span class="hljs-type">uint32_t</span> z)</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> (x &amp; y) ^ (x &amp; z) ^ (y &amp; z);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">uint32_t</span> <span class="hljs-title">bigSigma0</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> x)</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> (x &gt;&gt; <span class="hljs-number">2</span> | x &lt;&lt; <span class="hljs-number">30</span>) ^ (x &gt;&gt; <span class="hljs-number">13</span> | x &lt;&lt; <span class="hljs-number">19</span>) ^ (x &gt;&gt; <span class="hljs-number">22</span> | x &lt;&lt; <span class="hljs-number">10</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">uint32_t</span> <span class="hljs-title">bigSigma1</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> x)</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> (x &gt;&gt; <span class="hljs-number">6</span> | x &lt;&lt; <span class="hljs-number">26</span>) ^ (x &gt;&gt; <span class="hljs-number">11</span> | x &lt;&lt; <span class="hljs-number">21</span>) ^ (x &gt;&gt; <span class="hljs-number">25</span> | x &lt;&lt; <span class="hljs-number">7</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">uint32_t</span> <span class="hljs-title">smallSigma0</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> x)</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> (x &gt;&gt; <span class="hljs-number">7</span> | x &lt;&lt; <span class="hljs-number">25</span>) ^ (x &gt;&gt; <span class="hljs-number">18</span> | x &lt;&lt; <span class="hljs-number">14</span>) ^ (x &gt;&gt; <span class="hljs-number">3</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">uint32_t</span> <span class="hljs-title">smallSigma1</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> x)</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> (x &gt;&gt; <span class="hljs-number">17</span> | x &lt;&lt; <span class="hljs-number">15</span>) ^ (x &gt;&gt; <span class="hljs-number">19</span> | x &lt;&lt; <span class="hljs-number">13</span>) ^ (x &gt;&gt; <span class="hljs-number">10</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * @brief: SHA256算法对输入信息的预处理，包括“附加填充比特”和“附加长度值”</span><br><span class="hljs-comment">            附加填充比特: 在报文末尾进行填充，先补第一个比特为1，然后都补0，直到长度满足对512取模后余数是448。需要注意的是，信息必须进行填充。</span><br><span class="hljs-comment">            附加长度值: 用一个64位的数据来表示原始消息（填充前的消息）的长度，并将其补到已经进行了填充操作的消息后面。</span><br><span class="hljs-comment">     * @param[in][out] message: 待处理的信息</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preprocessing</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; &amp;message)</span> <span class="hljs-type">const</span></span>;<br><br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * @brief: 将信息分解成连续的64Byte大小的数据块</span><br><span class="hljs-comment">     * @param[in] message: 输入信息，长度为64Byte的倍数</span><br><span class="hljs-comment">     * @return: 输出数据块</span><br><span class="hljs-comment">    */</span><br>    std::vector&lt;std::vector&lt;<span class="hljs-type">uint8_t</span>&gt;&gt; <span class="hljs-built_in">breakTextInto64ByteChunks</span>(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; &amp;message) <span class="hljs-type">const</span>;<br><br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * @brief: 由64Byte大小的数据块，构造出64个4Byte大小的字。</span><br><span class="hljs-comment">            构造算法：前16个字直接由数据块分解得到，其余的字由如下迭代公式得到：</span><br><span class="hljs-comment">            W[t] = smallSigma1(W[t-2]) + W[t-7] + smallSigma0(W[t-15]) + W[t-16]</span><br><span class="hljs-comment">     * @param[in] chunk: 输入数据块，大小为64Byte</span><br><span class="hljs-comment">     * @return: 输出字</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">uint32_t</span>&gt; <span class="hljs-title">structureWords</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; &amp;chunk)</span> <span class="hljs-type">const</span></span>;<br><br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * @breif: 基于64个4Byte大小的字，进行64次循环加密</span><br><span class="hljs-comment">     * @param[in] words: 64个4Byte大小的字</span><br><span class="hljs-comment">     * @param[in][out] message_digest: 信息摘要</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">uint32_t</span>&gt; &amp;words, std::vector&lt;<span class="hljs-type">uint32_t</span>&gt; &amp;message_digest)</span> <span class="hljs-type">const</span></span>;<br><br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * @brief: 输出最终的哈希值（数字指纹）</span><br><span class="hljs-comment">     * @param[in] input: 步长为32bit的哈希值</span><br><span class="hljs-comment">     * @return: 步长为8bit的哈希值</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; <span class="hljs-title">produceFinalHashValue</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">uint32_t</span>&gt; &amp;input)</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">/* 单例模式 */</span><br>    <span class="hljs-built_in">Sha256</span>() = <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-built_in">Sha256</span>(<span class="hljs-type">const</span> Sha256 &amp;) = <span class="hljs-keyword">delete</span>;<br>    Sha256 &amp;<span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Sha256 &amp;) = <span class="hljs-keyword">delete</span>;<br><br>    <span class="hljs-built_in">Sha256</span>(Sha256 &amp;&amp;) = <span class="hljs-keyword">delete</span>;<br>    Sha256 &amp;<span class="hljs-keyword">operator</span>=(Sha256 &amp;&amp;) = <span class="hljs-keyword">delete</span>;<br><br>    ~<span class="hljs-built_in">Sha256</span>() = <span class="hljs-keyword">default</span>;<br><br><br>    <span class="hljs-comment">// 在SHA256算法中的初始信息摘要，这些常量是对自然数中前8个质数的平方根的小数部分取前32bit而来</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">uint32_t</span>&gt; initial_message_digest_;<br><br>    <span class="hljs-comment">// 在SHA256算法中，用到64个常量，这些常量是对自然数中前64个质数的立方根的小数部分取前32bit而来</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">uint32_t</span>&gt; add_constant_;<br>&#125;;<br><br>&#125; <span class="hljs-comment">// namespace Ly</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// LY_SHA256_H</span></span><br><br></code></pre></td></tr></table></figure><p>2)sha256.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright (c)</span><br><span class="hljs-comment"> * Filename:    sha256.cpp</span><br><span class="hljs-comment"> * Brief:       SHA256算法实现</span><br><span class="hljs-comment"> * Depend:      C++11</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Version:     V1.0.0</span><br><span class="hljs-comment"> * Date:        2019/11/08-2019/11/13</span><br><span class="hljs-comment"> * Author:      LucianY</span><br><span class="hljs-comment"> * Note:        初次版本。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Version:     V2.0.0</span><br><span class="hljs-comment"> * Date:        2023/01/04</span><br><span class="hljs-comment"> * Author:      LucianY</span><br><span class="hljs-comment"> * Note:        1、代码优化：使用单例模式；</span><br><span class="hljs-comment"> *              2、debug：支持加密空字符串；</span><br><span class="hljs-comment"> *              3、性能优化。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Attention:   输入信息中有中文时，得到的数字指纹与使用其他工具得到数字指纹可能不相同。原因是不同平台中文的编码方式不同。</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sha256.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">namespace</span> Ly &#123;<br><br><span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">uint32_t</span>&gt; Sha256::initial_message_digest_&#123;<br>    <span class="hljs-number">0x6a09e667</span>, <span class="hljs-number">0xbb67ae85</span>, <span class="hljs-number">0x3c6ef372</span>,<br>    <span class="hljs-number">0xa54ff53a</span>, <span class="hljs-number">0x510e527f</span>, <span class="hljs-number">0x9b05688c</span>,<br>    <span class="hljs-number">0x1f83d9ab</span>, <span class="hljs-number">0x5be0cd19</span><br>&#125;;<br><br><span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">uint32_t</span>&gt; Sha256::add_constant_&#123;<br>    <span class="hljs-number">0x428a2f98</span>,<span class="hljs-number">0x71374491</span>,<span class="hljs-number">0xb5c0fbcf</span>,<span class="hljs-number">0xe9b5dba5</span>,<span class="hljs-number">0x3956c25b</span>,<span class="hljs-number">0x59f111f1</span>,<span class="hljs-number">0x923f82a4</span>,<span class="hljs-number">0xab1c5ed5</span>,<br>    <span class="hljs-number">0xd807aa98</span>,<span class="hljs-number">0x12835b01</span>,<span class="hljs-number">0x243185be</span>,<span class="hljs-number">0x550c7dc3</span>,<span class="hljs-number">0x72be5d74</span>,<span class="hljs-number">0x80deb1fe</span>,<span class="hljs-number">0x9bdc06a7</span>,<span class="hljs-number">0xc19bf174</span>,<br>    <span class="hljs-number">0xe49b69c1</span>,<span class="hljs-number">0xefbe4786</span>,<span class="hljs-number">0x0fc19dc6</span>,<span class="hljs-number">0x240ca1cc</span>,<span class="hljs-number">0x2de92c6f</span>,<span class="hljs-number">0x4a7484aa</span>,<span class="hljs-number">0x5cb0a9dc</span>,<span class="hljs-number">0x76f988da</span>,<br>    <span class="hljs-number">0x983e5152</span>,<span class="hljs-number">0xa831c66d</span>,<span class="hljs-number">0xb00327c8</span>,<span class="hljs-number">0xbf597fc7</span>,<span class="hljs-number">0xc6e00bf3</span>,<span class="hljs-number">0xd5a79147</span>,<span class="hljs-number">0x06ca6351</span>,<span class="hljs-number">0x14292967</span>,<br>    <span class="hljs-number">0x27b70a85</span>,<span class="hljs-number">0x2e1b2138</span>,<span class="hljs-number">0x4d2c6dfc</span>,<span class="hljs-number">0x53380d13</span>,<span class="hljs-number">0x650a7354</span>,<span class="hljs-number">0x766a0abb</span>,<span class="hljs-number">0x81c2c92e</span>,<span class="hljs-number">0x92722c85</span>,<br>    <span class="hljs-number">0xa2bfe8a1</span>,<span class="hljs-number">0xa81a664b</span>,<span class="hljs-number">0xc24b8b70</span>,<span class="hljs-number">0xc76c51a3</span>,<span class="hljs-number">0xd192e819</span>,<span class="hljs-number">0xd6990624</span>,<span class="hljs-number">0xf40e3585</span>,<span class="hljs-number">0x106aa070</span>,<br>    <span class="hljs-number">0x19a4c116</span>,<span class="hljs-number">0x1e376c08</span>,<span class="hljs-number">0x2748774c</span>,<span class="hljs-number">0x34b0bcb5</span>,<span class="hljs-number">0x391c0cb3</span>,<span class="hljs-number">0x4ed8aa4a</span>,<span class="hljs-number">0x5b9cca4f</span>,<span class="hljs-number">0x682e6ff3</span>,<br>    <span class="hljs-number">0x748f82ee</span>,<span class="hljs-number">0x78a5636f</span>,<span class="hljs-number">0x84c87814</span>,<span class="hljs-number">0x8cc70208</span>,<span class="hljs-number">0x90befffa</span>,<span class="hljs-number">0xa4506ceb</span>,<span class="hljs-number">0xbef9a3f7</span>,<span class="hljs-number">0xc67178f2</span><br>&#125;;<br><br><span class="hljs-function">std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; <span class="hljs-title">Sha256::encrypt</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; input_message)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//! 文本预处理</span><br>    <span class="hljs-built_in">preprocessing</span>(input_message);<br><br>    <span class="hljs-comment">//! 将文本分解成连续的64Byte大小的数据块</span><br>    <span class="hljs-keyword">auto</span> chunks = <span class="hljs-built_in">breakTextInto64ByteChunks</span>(input_message);<br><br>    <span class="hljs-comment">//! 由64Byte大小的数据块，构造出64个4Byte大小的字。然后进行循环迭代。</span><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">uint32_t</span>&gt; <span class="hljs-title">message_digest</span><span class="hljs-params">(initial_message_digest_)</span></span>; <span class="hljs-comment">// 初始化信息摘要</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;chunk : chunks)<br>    &#123;<br>        <span class="hljs-built_in">transform</span>(<span class="hljs-built_in">structureWords</span>(chunk), message_digest);<br>    &#125;<br><br>    <span class="hljs-comment">//! 获取最终结果</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">produceFinalHashValue</span>(message_digest);<br>&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">Sha256::getHexMessageDigest</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;message)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> digest = <span class="hljs-built_in">encrypt</span>(std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">uint8_t</span>&gt;(message.<span class="hljs-built_in">begin</span>(), message.<span class="hljs-built_in">end</span>()));<br><br>    std::ostringstream o_s;<br>    o_s &lt;&lt; std::hex &lt;&lt; std::<span class="hljs-built_in">setiosflags</span>(std::ios::uppercase);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> c : digest) &#123;<br>        o_s &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">2</span>) &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span>&gt;(c);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> o_s.<span class="hljs-built_in">str</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sha256::preprocessing</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; &amp;message)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> original_bit_size = message.<span class="hljs-built_in">size</span>() * <span class="hljs-number">8</span>;<br><br>    <span class="hljs-comment">//! 附加填充比特</span><br>    <span class="hljs-keyword">auto</span> remainder = message.<span class="hljs-built_in">size</span>() % <span class="hljs-number">64</span>;<br>    <span class="hljs-keyword">auto</span> origialSize = message.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">if</span> (remainder &lt; <span class="hljs-number">56</span>)<br>    &#123;<br>        message.<span class="hljs-built_in">resize</span>(message.<span class="hljs-built_in">size</span>() + <span class="hljs-number">56</span> - remainder, <span class="hljs-number">0x00</span>);<br>        message[origialSize] = <span class="hljs-number">0x80</span>; <span class="hljs-comment">// ox80即10000000</span><br>    &#125; <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (remainder == <span class="hljs-number">56</span>)<br>    &#123;<br>        message.<span class="hljs-built_in">resize</span>(message.<span class="hljs-built_in">size</span>() + <span class="hljs-number">64</span>, <span class="hljs-number">0x00</span>);<br>        message[origialSize] = <span class="hljs-number">0x80</span>;<br>    &#125; <br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        message.<span class="hljs-built_in">resize</span>(message.<span class="hljs-built_in">size</span>() + <span class="hljs-number">120</span> - remainder, <span class="hljs-number">0x00</span>);<br>        message[origialSize] = <span class="hljs-number">0x80</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//! 附加原始文本的长度值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; ++i)<br>    &#123;<br>        message.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint8_t</span>&gt;(original_bit_size &gt;&gt; (<span class="hljs-number">64</span> - <span class="hljs-number">8</span> * i)));<br>    &#125;<br>&#125;<br><br>std::vector&lt;std::vector&lt;<span class="hljs-type">uint8_t</span>&gt;&gt; Sha256::<span class="hljs-built_in">breakTextInto64ByteChunks</span>(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; &amp;message) <span class="hljs-type">const</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != message.<span class="hljs-built_in">size</span>() % <span class="hljs-number">64</span>)<br>    &#123;<br>        std::ostringstream oss;<br>        oss &lt;&lt; <span class="hljs-string">&quot;invalid message size: &quot;</span> &lt;&lt; message.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">invalid_argument</span>(oss.<span class="hljs-built_in">str</span>());<br>    &#125;<br><br>    std::vector&lt;std::vector&lt;<span class="hljs-type">uint8_t</span>&gt;&gt; chunks;<br>    <span class="hljs-keyword">auto</span> quotient = message.<span class="hljs-built_in">size</span>() / <span class="hljs-number">64</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; quotient; ++i)<br>    &#123;<br>        chunks.<span class="hljs-built_in">emplace_back</span>(message.<span class="hljs-built_in">begin</span>() + i * <span class="hljs-number">64</span>, message.<span class="hljs-built_in">begin</span>() + (i + <span class="hljs-number">1</span>) * <span class="hljs-number">64</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> chunks;<br>&#125;<br><br><span class="hljs-function">std::vector&lt;<span class="hljs-type">uint32_t</span>&gt; <span class="hljs-title">Sha256::structureWords</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; &amp;chunk)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">64</span> != chunk.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        std::ostringstream oss;<br>        oss &lt;&lt; <span class="hljs-string">&quot;invalid chunk size: &quot;</span> &lt;&lt; chunk.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">invalid_argument</span>(oss.<span class="hljs-built_in">str</span>());<br>    &#125;<br><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">uint32_t</span>&gt; <span class="hljs-title">words</span><span class="hljs-params">(<span class="hljs-number">64</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; ++i)<br>    &#123;<br>        words[i] = (<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint32_t</span>&gt;(chunk[i * <span class="hljs-number">4</span>]) &lt;&lt; <span class="hljs-number">24</span>) | (<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint32_t</span>&gt;(chunk[i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">16</span>) | <br>            (<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint32_t</span>&gt;(chunk[i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>]) &lt;&lt; <span class="hljs-number">8</span>) | <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint32_t</span>&gt;(chunk[i * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">16</span>; i &lt; <span class="hljs-number">64</span>; ++i)<br>    &#123;<br>        words[i] = <span class="hljs-built_in">smallSigma1</span>(words[i - <span class="hljs-number">2</span>]) + words[i - <span class="hljs-number">7</span>] + <span class="hljs-built_in">smallSigma0</span>(words[i - <span class="hljs-number">15</span>]) + words[i - <span class="hljs-number">16</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> words;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sha256::transform</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">uint32_t</span>&gt; &amp;words, std::vector&lt;<span class="hljs-type">uint32_t</span>&gt; &amp;message_digest)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">8</span> != message_digest.<span class="hljs-built_in">size</span>() || <span class="hljs-number">64</span> != words.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        std::ostringstream oss;<br>        oss &lt;&lt; <span class="hljs-string">&quot;invalid message_digest size: &quot;</span> &lt;&lt; message_digest.<span class="hljs-built_in">size</span>() &lt;&lt; <br>            <span class="hljs-string">&quot;Or invalid words size: &quot;</span> &lt;&lt; words.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">invalid_argument</span>(oss.<span class="hljs-built_in">str</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">auto</span> d = message_digest;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; ++i)<br>    &#123;<br>        <span class="hljs-type">uint32_t</span> temp1 = d[<span class="hljs-number">7</span>] + <span class="hljs-built_in">bigSigma1</span>(d[<span class="hljs-number">4</span>]) + <span class="hljs-built_in">ch</span>(d[<span class="hljs-number">4</span>], d[<span class="hljs-number">5</span>], d[<span class="hljs-number">6</span>]) + add_constant_[i] + words[i];<br>        <span class="hljs-type">uint32_t</span> temp2 = <span class="hljs-built_in">bigSigma0</span>(d[<span class="hljs-number">0</span>]) + <span class="hljs-built_in">maj</span>(d[<span class="hljs-number">0</span>], d[<span class="hljs-number">1</span>], d[<span class="hljs-number">2</span>]);<br><br>        d[<span class="hljs-number">7</span>] = d[<span class="hljs-number">6</span>];<br>        d[<span class="hljs-number">6</span>] = d[<span class="hljs-number">5</span>];<br>        d[<span class="hljs-number">5</span>] = d[<span class="hljs-number">4</span>];<br>        d[<span class="hljs-number">4</span>] = d[<span class="hljs-number">3</span>] + temp1;<br>        d[<span class="hljs-number">3</span>] = d[<span class="hljs-number">2</span>];<br>        d[<span class="hljs-number">2</span>] = d[<span class="hljs-number">1</span>];<br>        d[<span class="hljs-number">1</span>] = d[<span class="hljs-number">0</span>];<br>        d[<span class="hljs-number">0</span>] = temp1 + temp2;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i)<br>    &#123;<br>        message_digest[i] += d[i];<br>    &#125;<br>&#125;<br><br><span class="hljs-function">std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; <span class="hljs-title">Sha256::produceFinalHashValue</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">uint32_t</span>&gt; &amp;input)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>    std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; output;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = input.<span class="hljs-built_in">begin</span>(); it != input.<span class="hljs-built_in">end</span>(); ++it)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>        &#123;<br>            output.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint8_t</span>&gt;((*it) &gt;&gt; (<span class="hljs-number">24</span> - <span class="hljs-number">8</span> * i)));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> output;<br>&#125;<br><br>&#125; <span class="hljs-comment">// namespace Ly</span><br><br></code></pre></td></tr></table></figure><h3 id="可视化学习链接">可视化学习链接</h3><p>https://sha256algorithm.com/</p>]]></content>
    
    
    <categories>
      
      <category>加密算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HGAME 2023 week3 wp</title>
    <link href="/2023/02/04/hgame2023-week3/"/>
    <url>/2023/02/04/hgame2023-week3/</url>
    
    <content type="html"><![CDATA[<h1 id="cpp">cpp</h1><p>hgame{Cpp_1s_much_m0r3_dlff1cult_th4n_C}</p><p>加密方式是salsa20，就是流加密，所以只需要找到明文和密文就可以了。不过要注意大小端序。</p><p>这段是秘钥流和明文异或的地方。</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo29e1a04c3ae45cbceba7c1048e390ca5.png" alt="9e1a04c3ae45cbceba7c1048e390ca5" /><figcaption aria-hidden="true">9e1a04c3ae45cbceba7c1048e390ca5</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = [<span class="hljs-number">0x28</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xFF</span>]<br>Mpinput = <span class="hljs-string">&quot;hgame&#123;0123456789012345678901234567890123&#125;&quot;</span><br>enin = <span class="hljs-string">&quot;magh10&#123;e54329876321076541098543298763210&quot;</span><br>inenc = [ <span class="hljs-number">0x23</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xCE</span>,<br>  <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x57</span>,<br>  <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x9D</span>,<br>  <span class="hljs-number">0x81</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xB3</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(inenc[i] ^ <span class="hljs-built_in">ord</span>(enin[i])),end=<span class="hljs-string">&#x27;, &#x27;</span>)<br>key = [<span class="hljs-number">0x4e</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x9c</span>, <span class="hljs-number">0xcf</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0xd1</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x3a</span>, <span class="hljs-number">0xa7</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x83</span>]<br><span class="hljs-built_in">print</span>()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(enc[i * <span class="hljs-number">4</span>] ^ key[i * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(enc[i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>] ^ key[i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(enc[i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>] ^ key[i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(enc[i * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>] ^ key[i * <span class="hljs-number">4</span>]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="patchme">patchme</h1><p>比cpp还简单</p><p>找到这个函数</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230129130356473.png" alt="image-20230129130356473" /><figcaption aria-hidden="true">image-20230129130356473</figcaption></figure><p>大体猜测是smc，idc脚本模拟一下smc部分就能静态分析了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><br><span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">auto</span> Address = <span class="hljs-number">0x14c6</span>;<br>    <span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">960</span>;i++)&#123;<br>        PatchByte(Address+i,Byte(Address+i)^<span class="hljs-number">0x66</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>被改变过的就可以直接静态分析了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sub_14C6</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  __WAIT_STATUS stat_loc; <span class="hljs-comment">// [rsp+Ch] [rbp-2C4h] BYREF</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+14h] [rbp-2BCh]</span><br>  __int64 v3; <span class="hljs-comment">// [rsp+18h] [rbp-2B8h]</span><br>  <span class="hljs-type">int</span> pipedes[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-2B0h] BYREF</span><br>  <span class="hljs-type">int</span> v5[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+28h] [rbp-2A8h] BYREF</span><br>  <span class="hljs-type">char</span> *argv[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-2A0h] BYREF</span><br>  <span class="hljs-type">char</span> v7[<span class="hljs-number">48</span>]; <span class="hljs-comment">// [rsp+50h] [rbp-280h] BYREF</span><br>  __int64 v8; <span class="hljs-comment">// [rsp+80h] [rbp-250h]</span><br>  __int64 v9[<span class="hljs-number">6</span>]; <span class="hljs-comment">// [rsp+E0h] [rbp-1F0h]</span><br>  __int64 v10[<span class="hljs-number">6</span>]; <span class="hljs-comment">// [rsp+110h] [rbp-1C0h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">80</span>]; <span class="hljs-comment">// [rsp+140h] [rbp-190h] BYREF</span><br>  <span class="hljs-type">char</span> s1[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+190h] [rbp-140h] BYREF</span><br>  __int64 v13; <span class="hljs-comment">// [rsp+198h] [rbp-138h]</span><br>  <span class="hljs-type">char</span> v14[<span class="hljs-number">280</span>]; <span class="hljs-comment">// [rsp+1A0h] [rbp-130h] BYREF</span><br>  <span class="hljs-type">int</span> v15; <span class="hljs-comment">// [rsp+2B8h] [rbp-18h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v16; <span class="hljs-comment">// [rsp+2C8h] [rbp-8h]</span><br><br>  v16 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  result = dword_4028;<br>  <span class="hljs-keyword">if</span> ( dword_4028 &lt;= <span class="hljs-number">1</span> )<br>  &#123;<br>    pipe(pipedes);<br>    pipe(v5);<br>    <span class="hljs-keyword">if</span> ( fork() )<br>    &#123;<br>      close(pipedes[<span class="hljs-number">0</span>]);<br>      close(v5[<span class="hljs-number">1</span>]);<br>      HIDWORD(stat_loc.__iptr) = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span> ( SHIDWORD(stat_loc.__iptr) &lt;= <span class="hljs-number">35</span> )<br>      &#123;<br>        buf[<span class="hljs-number">2</span> * HIDWORD(stat_loc.__iptr)] = <span class="hljs-number">37</span>;<br>        buf[<span class="hljs-number">2</span> * HIDWORD(stat_loc.__iptr)++ + <span class="hljs-number">1</span>] = <span class="hljs-number">110</span>;<br>      &#125;<br>      buf[<span class="hljs-number">72</span>] = <span class="hljs-number">10</span>;<br>      buf[<span class="hljs-number">73</span>] = <span class="hljs-number">0</span>;<br>      write(pipedes[<span class="hljs-number">1</span>], buf, <span class="hljs-number">0x4A</span>uLL);<br>      *(_QWORD *)s1 = <span class="hljs-number">0LL</span>;<br>      v13 = <span class="hljs-number">0LL</span>;<br>      <span class="hljs-built_in">memset</span>(v14, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v14));<br>      v15 = <span class="hljs-number">0</span>;<br>      read(v5[<span class="hljs-number">0</span>], s1, <span class="hljs-number">0x12C</span>uLL);<br>      wait((__WAIT_STATUS)&amp;stat_loc);<br>      buf[<span class="hljs-number">23</span>] = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span> ( !LODWORD(stat_loc.__uptr) &amp;&amp; !<span class="hljs-built_in">strcmp</span>(s1, buf) )<br>      &#123;<br>        v9[<span class="hljs-number">0</span>] = <span class="hljs-number">0x5416D999808A28FA</span>LL;<br>        v9[<span class="hljs-number">1</span>] = <span class="hljs-number">0x588505094953B563</span>LL;<br>        v9[<span class="hljs-number">2</span>] = <span class="hljs-number">0xCE8CF3A0DC669097</span>LL;<br>        v9[<span class="hljs-number">3</span>] = <span class="hljs-number">0x4C5CF3E854F44CBD</span>LL;<br>        v9[<span class="hljs-number">4</span>] = <span class="hljs-number">0xD144E49916678331</span>LL;<br>        LODWORD(v9[<span class="hljs-number">5</span>]) = <span class="hljs-number">0xDA616BAC</span>;<br>        WORD2(v9[<span class="hljs-number">5</span>]) = <span class="hljs-number">0xBBD0</span>;<br>        BYTE6(v9[<span class="hljs-number">5</span>]) = <span class="hljs-number">0x55</span>;<br>        v10[<span class="hljs-number">0</span>] = <span class="hljs-number">0x3B4FA2FCEDEB4F92</span>LL;<br>        v10[<span class="hljs-number">1</span>] = <span class="hljs-number">0x7E45A6C3B67EA16</span>LL;<br>        v10[<span class="hljs-number">2</span>] = <span class="hljs-number">0xAFE1ACC8BF12D0E7</span>LL;<br>        v10[<span class="hljs-number">3</span>] = <span class="hljs-number">0x132EC3B7269138CE</span>LL;<br>        v10[<span class="hljs-number">4</span>] = <span class="hljs-number">0x8E2197EB7311E643</span>LL;<br>        LODWORD(v10[<span class="hljs-number">5</span>]) = <span class="hljs-number">0xAE540AC1</span>;<br>        WORD2(v10[<span class="hljs-number">5</span>]) = <span class="hljs-number">0xC9B5</span>;<br>        BYTE6(v10[<span class="hljs-number">5</span>]) = <span class="hljs-number">0x28</span>;<br>        result = <span class="hljs-built_in">putchar</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">46</span>; ++i )<br>          result = <span class="hljs-built_in">putchar</span>((<span class="hljs-type">char</span>)(*((_BYTE *)v9 + i) ^ *((_BYTE *)v10 + i)));<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\nthere are still bugs...&quot;</span>);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      fflush(<span class="hljs-built_in">stdin</span>);<br>      sub_1AB0(*(_QWORD *)qword_4020, v7);<br>      v3 = v8;<br>      <span class="hljs-keyword">if</span> ( v8 == <span class="hljs-number">14472</span> )<br>      &#123;<br>        close(pipedes[<span class="hljs-number">1</span>]);<br>        close(v5[<span class="hljs-number">0</span>]);<br>        dup2(pipedes[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>);<br>        dup2(v5[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>);<br>        dup2(v5[<span class="hljs-number">1</span>], <span class="hljs-number">2</span>);<br>        argv[<span class="hljs-number">0</span>] = *(<span class="hljs-type">char</span> **)qword_4020;<br>        argv[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;1&quot;</span>;<br>        argv[<span class="hljs-number">2</span>] = <span class="hljs-number">0LL</span>;<br>        <span class="hljs-keyword">return</span> execve(*(<span class="hljs-type">const</span> <span class="hljs-type">char</span> **)qword_4020, argv, <span class="hljs-number">0LL</span>);<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\nyou cannot modify the file size&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>不难看出，这里是成功的提示</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230129130203114.png" alt="image-20230129130203114" /><figcaption aria-hidden="true">image-20230129130203114</figcaption></figure><p>就复制粘贴跑一下就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    __int64 v9[<span class="hljs-number">5</span>], v13[<span class="hljs-number">5</span>];<br>    <span class="hljs-type">int</span> v10,v14;<br>    __int16 v11,v15;<br>    <span class="hljs-type">char</span> v12,v16;<br>    v9[<span class="hljs-number">0</span>] = <span class="hljs-number">0x5416D999808A28FA</span>LL;<br>    v9[<span class="hljs-number">1</span>] = <span class="hljs-number">0x588505094953B563</span>LL;<br>    v9[<span class="hljs-number">2</span>] = <span class="hljs-number">0xCE8CF3A0DC669097</span>LL;<br>    v9[<span class="hljs-number">3</span>] = <span class="hljs-number">0x4C5CF3E854F44CBD</span>LL;<br>    v9[<span class="hljs-number">4</span>] = <span class="hljs-number">0xD144E49916678331</span>LL;<br>    v10 = <span class="hljs-number">0xDA616BAC</span>;<br>    v11 = <span class="hljs-number">0xBBD0</span>;<br>    v12 = <span class="hljs-number">0x55</span>;<br>    v13[<span class="hljs-number">0</span>] = <span class="hljs-number">0x3B4FA2FCEDEB4F92</span>LL;<br>    v13[<span class="hljs-number">1</span>] = <span class="hljs-number">0x7E45A6C3B67EA16</span>LL;<br>    v13[<span class="hljs-number">2</span>] = <span class="hljs-number">0xAFE1ACC8BF12D0E7</span>LL;<br>    v13[<span class="hljs-number">3</span>] = <span class="hljs-number">0x132EC3B7269138CE</span>LL;<br>    v13[<span class="hljs-number">4</span>] = <span class="hljs-number">0x8E2197EB7311E643</span>LL;<br>    v14 = <span class="hljs-number">0xAE540AC1</span>;<br>    v15 = <span class="hljs-number">0xC9B5</span>;<br>    v16 = <span class="hljs-number">0x28</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">4</span>; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; ++j) &#123;<br>            <span class="hljs-type">char</span> a = v9[i]&amp;<span class="hljs-number">0xff</span>;<br>            <span class="hljs-type">char</span> b = v13[i]&amp;<span class="hljs-number">0xff</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,a^b);<br>            v9[i] &gt;&gt;= <span class="hljs-number">8</span>;<br>            v13[i] &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i) &#123;<br>        <span class="hljs-type">char</span> a = v10 &amp; <span class="hljs-number">0xff</span>;<br>        <span class="hljs-type">char</span> b = v14 &amp; <span class="hljs-number">0xff</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,a^b);<br>        v10 &gt;&gt;= <span class="hljs-number">8</span>;<br>        v14 &gt;&gt;= <span class="hljs-number">8</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; ++i) &#123;<br>        <span class="hljs-type">char</span> a = v11 &amp; <span class="hljs-number">0xff</span>;<br>        <span class="hljs-type">char</span> b = v15 &amp; <span class="hljs-number">0xff</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,a^b);<br>        v11 &gt;&gt;= <span class="hljs-number">8</span>;<br>        v15 &gt;&gt;= <span class="hljs-number">8</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,v12^v16);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="kmusic">kmusic</h1><p>呃呃，我z3脚本有毛病</p><p>dnspy在随便边一个按钮下断点，动调点击那个按钮就能看到check函数：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230130144454774.png" alt="image-20230130144454774" /><figcaption aria-hidden="true">image-20230130144454774</figcaption></figure><p>z3解咯：</p><p>自己第一次写的脚本很乱，找不到像个正常的flag，就截取了跑出来的前面一部分：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">hgame</span>&#123;z3<br></code></pre></td></tr></table></figure><p>然后和密文异或得到的数据再加进约束</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>s = Solver()<br>num = [<span class="hljs-number">0</span>] * <span class="hljs-number">13</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">13</span>):<br>    num[i] = BitVec(<span class="hljs-string">&quot;num[&#123;&#125;]&quot;</span>.<span class="hljs-built_in">format</span>(i), <span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;start add&quot;</span>)<br>s.add(num[<span class="hljs-number">0</span>] + <span class="hljs-number">52296</span> + num[<span class="hljs-number">1</span>] - <span class="hljs-number">26211</span> + num[<span class="hljs-number">2</span>] - <span class="hljs-number">11754</span> + (num[<span class="hljs-number">3</span>] ^ <span class="hljs-number">41236</span>) + num[<span class="hljs-number">4</span>] * <span class="hljs-number">63747</span> + num[<span class="hljs-number">5</span>] - <span class="hljs-number">52714</span> + num[<br>    <span class="hljs-number">6</span>] - <span class="hljs-number">10512</span> + num[<span class="hljs-number">7</span>] * <span class="hljs-number">12972</span> + num[<span class="hljs-number">8</span>] + <span class="hljs-number">45505</span> + num[<span class="hljs-number">9</span>] - <span class="hljs-number">21713</span> + num[<span class="hljs-number">10</span>] - <span class="hljs-number">59122</span> + num[<span class="hljs-number">11</span>] - <span class="hljs-number">12840</span> + (<br>                  num[<span class="hljs-number">12</span>] ^ <span class="hljs-number">21087</span>) == <span class="hljs-number">12702282</span>)<br>s.add(num[<span class="hljs-number">0</span>] - <span class="hljs-number">25228</span> + (num[<span class="hljs-number">1</span>] ^ <span class="hljs-number">20699</span>) + (num[<span class="hljs-number">2</span>] ^ <span class="hljs-number">8158</span>) + num[<span class="hljs-number">3</span>] - <span class="hljs-number">65307</span> + num[<span class="hljs-number">4</span>] * <span class="hljs-number">30701</span> + num[<span class="hljs-number">5</span>] * <span class="hljs-number">47555</span> + num[<br>    <span class="hljs-number">6</span>] - <span class="hljs-number">2557</span> + (num[<span class="hljs-number">7</span>] ^ <span class="hljs-number">49055</span>) + num[<span class="hljs-number">8</span>] - <span class="hljs-number">7992</span> + (num[<span class="hljs-number">9</span>] ^ <span class="hljs-number">57465</span>) + (num[<span class="hljs-number">10</span>] ^ <span class="hljs-number">57426</span>) + num[<span class="hljs-number">11</span>] + <span class="hljs-number">13299</span> + num[<br>          <span class="hljs-number">12</span>] - <span class="hljs-number">50966</span> == <span class="hljs-number">9946829</span>)<br>s.add(num[<span class="hljs-number">0</span>] - <span class="hljs-number">64801</span> + num[<span class="hljs-number">1</span>] - <span class="hljs-number">60698</span> + num[<span class="hljs-number">2</span>] - <span class="hljs-number">40853</span> + num[<span class="hljs-number">3</span>] - <span class="hljs-number">54907</span> + num[<span class="hljs-number">4</span>] + <span class="hljs-number">29882</span> + (num[<span class="hljs-number">5</span>] ^ <span class="hljs-number">13574</span>) + (<br>            num[<span class="hljs-number">6</span>] ^ <span class="hljs-number">21310</span>) + num[<span class="hljs-number">7</span>] + <span class="hljs-number">47366</span> + num[<span class="hljs-number">8</span>] + <span class="hljs-number">41784</span> + (num[<span class="hljs-number">9</span>] ^ <span class="hljs-number">53690</span>) + num[<span class="hljs-number">10</span>] * <span class="hljs-number">58436</span> + num[<span class="hljs-number">11</span>] * <span class="hljs-number">15590</span> +<br>      num[<span class="hljs-number">12</span>] + <span class="hljs-number">58225</span> == <span class="hljs-number">2372055</span>)<br>s.add(num[<span class="hljs-number">0</span>] + <span class="hljs-number">61538</span> + num[<span class="hljs-number">1</span>] - <span class="hljs-number">17121</span> + num[<span class="hljs-number">2</span>] - <span class="hljs-number">58124</span> + num[<span class="hljs-number">3</span>] + <span class="hljs-number">8186</span> + num[<span class="hljs-number">4</span>] + <span class="hljs-number">21253</span> + num[<span class="hljs-number">5</span>] - <span class="hljs-number">38524</span> + num[<br>    <span class="hljs-number">6</span>] - <span class="hljs-number">48323</span> + num[<span class="hljs-number">7</span>] - <span class="hljs-number">20556</span> + num[<span class="hljs-number">8</span>] * <span class="hljs-number">56056</span> + num[<span class="hljs-number">9</span>] + <span class="hljs-number">18568</span> + num[<span class="hljs-number">10</span>] + <span class="hljs-number">12995</span> + (num[<span class="hljs-number">11</span>] ^ <span class="hljs-number">39260</span>) + num[<br>          <span class="hljs-number">12</span>] + <span class="hljs-number">25329</span> == <span class="hljs-number">6732474</span>)<br>s.add(num[<span class="hljs-number">0</span>] - <span class="hljs-number">42567</span> + num[<span class="hljs-number">1</span>] - <span class="hljs-number">17743</span> + num[<span class="hljs-number">2</span>] * <span class="hljs-number">47827</span> + num[<span class="hljs-number">3</span>] - <span class="hljs-number">10246</span> + (num[<span class="hljs-number">4</span>] ^ <span class="hljs-number">16284</span>) + num[<span class="hljs-number">5</span>] + <span class="hljs-number">39390</span> + num[<br>    <span class="hljs-number">6</span>] * <span class="hljs-number">11803</span> + num[<span class="hljs-number">7</span>] * <span class="hljs-number">60332</span> + (num[<span class="hljs-number">8</span>] ^ <span class="hljs-number">18491</span>) + (num[<span class="hljs-number">9</span>] ^ <span class="hljs-number">4795</span>) + num[<span class="hljs-number">10</span>] - <span class="hljs-number">25636</span> + num[<span class="hljs-number">11</span>] - <span class="hljs-number">16780</span> + num[<br>          <span class="hljs-number">12</span>] - <span class="hljs-number">62345</span> == <span class="hljs-number">14020739</span>)<br>s.add(num[<span class="hljs-number">0</span>] - <span class="hljs-number">10968</span> + num[<span class="hljs-number">1</span>] - <span class="hljs-number">31780</span> + (num[<span class="hljs-number">2</span>] ^ <span class="hljs-number">31857</span>) + num[<span class="hljs-number">3</span>] - <span class="hljs-number">61983</span> + num[<span class="hljs-number">4</span>] * <span class="hljs-number">31048</span> + num[<span class="hljs-number">5</span>] * <span class="hljs-number">20189</span> + num[<br>    <span class="hljs-number">6</span>] + <span class="hljs-number">12337</span> + num[<span class="hljs-number">7</span>] * <span class="hljs-number">25945</span> + (num[<span class="hljs-number">8</span>] ^ <span class="hljs-number">7064</span>) + num[<span class="hljs-number">9</span>] - <span class="hljs-number">25369</span> + num[<span class="hljs-number">10</span>] - <span class="hljs-number">54893</span> + num[<span class="hljs-number">11</span>] * <span class="hljs-number">59949</span> + (<br>                  num[<span class="hljs-number">12</span>] ^ <span class="hljs-number">12441</span>) == <span class="hljs-number">14434062</span>)<br>s.add(num[<span class="hljs-number">0</span>] + <span class="hljs-number">16689</span> + num[<span class="hljs-number">1</span>] - <span class="hljs-number">10279</span> + num[<span class="hljs-number">2</span>] - <span class="hljs-number">32918</span> + num[<span class="hljs-number">3</span>] - <span class="hljs-number">57155</span> + num[<span class="hljs-number">4</span>] * <span class="hljs-number">26571</span> + num[<span class="hljs-number">5</span>] * <span class="hljs-number">15086</span> + (<br>            num[<span class="hljs-number">6</span>] ^ <span class="hljs-number">22986</span>) + (num[<span class="hljs-number">7</span>] ^ <span class="hljs-number">23349</span>) + (num[<span class="hljs-number">8</span>] ^ <span class="hljs-number">16381</span>) + (num[<span class="hljs-number">9</span>] ^ <span class="hljs-number">23173</span>) + num[<span class="hljs-number">10</span>] - <span class="hljs-number">40224</span> + num[<br>          <span class="hljs-number">11</span>] + <span class="hljs-number">31751</span> + num[<span class="hljs-number">12</span>] * <span class="hljs-number">8421</span> == <span class="hljs-number">7433598</span>)<br>s.add(num[<span class="hljs-number">0</span>] + <span class="hljs-number">28740</span> + num[<span class="hljs-number">1</span>] - <span class="hljs-number">64696</span> + num[<span class="hljs-number">2</span>] + <span class="hljs-number">60470</span> + num[<span class="hljs-number">3</span>] - <span class="hljs-number">14752</span> + (num[<span class="hljs-number">4</span>] ^ <span class="hljs-number">1287</span>) + (num[<span class="hljs-number">5</span>] ^ <span class="hljs-number">35272</span>) + num[<br>    <span class="hljs-number">6</span>] + <span class="hljs-number">49467</span> + num[<span class="hljs-number">7</span>] - <span class="hljs-number">33788</span> + num[<span class="hljs-number">8</span>] + <span class="hljs-number">20606</span> + (num[<span class="hljs-number">9</span>] ^ <span class="hljs-number">44874</span>) + num[<span class="hljs-number">10</span>] * <span class="hljs-number">19764</span> + num[<span class="hljs-number">11</span>] + <span class="hljs-number">48342</span> + num[<br>          <span class="hljs-number">12</span>] * <span class="hljs-number">56511</span> == <span class="hljs-number">7989404</span><br>      )<br>s.add((num[<span class="hljs-number">0</span>] ^ <span class="hljs-number">28978</span>) + num[<span class="hljs-number">1</span>] + <span class="hljs-number">23120</span> + num[<span class="hljs-number">2</span>] + <span class="hljs-number">22802</span> + num[<span class="hljs-number">3</span>] * <span class="hljs-number">31533</span> + (num[<span class="hljs-number">4</span>] ^ <span class="hljs-number">39287</span>) + num[<span class="hljs-number">5</span>] - <span class="hljs-number">48576</span> + (<br>            num[<span class="hljs-number">6</span>] ^ <span class="hljs-number">28542</span>) + num[<span class="hljs-number">7</span>] - <span class="hljs-number">43265</span> + num[<span class="hljs-number">8</span>] + <span class="hljs-number">22365</span> + num[<span class="hljs-number">9</span>] + <span class="hljs-number">61108</span> + num[<span class="hljs-number">10</span>] * <span class="hljs-number">2823</span> + num[<span class="hljs-number">11</span>] - <span class="hljs-number">30343</span> + num[<br>          <span class="hljs-number">12</span>] + <span class="hljs-number">14780</span> == <span class="hljs-number">3504803</span><br>      )<br>s.add(num[<span class="hljs-number">0</span>] * <span class="hljs-number">22466</span> + (num[<span class="hljs-number">1</span>] ^ <span class="hljs-number">55999</span>) + num[<span class="hljs-number">2</span>] - <span class="hljs-number">53658</span> + (num[<span class="hljs-number">3</span>] ^ <span class="hljs-number">47160</span>) + (num[<span class="hljs-number">4</span>] ^ <span class="hljs-number">12511</span>) + num[<span class="hljs-number">5</span>] * <span class="hljs-number">59807</span> + num[<br>    <span class="hljs-number">6</span>] + <span class="hljs-number">46242</span> + num[<span class="hljs-number">7</span>] + <span class="hljs-number">3052</span> + (num[<span class="hljs-number">8</span>] ^ <span class="hljs-number">25279</span>) + num[<span class="hljs-number">9</span>] + <span class="hljs-number">30202</span> + num[<span class="hljs-number">10</span>] * <span class="hljs-number">22698</span> + num[<span class="hljs-number">11</span>] + <span class="hljs-number">33480</span> + (<br>                  num[<span class="hljs-number">12</span>] ^ <span class="hljs-number">16757</span>) == <span class="hljs-number">11003580</span><br>      )<br>s.add(num[<span class="hljs-number">0</span>] * <span class="hljs-number">57492</span> + (num[<span class="hljs-number">1</span>] ^ <span class="hljs-number">13421</span>) + num[<span class="hljs-number">2</span>] - <span class="hljs-number">13941</span> + (num[<span class="hljs-number">3</span>] ^ <span class="hljs-number">48092</span>) + num[<span class="hljs-number">4</span>] * <span class="hljs-number">38310</span> + num[<span class="hljs-number">5</span>] + <span class="hljs-number">9884</span> + num[<br>    <span class="hljs-number">6</span>] - <span class="hljs-number">45500</span> + num[<span class="hljs-number">7</span>] - <span class="hljs-number">19233</span> + num[<span class="hljs-number">8</span>] + <span class="hljs-number">58274</span> + num[<span class="hljs-number">9</span>] + <span class="hljs-number">36175</span> + (num[<span class="hljs-number">10</span>] ^ <span class="hljs-number">18568</span>) + num[<span class="hljs-number">11</span>] * <span class="hljs-number">49694</span> + (<br>                  num[<span class="hljs-number">12</span>] ^ <span class="hljs-number">9473</span>) == <span class="hljs-number">25546210</span><br>      )<br>s.add(num[<span class="hljs-number">0</span>] - <span class="hljs-number">23355</span> + num[<span class="hljs-number">1</span>] * <span class="hljs-number">50164</span> + (num[<span class="hljs-number">2</span>] ^ <span class="hljs-number">34618</span>) + num[<span class="hljs-number">3</span>] + <span class="hljs-number">52703</span> + num[<span class="hljs-number">4</span>] + <span class="hljs-number">36245</span> + num[<span class="hljs-number">5</span>] * <span class="hljs-number">46648</span> + (<br>            num[<span class="hljs-number">6</span>] ^ <span class="hljs-number">4858</span>) + (num[<span class="hljs-number">7</span>] ^ <span class="hljs-number">41846</span>) + num[<span class="hljs-number">8</span>] * <span class="hljs-number">27122</span> + (num[<span class="hljs-number">9</span>] ^ <span class="hljs-number">42058</span>) + num[<span class="hljs-number">10</span>] * <span class="hljs-number">15676</span> + num[<span class="hljs-number">11</span>] - <span class="hljs-number">31863</span> +<br>      num[<span class="hljs-number">12</span>] + <span class="hljs-number">62510</span> == <span class="hljs-number">11333836</span><br>      )<br>s.add(num[<span class="hljs-number">0</span>] * <span class="hljs-number">30523</span> + (num[<span class="hljs-number">1</span>] ^ <span class="hljs-number">7990</span>) + num[<span class="hljs-number">2</span>] + <span class="hljs-number">39058</span> + num[<span class="hljs-number">3</span>] * <span class="hljs-number">57549</span> + (num[<span class="hljs-number">4</span>] ^ <span class="hljs-number">53440</span>) + num[<span class="hljs-number">5</span>] * <span class="hljs-number">4275</span> + num[<br>    <span class="hljs-number">6</span>] - <span class="hljs-number">48863</span> + (num[<span class="hljs-number">7</span>] ^ <span class="hljs-number">55436</span>) + (num[<span class="hljs-number">8</span>] ^ <span class="hljs-number">2624</span>) + (num[<span class="hljs-number">9</span>] ^ <span class="hljs-number">13652</span>) + num[<span class="hljs-number">10</span>] + <span class="hljs-number">62231</span> + num[<span class="hljs-number">11</span>] + <span class="hljs-number">19456</span> + num[<br>          <span class="hljs-number">12</span>] - <span class="hljs-number">13195</span> == <span class="hljs-number">13863722</span>)<br>s.add(num[<span class="hljs-number">0</span>] == <span class="hljs-number">236</span>)<span class="hljs-comment">#多加的约束</span><br>s.add(num[<span class="hljs-number">1</span>] == <span class="hljs-number">72</span>)<br>s.add(num[<span class="hljs-number">2</span>] == <span class="hljs-number">213</span>)<br>s.add(num[<span class="hljs-number">3</span>] == <span class="hljs-number">106</span>)<br>s.add(num[<span class="hljs-number">4</span>] == <span class="hljs-number">189</span>)<br>s.add(num[<span class="hljs-number">5</span>] == <span class="hljs-number">86</span>)<br>s.add(num[<span class="hljs-number">6</span>] == <span class="hljs-number">62</span>)<br>s.add(num[<span class="hljs-number">7</span>] == <span class="hljs-number">53</span>)<span class="hljs-comment">#多加的约束</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;start check&quot;</span>)<br>arr = [<span class="hljs-number">132</span>, <span class="hljs-number">47</span>, <span class="hljs-number">180</span>, <span class="hljs-number">7</span>, <span class="hljs-number">216</span>, <span class="hljs-number">45</span>, <span class="hljs-number">68</span>, <span class="hljs-number">6</span>, <span class="hljs-number">39</span>, <span class="hljs-number">246</span>, <span class="hljs-number">124</span>, <span class="hljs-number">2</span>, <span class="hljs-number">243</span>, <span class="hljs-number">137</span>, <span class="hljs-number">58</span>, <span class="hljs-number">172</span>, <span class="hljs-number">53</span>, <span class="hljs-number">200</span>, <span class="hljs-number">99</span>, <span class="hljs-number">91</span>, <span class="hljs-number">83</span>, <span class="hljs-number">13</span>, <span class="hljs-number">171</span>, <span class="hljs-number">80</span>, <span class="hljs-number">108</span>, <span class="hljs-number">235</span>,<br>       <span class="hljs-number">179</span>, <span class="hljs-number">58</span>, <span class="hljs-number">176</span>, <span class="hljs-number">28</span>, <span class="hljs-number">216</span>, <span class="hljs-number">36</span>, <span class="hljs-number">11</span>, <span class="hljs-number">80</span>, <span class="hljs-number">39</span>, <span class="hljs-number">162</span>, <span class="hljs-number">97</span>, <span class="hljs-number">58</span>, <span class="hljs-number">236</span>, <span class="hljs-number">130</span>, <span class="hljs-number">123</span>, <span class="hljs-number">176</span>, <span class="hljs-number">24</span>, <span class="hljs-number">212</span>, <span class="hljs-number">56</span>, <span class="hljs-number">89</span>, <span class="hljs-number">72</span>]<br><span class="hljs-keyword">if</span> s.check() == sat:<br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> s.check() == sat:<br>        condition = []<br>        m = s.model()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[%d]&quot;</span> % k)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(m[num[i % <span class="hljs-number">13</span>]].as_long() ^ arr[i]),end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-built_in">print</span>()<br>        k += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">13</span>):<br>            condition.append(num[i] != BitVec(<span class="hljs-string">&quot;%s&quot;</span> % (m[num[i]]).as_long(), <span class="hljs-number">8</span>))<br>        s.add(Or(condition))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wrong&quot;</span>)<br></code></pre></td></tr></table></figure><p>然后就跑出这个：hgame{z3_±s_öery_u5efuì_1î_rever5e_ångén3ering} 怪诶，因为num是13位的，所以把非ascii字符替换然后找其他的约束</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">arr = [<span class="hljs-number">132</span>, <span class="hljs-number">47</span>, <span class="hljs-number">180</span>, <span class="hljs-number">7</span>, <span class="hljs-number">216</span>, <span class="hljs-number">45</span>, <span class="hljs-number">68</span>, <span class="hljs-number">6</span>, <span class="hljs-number">39</span>, <span class="hljs-number">246</span>, <span class="hljs-number">124</span>, <span class="hljs-number">2</span>, <span class="hljs-number">243</span>, <span class="hljs-number">137</span>, <span class="hljs-number">58</span>, <span class="hljs-number">172</span>, <span class="hljs-number">53</span>, <span class="hljs-number">200</span>, <span class="hljs-number">99</span>, <span class="hljs-number">91</span>, <span class="hljs-number">83</span>, <span class="hljs-number">13</span>, <span class="hljs-number">171</span>, <span class="hljs-number">80</span>, <span class="hljs-number">108</span>, <span class="hljs-number">235</span>,<br>       <span class="hljs-number">179</span>, <span class="hljs-number">58</span>, <span class="hljs-number">176</span>, <span class="hljs-number">28</span>, <span class="hljs-number">216</span>, <span class="hljs-number">36</span>, <span class="hljs-number">11</span>, <span class="hljs-number">80</span>, <span class="hljs-number">39</span>, <span class="hljs-number">162</span>, <span class="hljs-number">97</span>, <span class="hljs-number">58</span>, <span class="hljs-number">236</span>, <span class="hljs-number">130</span>, <span class="hljs-number">123</span>, <span class="hljs-number">176</span>, <span class="hljs-number">24</span>, <span class="hljs-number">212</span>, <span class="hljs-number">56</span>, <span class="hljs-number">89</span>, <span class="hljs-number">72</span>]<br>a = <span class="hljs-string">&quot;hgame&#123;z3_@s_@ery_u5efu@_1@_rever5e_@ng@n3ering&#125;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">13</span>):<br>    <span class="hljs-keyword">if</span> a[i] == <span class="hljs-string">&#x27;@&#x27;</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;s.add(num[&#123;&#125;] == &#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(i,(arr[i]^<span class="hljs-built_in">ord</span>(a[i]))&amp;<span class="hljs-number">0xff</span>))<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs output">s.add(num[0] == 236)<br>s.add(num[1] == 72)<br>s.add(num[2] == 213)<br>s.add(num[3] == 106)<br>s.add(num[4] == 189)<br>s.add(num[5] == 86)<br>s.add(num[6] == 62)<br>s.add(num[7] == 53)<br>s.add(num[8] == 120)<br>s.add(num[10] == 15)<br>s.add(num[11] == 93)<br></code></pre></td></tr></table></figure><p>再加上去：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">略<br>s.add(num[<span class="hljs-number">0</span>] == <span class="hljs-number">236</span>)<br>s.add(num[<span class="hljs-number">1</span>] == <span class="hljs-number">72</span>)<br>s.add(num[<span class="hljs-number">2</span>] == <span class="hljs-number">213</span>)<br>s.add(num[<span class="hljs-number">3</span>] == <span class="hljs-number">106</span>)<br>s.add(num[<span class="hljs-number">4</span>] == <span class="hljs-number">189</span>)<br>s.add(num[<span class="hljs-number">5</span>] == <span class="hljs-number">86</span>)<br>s.add(num[<span class="hljs-number">6</span>] == <span class="hljs-number">62</span>)<br>s.add(num[<span class="hljs-number">7</span>] == <span class="hljs-number">53</span>)<br>s.add(num[<span class="hljs-number">8</span>] == <span class="hljs-number">120</span>)<br>s.add(num[<span class="hljs-number">10</span>] == <span class="hljs-number">15</span>)<br>s.add(num[<span class="hljs-number">11</span>] == <span class="hljs-number">93</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;start check&quot;</span>)<br>arr = [<span class="hljs-number">132</span>, <span class="hljs-number">47</span>, <span class="hljs-number">180</span>, <span class="hljs-number">7</span>, <span class="hljs-number">216</span>, <span class="hljs-number">45</span>, <span class="hljs-number">68</span>, <span class="hljs-number">6</span>, <span class="hljs-number">39</span>, <span class="hljs-number">246</span>, <span class="hljs-number">124</span>, <span class="hljs-number">2</span>, <span class="hljs-number">243</span>, <span class="hljs-number">137</span>, <span class="hljs-number">58</span>, <span class="hljs-number">172</span>, <span class="hljs-number">53</span>, <span class="hljs-number">200</span>, <span class="hljs-number">99</span>, <span class="hljs-number">91</span>, <span class="hljs-number">83</span>, <span class="hljs-number">13</span>, <span class="hljs-number">171</span>, <span class="hljs-number">80</span>, <span class="hljs-number">108</span>, <span class="hljs-number">235</span>,<br>       <span class="hljs-number">179</span>, <span class="hljs-number">58</span>, <span class="hljs-number">176</span>, <span class="hljs-number">28</span>, <span class="hljs-number">216</span>, <span class="hljs-number">36</span>, <span class="hljs-number">11</span>, <span class="hljs-number">80</span>, <span class="hljs-number">39</span>, <span class="hljs-number">162</span>, <span class="hljs-number">97</span>, <span class="hljs-number">58</span>, <span class="hljs-number">236</span>, <span class="hljs-number">130</span>, <span class="hljs-number">123</span>, <span class="hljs-number">176</span>, <span class="hljs-number">24</span>, <span class="hljs-number">212</span>, <span class="hljs-number">56</span>, <span class="hljs-number">89</span>, <span class="hljs-number">72</span>]<br><span class="hljs-keyword">if</span> s.check() == sat:<br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> s.check() == sat:<br>        condition = []<br>        m = s.model()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[%d]&quot;</span> % k)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(m[num[i % <span class="hljs-number">13</span>]].as_long() ^ arr[i]),end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-built_in">print</span>()<br>        k += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">13</span>):<br>            condition.append(num[i] != BitVec(<span class="hljs-string">&quot;%s&quot;</span> % (m[num[i]]).as_long(), <span class="hljs-number">8</span>))<br>        s.add(Or(condition))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wrong&quot;</span>)<br></code></pre></td></tr></table></figure><p>就得到flag</p><p>hgame{z3_1s_very_u5eful_1n_rever5e_engin3ering}</p>]]></content>
    
    
    <categories>
      
      <category>CTF write up</category>
      
      <category>HGAME</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
      <tag>hgame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022西湖论剑碎碎念</title>
    <link href="/2023/02/02/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    <url>/2023/02/02/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<p>呃啊啊啊啊啊</p><p>md好难啊</p><p>先是船新的知识点: 天堂之门 附两篇学习链接：<a href="https://taardisaa.github.io/2021/09/25/Heaven&#39;sGate/">天堂之门技术</a> <a href="https://bbs.kanxue.com/thread-270153.htm">天堂之门 (Heaven's Gate) C语言实现</a> 以后会写的。。。</p><p>nm完全不会啊，看了还是不会，也就知道这玩意巨牛逼，能够直接打断你动调的狗腿，把我埋了吧啊啊啊啊啊</p><p>碎碎念搞啥格式。。。。</p><p>下午发现多了个babyre</p><p>确实baby，但也没出啊啊啊啊</p><p>nmd中间这坨什么啊</p><p>前面后面都搞定了，就剩中间依托答辩</p><p>第一个验证解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">enc1 = <span class="hljs-string">&#x27;162304651523346214431471150310701503207116032063140334661543446114434066142304661563446615430464&#x27;</span><br>Enc1 = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc1:<br>    Enc1.append(<span class="hljs-built_in">ord</span>(i) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;0&#x27;</span>))<br>flag1 = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(Enc1), <span class="hljs-number">8</span>):<br>    a = (Enc1[i] &lt;&lt; <span class="hljs-number">5</span>) + (Enc1[i + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">2</span>) + (Enc1[i + <span class="hljs-number">2</span>] &gt;&gt; <span class="hljs-number">1</span>)<br>    b = ((Enc1[i + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">7</span>) + (Enc1[i + <span class="hljs-number">3</span>] &lt;&lt; <span class="hljs-number">4</span>) + (Enc1[i + <span class="hljs-number">4</span>] &lt;&lt; <span class="hljs-number">1</span>) + (Enc1[i + <span class="hljs-number">5</span>] &gt;&gt; <span class="hljs-number">2</span>)<br>    c = ((Enc1[i + <span class="hljs-number">5</span>] &amp; <span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-number">6</span>) + (Enc1[i + <span class="hljs-number">6</span>] &lt;&lt; <span class="hljs-number">3</span>) + Enc1[i + <span class="hljs-number">7</span>]<br>    flag1 += <span class="hljs-built_in">chr</span>(a) + <span class="hljs-built_in">chr</span>(b) + <span class="hljs-built_in">chr</span>(c)<br>    <span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(flag1)<br></code></pre></td></tr></table></figure><p>最后一个rc4秘钥爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_box</span>(<span class="hljs-params">key</span>):<br>    s_box = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s_box[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span><br>        s_box[i], s_box[j] = s_box[j], s_box[i]<br>    <span class="hljs-keyword">return</span> s_box<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">res</span>):<br>    enc = [<span class="hljs-number">0x3F</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x63</span>,<br>           <span class="hljs-number">0xC0</span>,<br>           <span class="hljs-number">0x08</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x42</span>,<br>           <span class="hljs-number">0x3E</span>,<br>           <span class="hljs-number">0x42</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xB9</span>,<br>           <span class="hljs-number">0x36</span>,<br>           <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x55</span>,<br>           <span class="hljs-number">0x18</span>,<br>           <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xD5</span>,<br>           <span class="hljs-number">0x94</span>,<br>           <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x70</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>,<span class="hljs-built_in">len</span>(enc)):<br>        <span class="hljs-keyword">if</span> res[i] != enc[i]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc_4</span>(<span class="hljs-params">plain,box</span>):<br>    res = []<br>    i = j =<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> plain:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + box[i]) % <span class="hljs-number">256</span><br>        box[i], box[j] = box[j], box[i]<br>        t = (box[i] + box[j]) % <span class="hljs-number">256</span><br>        k = box[t]<br>        res.append((s ^ k)&amp;<span class="hljs-number">0xff</span>)<br>    <span class="hljs-keyword">return</span> check(res)<br>ra = <span class="hljs-string">&#x27;0123456789&#x27;</span><br>right = <span class="hljs-string">&#x27;-&#x27;</span><br>m = [<span class="hljs-number">0x31</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x34</span>,<br>     <span class="hljs-number">0x30</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x33</span>,<br>     <span class="hljs-number">0x30</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x34</span>,<br>     <span class="hljs-number">0x36</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x31</span>,<br>     <span class="hljs-number">0x31</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x35</span>,<br>     <span class="hljs-number">0x30</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x33</span>,<br>     <span class="hljs-number">0x32</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x34</span>,<br>     <span class="hljs-number">0x36</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x31</span>,<br>     <span class="hljs-number">0x31</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x34</span>,<br>     <span class="hljs-number">0x32</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x33</span>,<br>     <span class="hljs-number">0x34</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x34</span>,<br>     <span class="hljs-number">0x36</span>, <span class="hljs-number">0x34</span>]<br><br>k = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i0 <span class="hljs-keyword">in</span> ra:<br>    <span class="hljs-keyword">for</span> i1 <span class="hljs-keyword">in</span> ra:<br>        <span class="hljs-keyword">for</span> i2 <span class="hljs-keyword">in</span> ra:<br>            <span class="hljs-keyword">for</span> i3 <span class="hljs-keyword">in</span> ra:<br>                <span class="hljs-keyword">for</span> i4 <span class="hljs-keyword">in</span> ra:<br>                    <span class="hljs-keyword">for</span> i5 <span class="hljs-keyword">in</span> ra:<br>                        keyy = i0+i1+i2+i3+i4+i5<br>                        <span class="hljs-keyword">if</span> rc_4(m, init_box(keyy)) == <span class="hljs-number">1</span>:<br>                            right = keyy<br>                            <span class="hljs-built_in">print</span>(keyy)<br>                            exit(<span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">else</span>:<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[&#123;&#125;] false &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(k,keyy))<br>                            k += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(right)<br></code></pre></td></tr></table></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230202180351632.png" alt="image-20230202180351632" /><figcaption aria-hidden="true">image-20230202180351632</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230202180359281.png" alt="image-20230202180359281" /><figcaption aria-hidden="true">image-20230202180359281</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230202180404722.png" alt="image-20230202180404722" /><figcaption aria-hidden="true">image-20230202180404722</figcaption></figure><p>中间这什么jb。。。。</p><p>麻了。。。</p><hr /><p>2023.3.4更新:</p><p>md,中间是sha1。。。。</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>salsa20浅学</title>
    <link href="/2023/01/29/salsa20/"/>
    <url>/2023/01/29/salsa20/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>打hgame遇到的加密算法，张见识了，xman指出来这个加密，才破关。。。</p><h1 id="简介">简介</h1><p>Salsa20是一种<strong>流式对称</strong>加密算法，类似于Chacha20，算法性能相比AES能够快3倍以上。 Salsa20算法通过将32 Byte的key和8 Byte的随机数nonce扩展为2^70 Byte的随机字节流，通过随机字节流和异或操作实现加解密，因此Salsa20算法中随机字节流的生成为关键所在。</p><div class="note note-success">            <p>这个是一种流加密，但是和<a href="https://azureussimu.github.io/2022/03/30/RC4/">rc4</a>很相似，同样相似的也有一个叫chacha的加密</p>          </div><h1 id="随机字节流生成">随机字节流生成</h1><p>Salsa20算法生成随机字节流时，一次生成一个64字节的block，每一个block是通过将key、nonce和block number以及部分常量组成64字节的input，通过核函数，输出64字节的output。最终多个block组成长度为2^70的随机字节流，在生成过程中，每个block相互独立。</p><h2 id="input">Input</h2><p>伪随机数流的产生其实就是将64字节（512比特）的输入送入核心函数，然后得到512比特的输出的过程。 每次输入的字节包含密钥、初始向量和计数器。 这样，要产生长度是<code>N</code>字节的伪随机数流，只需要调用核心函数若干次，直到获取了足够长度（不少于<code>N</code>）的输出即可。</p><p>核心函数的输入和输出各是一个16元素的32位无符号整型数组。 根据Salsa20的定义，将字节变换为32位无符号整型时使用的是 <strong>小尾序（Little Endian）</strong> 的。</p><p>例如，我们要表示一个无符号32位整数<code>0xDEADBEEF</code>，则其在一个长度是4个字节的数组<code>A</code>中，应当有：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">A</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>xEF<br><span class="hljs-attribute">A</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>xBE<br><span class="hljs-attribute">A</span>[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>xAD<br><span class="hljs-attribute">A</span>[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>xDE<br></code></pre></td></tr></table></figure><p>反之亦然。</p><p>在下文中，我们称这样一个小尾序的无符号32位整数为一个 <strong>词</strong> 。</p><p>Salsa20支持两种长度的密钥：128比特（16字节）或者256比特（32字节）。</p><p>为了构建送入核心函数的输入，规则如下：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">常量1 || 密钥前半 || 常量2 || 初始向量 || 计数器 || 常量3 || 密钥后半 || 常量4<br>.0<span class="hljs-string">-3</span>......4<span class="hljs-string">-19</span>......20<span class="hljs-string">-23</span>.....24<span class="hljs-string">-31</span>......32<span class="hljs-string">-39</span>....40<span class="hljs-string">-43</span>.....44<span class="hljs-string">-59</span>.....60<span class="hljs-string">-63</span>.<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><code>常量1</code>、<code>常量2</code>、<code>常量3</code>、<code>常量4</code>各是1个词；</li><li><code>密钥前半</code>和<code>密钥后半</code>分别是4个词；</li><li><code>初始向量</code>和<code>计数器</code>分别是2个词。</li></ul><p>故一共是16个词，每个词4字节，共64字节=512比特。</p><p>在每多进行一次核心函数的计算时，<code>计数器</code>需要增加1位。 即每次在第32位上加1，如果进位则在33、34……39位上增加。</p><p>初始向量是对于一个流唯一的一个量。由2个词（8字节）构成。初始向量可以明文传送。</p><p>根据密钥长度不同，对密钥和常量的选取有差异，下面分开解释。</p><h3 id="使用256比特密钥进行加密解密">使用256比特密钥进行加密/解密</h3><p>在使用256比特的密钥时，常量1-4是如下一组的4个词：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">[<span class="hljs-number">0x61707865</span>, <span class="hljs-number">0</span>x3320646e, <span class="hljs-number">0x79622d32</span>, <span class="hljs-number">0x6b206574</span>]<br></code></pre></td></tr></table></figure><p>密钥前半由密钥的前128比特，即<code>0-15</code>字节构成。密钥后半，则是<code>16-31</code>字节。</p><p>这4个常量词的选取是由<code>expand 32-byte k</code>这段话得来。</p><h3 id="使用128比特密钥进行加密解密">使用128比特密钥进行加密/解密</h3><p>在使用128比特的密钥时，常量1-4是如下一组的4个词：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">[<span class="hljs-number">0x61707865</span>, <span class="hljs-number">0</span>x3120646e, <span class="hljs-number">0x79622d36</span>, <span class="hljs-number">0x6b206574</span>]<br></code></pre></td></tr></table></figure><p>密钥前半和密钥后半，都用整个密钥填充。</p><p>这4个常量词的选取是由<code>expand 16-byte k</code>这段话得来。</p><h2 id="核函数">核函数</h2><p>Salsa20算法核函数将64字节的输入以矩阵形式作为参数，输出64字节的运算结果. Salsa20核函数运算主要包括的运算如下，其中a和b皆为32bit（4 Byte）的数据：</p><ul><li>32 bit模加：<code>(a + b) mod 2^32</code>，</li><li>异或：<code>a XOR b</code></li><li>左移：<code>a &lt;&lt;&lt; b</code>，其中b为常量，在Salsa20算法中左移的值为7、9、13、18</li></ul><p>针对输入矩阵中的每个word，执行20轮的如下操作： <code>b ⊕= (a ⊞ c) &lt;&lt;&lt; k</code>，其中<code>⊕</code>为异或，<code>⊞</code>模加，<code>&lt;&lt;&lt;</code>为左移。</p><p>经过20轮计算后，将输出的矩阵核原始矩阵相加，得到输出。</p><p>Salsa20核函数具体实现如下：</p><pre><code class="hljs"> #define R(a,b) (((a) &lt;&lt; (b)) | ((a) &gt;&gt; (32 - (b)))) void salsa20_word_specification(uint32 out[16],uint32 in[16]) &#123;   int i;   uint32 x[16];   for (i = 0;i &lt; 16;++i) x[i] = in[i];   for (i = 20;i &gt; 0;i -= 2) &#123; // 20轮计算     x[ 4] ^= R(x[ 0]+x[12], 7);  x[ 8] ^= R(x[ 4]+x[ 0], 9);     x[12] ^= R(x[ 8]+x[ 4],13);  x[ 0] ^= R(x[12]+x[ 8],18);     x[ 9] ^= R(x[ 5]+x[ 1], 7);  x[13] ^= R(x[ 9]+x[ 5], 9);     x[ 1] ^= R(x[13]+x[ 9],13);  x[ 5] ^= R(x[ 1]+x[13],18);     x[14] ^= R(x[10]+x[ 6], 7);  x[ 2] ^= R(x[14]+x[10], 9);     x[ 6] ^= R(x[ 2]+x[14],13);  x[10] ^= R(x[ 6]+x[ 2],18);     x[ 3] ^= R(x[15]+x[11], 7);  x[ 7] ^= R(x[ 3]+x[15], 9);     x[11] ^= R(x[ 7]+x[ 3],13);  x[15] ^= R(x[11]+x[ 7],18);     x[ 1] ^= R(x[ 0]+x[ 3], 7);  x[ 2] ^= R(x[ 1]+x[ 0], 9);     x[ 3] ^= R(x[ 2]+x[ 1],13);  x[ 0] ^= R(x[ 3]+x[ 2],18);     x[ 6] ^= R(x[ 5]+x[ 4], 7);  x[ 7] ^= R(x[ 6]+x[ 5], 9);     x[ 4] ^= R(x[ 7]+x[ 6],13);  x[ 5] ^= R(x[ 4]+x[ 7],18);     x[11] ^= R(x[10]+x[ 9], 7);  x[ 8] ^= R(x[11]+x[10], 9);     x[ 9] ^= R(x[ 8]+x[11],13);  x[10] ^= R(x[ 9]+x[ 8],18);     x[12] ^= R(x[15]+x[14], 7);  x[13] ^= R(x[12]+x[15], 9);     x[14] ^= R(x[13]+x[12],13);  x[15] ^= R(x[14]+x[13],18);   &#125;   for (i = 0;i &lt; 16;++i) out[i] = x[i] + in[i]; // 输入矩阵经过20轮的计算结果和原始矩阵相加得到最终输出 &#125;</code></pre><p>注意核心函数中标出来的迭代次数。 这个<code>for</code>循环的实际运行次数，就是实际应用中写成<code>Salsa20/x</code>中的x。</p><p>例如，如上代码迭代 <strong>10</strong> 次，因此是<code>Salsa20/10</code>。</p><h2 id="output">Output</h2><p>每一次核函数运算，都能够通过key、nonce、block-counter生成64字节的输出block，经过多次输入和核函数运算，将每一次的生成结果拼接最终组成长度为2^70的字节流</p><h1 id="加解密操作">加解密操作</h1><p>得到随机字节流之后，Salsa算法的加解密操作极其简单。</p><ul><li>加密操作 当加密长度为b字节的明文数据时，通过将明文数据和随机字节流的前b个字节进行异或运算得到密文。</li><li>解密操作 当解密长度为b字节的数据时，通过将密文和b字节的字节流进行异或运算得到明文。</li></ul>]]></content>
    
    
    <categories>
      
      <category>加密算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HGAME 2023 week2 wp</title>
    <link href="/2023/01/19/hgame2023-week2/"/>
    <url>/2023/01/19/hgame2023-week2/</url>
    
    <content type="html"><![CDATA[<h1 id="stream">stream</h1><p>反编译pyexe</p><p>在线反编译pyc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># visit https://tool.lu/pyc/ for more information</span><br><span class="hljs-comment"># Version: Python 3.10</span><br><br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">key</span>):<br>    s = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span><br>        tmp = s[i]<br>        s[i] = s[j]<br>        s[j] = tmp<br>    i = j = <span class="hljs-number">0</span><br>    data = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + s[i]) % <span class="hljs-number">256</span><br>        tmp = s[i]<br>        s[i] = s[j]<br>        s[j] = tmp<br>        data.append(s[(s[i] + s[j]) % <span class="hljs-number">256</span>])<br>    <span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">text, key</span>):<br>    result = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> c, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(text, gen(key)):<br>        result += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(c) ^ k)<br>    result = base64.b64encode(result.encode()).decode()<br>    <span class="hljs-keyword">return</span> result<br><br>text = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span>)<br>key = <span class="hljs-string">&#x27;As_we_do_as_you_know&#x27;</span><br>enc = encrypt(text, key)<br><span class="hljs-keyword">if</span> enc == <span class="hljs-string">&#x27;wr3ClVcSw7nCmMOcHcKgacOtMkvDjxZ6asKWw4nChMK8IsK7KMOOasOrdgbDlx3DqcKqwr0hw701Ly57w63CtcOl&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;yes!&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-literal">None</span>(<span class="hljs-string">&#x27;try again...&#x27;</span>)<br></code></pre></td></tr></table></figure><p>gen(key)不用看，直接跑就是，这题唯一坑了我的地方是base64加密encode函数的问题 encode函数是返回字符串，所以base64加密了这段字符串，导致长度更长了</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">key</span>):<br>    s = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span><br>        tmp = s[i]<br>        s[i] = s[j]<br>        s[j] = tmp<br>    i = j = <span class="hljs-number">0</span><br>    data = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + s[i]) % <span class="hljs-number">256</span><br>        tmp = s[i]<br>        s[i] = s[j]<br>        s[j] = tmp<br>        data.append(s[(s[i] + s[j]) % <span class="hljs-number">256</span>])<br>    <span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">text, key</span>):<br>    result = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> c, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(text, gen(key)):<br>        result += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(c) ^ k)<br>    result = base64.b64encode(result.encode()).decode()<br>    <span class="hljs-keyword">return</span> result<br><br>key = <span class="hljs-string">&#x27;As_we_do_as_you_know&#x27;</span><br><span class="hljs-built_in">print</span>(gen(key))<br>key2 = [<span class="hljs-number">213</span>, <span class="hljs-number">242</span>, <span class="hljs-number">54</span>, <span class="hljs-number">127</span>, <span class="hljs-number">156</span>, <span class="hljs-number">227</span>, <span class="hljs-number">172</span>, <span class="hljs-number">100</span>, <span class="hljs-number">212</span>, <span class="hljs-number">1</span>, <span class="hljs-number">130</span>, <span class="hljs-number">92</span>, <span class="hljs-number">20</span>, <span class="hljs-number">189</span>, <span class="hljs-number">115</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">228</span>, <span class="hljs-number">186</span>, <span class="hljs-number">225</span>, <span class="hljs-number">227</span>, <span class="hljs-number">75</span>, <span class="hljs-number">200</span>, <span class="hljs-number">119</span>, <span class="hljs-number">171</span>, <span class="hljs-number">11</span>, <span class="hljs-number">152</span>, <span class="hljs-number">15</span>, <span class="hljs-number">89</span>, <span class="hljs-number">160</span>, <span class="hljs-number">116</span>, <span class="hljs-number">157</span>, <span class="hljs-number">194</span>, <span class="hljs-number">226</span>, <span class="hljs-number">72</span>, <span class="hljs-number">147</span>, <span class="hljs-number">65</span>, <span class="hljs-number">74</span>, <span class="hljs-number">92</span>, <span class="hljs-number">21</span>, <span class="hljs-number">136</span>, <span class="hljs-number">193</span>, <span class="hljs-number">152</span>, <span class="hljs-number">94</span>, <span class="hljs-number">17</span>, <span class="hljs-number">178</span>, <span class="hljs-number">205</span>, <span class="hljs-number">195</span>, <span class="hljs-number">87</span>, <span class="hljs-number">145</span>]<br>enc = <span class="hljs-string">&#x27;wr3ClVcSw7nCmMOcHcKgacOtMkvDjxZ6asKWw4nChMK8IsK7KMOOasOrdgbDlx3DqcKqwr0hw701Ly57w63CtcOl&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(base64.b64decode(enc.encode()).decode()))<br>enc2 = [<span class="hljs-string">&#x27;½&#x27;</span>, <span class="hljs-string">&#x27;\x95&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;\x12&#x27;</span>, <span class="hljs-string">&#x27;ù&#x27;</span>, <span class="hljs-string">&#x27;\x98&#x27;</span>, <span class="hljs-string">&#x27;Ü&#x27;</span>, <span class="hljs-string">&#x27;\x1d&#x27;</span>, <span class="hljs-string">&#x27;\xa0&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;í&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;Ï&#x27;</span>, <span class="hljs-string">&#x27;\x16&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;\x96&#x27;</span>, <span class="hljs-string">&#x27;É&#x27;</span>, <span class="hljs-string">&#x27;\x84&#x27;</span>, <span class="hljs-string">&#x27;¼&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;»&#x27;</span>, <span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;Î&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;ë&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;\x06&#x27;</span>, <span class="hljs-string">&#x27;×&#x27;</span>, <span class="hljs-string">&#x27;\x1d&#x27;</span>, <span class="hljs-string">&#x27;é&#x27;</span>, <span class="hljs-string">&#x27;ª&#x27;</span>, <span class="hljs-string">&#x27;½&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>, <span class="hljs-string">&#x27;ý&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;í&#x27;</span>, <span class="hljs-string">&#x27;µ&#x27;</span>, <span class="hljs-string">&#x27;å&#x27;</span>]<br><span class="hljs-keyword">for</span> c, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(enc2, key2):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(c)^k),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="before-main">before main</h1><p>换表base64：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>enc = <span class="hljs-string">&#x27;AMHo7dLxUEabf6Z3PdWr6cOy75i4fdfeUzL17kaV7rG=&#x27;</span><br><br>model = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>  <span class="hljs-comment">#正常表</span><br><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;qaCpwYM2tO/RP0XeSZv8kLd6nfA7UHJ1No4gF5zr3VsBQbl9juhEGymc+WTxIiDK&#x27;</span>   <span class="hljs-comment">#被改变了的base64的表</span><br><span class="hljs-comment">#这段是排序归位</span><br>dnc = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    dnc += model[<span class="hljs-built_in">str</span>.find(enc[i])]<br><br><span class="hljs-built_in">print</span>(base64.b64decode(dnc).decode())<br></code></pre></td></tr></table></figure><h1 id="math">math</h1><p>(谢谢Mr.fish)</p><p>z3梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>v10 = [<span class="hljs-number">0x0000007E</span>, <span class="hljs-number">0x000000E1</span>, <span class="hljs-number">0x0000003E</span>, <span class="hljs-number">0x00000028</span>, <span class="hljs-number">0x000000D8</span>,<br>       <span class="hljs-number">0x000000FD</span>, <span class="hljs-number">0x00000014</span>, <span class="hljs-number">0x0000007C</span>, <span class="hljs-number">0x000000E8</span>, <span class="hljs-number">0x0000007A</span>,<br>       <span class="hljs-number">0x0000003E</span>, <span class="hljs-number">0x00000017</span>, <span class="hljs-number">0x00000064</span>, <span class="hljs-number">0x000000A1</span>, <span class="hljs-number">0x00000024</span>,<br>       <span class="hljs-number">0x00000076</span>, <span class="hljs-number">0x00000015</span>, <span class="hljs-number">0x000000B8</span>, <span class="hljs-number">0x0000001A</span>, <span class="hljs-number">0x0000008E</span>,<br>       <span class="hljs-number">0x0000003B</span>, <span class="hljs-number">0x0000001F</span>, <span class="hljs-number">0x000000BA</span>, <span class="hljs-number">0x00000052</span>, <span class="hljs-number">0x0000004F</span>]<br>v12 = [<span class="hljs-number">0x0000F9FE</span>, <span class="hljs-number">0x00008157</span>, <span class="hljs-number">0x000108B2</span>, <span class="hljs-number">0x0000D605</span>, <span class="hljs-number">0x0000F21B</span>,<br>       <span class="hljs-number">0x00010FF3</span>, <span class="hljs-number">0x00009146</span>, <span class="hljs-number">0x00011212</span>, <span class="hljs-number">0x0000CF76</span>, <span class="hljs-number">0x00010C46</span>,<br>       <span class="hljs-number">0x0000F76B</span>, <span class="hljs-number">0x000077DF</span>, <span class="hljs-number">0x000103BE</span>, <span class="hljs-number">0x0000C6F8</span>, <span class="hljs-number">0x0000ED8A</span>,<br>       <span class="hljs-number">0x0000BE90</span>, <span class="hljs-number">0x000075EC</span>, <span class="hljs-number">0x0000EAC8</span>, <span class="hljs-number">0x0000AE37</span>, <span class="hljs-number">0x0000CC29</span>,<br>       <span class="hljs-number">0x0000A828</span>, <span class="hljs-number">0x00005C6C</span>, <span class="hljs-number">0x0000AB4A</span>, <span class="hljs-number">0x0000836E</span>, <span class="hljs-number">0x0000ACEE</span>]<br>s = Solver()<br><br>x = [Int(<span class="hljs-string">&#x27;x[%d]&#x27;</span> % i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">25</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        s.add(v12[i * <span class="hljs-number">5</span> + j] == (<br>                    x[i * <span class="hljs-number">5</span>] * v10[j] + x[i * <span class="hljs-number">5</span> + <span class="hljs-number">1</span>] * v10[<span class="hljs-number">1</span> * <span class="hljs-number">5</span> + j] + x[i * <span class="hljs-number">5</span> + <span class="hljs-number">2</span>] * v10[<span class="hljs-number">2</span> * <span class="hljs-number">5</span> + j] + x[i * <span class="hljs-number">5</span> + <span class="hljs-number">3</span>] *<br>                    v10[<span class="hljs-number">3</span> * <span class="hljs-number">5</span> + j] + x[i * <span class="hljs-number">5</span> + <span class="hljs-number">4</span>] * v10[<span class="hljs-number">4</span> * <span class="hljs-number">5</span> + j]))<br><br><span class="hljs-keyword">if</span> (s.check()):<br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> (s.check() == sat): <span class="hljs-comment">#万一多解</span><br>        condition = []<br>        m = s.model()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[%d]&quot;</span> % k)<br>        <span class="hljs-built_in">print</span>(m)<br>        k += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">25</span>):<br>            condition.append(x[i] != <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;%s&quot;</span> % (m[x[i]])))<br>        s.add(Or(condition))<br>x[<span class="hljs-number">6</span>] = <span class="hljs-number">121</span><br>x[<span class="hljs-number">3</span>] = <span class="hljs-number">109</span><br>x[<span class="hljs-number">5</span>] = <span class="hljs-number">123</span><br>x[<span class="hljs-number">4</span>] = <span class="hljs-number">101</span><br>x[<span class="hljs-number">12</span>] = <span class="hljs-number">64</span><br>x[<span class="hljs-number">13</span>] = <span class="hljs-number">116</span><br>x[<span class="hljs-number">23</span>] = <span class="hljs-number">125</span><br>x[<span class="hljs-number">1</span>] = <span class="hljs-number">103</span><br>x[<span class="hljs-number">11</span>] = <span class="hljs-number">109</span><br>x[<span class="hljs-number">10</span>] = <span class="hljs-number">95</span><br>x[<span class="hljs-number">15</span>] = <span class="hljs-number">95</span><br>x[<span class="hljs-number">19</span>] = <span class="hljs-number">103</span><br>x[<span class="hljs-number">0</span>] = <span class="hljs-number">104</span><br>x[<span class="hljs-number">16</span>] = <span class="hljs-number">49</span><br>x[<span class="hljs-number">9</span>] = <span class="hljs-number">114</span><br>x[<span class="hljs-number">14</span>] = <span class="hljs-number">104</span><br>x[<span class="hljs-number">17</span>] = <span class="hljs-number">115</span><br>x[<span class="hljs-number">22</span>] = <span class="hljs-number">100</span><br>x[<span class="hljs-number">24</span>] = <span class="hljs-number">0</span><br>x[<span class="hljs-number">21</span>] = <span class="hljs-number">48</span><br>x[<span class="hljs-number">8</span>] = <span class="hljs-number">117</span><br>x[<span class="hljs-number">2</span>] = <span class="hljs-number">97</span><br>x[<span class="hljs-number">7</span>] = <span class="hljs-number">48</span><br>x[<span class="hljs-number">18</span>] = <span class="hljs-number">95</span><br>x[<span class="hljs-number">20</span>] = <span class="hljs-number">79</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="vidarcamera">VidarCamera</h1><p>通过XML找到关键类：com.example.android.camera2.basic.CameraActivity</p><p>再找到关键点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> m1onCreate$lambda0(EditText inputsomething, CameraActivity <span class="hljs-built_in">this</span>$<span class="hljs-number">0</span>, AlertDialog alertDialog, View view) &#123;<br>        Intrinsics.checkNotNullParameter(inputsomething, <span class="hljs-string">&quot;$inputsomething&quot;</span>);<br>        Intrinsics.checkNotNullParameter(<span class="hljs-built_in">this</span>$<span class="hljs-number">0</span>, <span class="hljs-string">&quot;this$0&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> inputsomething.getText().toString();<br>        <span class="hljs-keyword">if</span> (input.length() != <span class="hljs-number">40</span>) &#123;<br>            Toast.makeText(<span class="hljs-built_in">this</span>$<span class="hljs-number">0</span>, <span class="hljs-string">&quot;序列号不正确&quot;</span>, <span class="hljs-number">0</span>).show();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span>[] iArr = UIntArray.m167constructorimpl(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i += <span class="hljs-number">4</span>) &#123;<br>            UIntArray.m178setVXSXFK8(iArr, i / <span class="hljs-number">4</span>, UInt.m114constructorimpl(UInt.m114constructorimpl(UInt.m114constructorimpl(UInt.m114constructorimpl(input.charAt(i)) + UInt.m114constructorimpl(input.charAt(i + <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-string">&#x27;\b&#x27;</span>)) + UInt.m114constructorimpl(input.charAt(i + <span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-number">16</span>)) + UInt.m114constructorimpl(input.charAt(i + <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">24</span>)));<br>        &#125;<br>        <span class="hljs-type">int</span>[] iArr2 = <span class="hljs-built_in">this</span>$<span class="hljs-number">0.</span>m0encrypthkIa6DI(iArr);<br>        UInt[] uIntArr = &#123;UInt.m108boximpl(<span class="hljs-number">637666042</span>), UInt.m108boximpl(<span class="hljs-number">457511012</span>), UInt.m108boximpl(-<span class="hljs-number">2038734351</span>), UInt.m108boximpl(<span class="hljs-number">578827205</span>), UInt.m108boximpl(-<span class="hljs-number">245529892</span>), UInt.m108boximpl(-<span class="hljs-number">1652281167</span>), UInt.m108boximpl(<span class="hljs-number">435335655</span>), UInt.m108boximpl(<span class="hljs-number">733644188</span>), UInt.m108boximpl(<span class="hljs-number">705177885</span>), UInt.m108boximpl(-<span class="hljs-number">596608744</span>)&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> i2 + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (uIntArr[i2].m165unboximpl() != UIntArray.m173getpVg5ArA(iArr2, i2)) &#123;<br>                Toast.makeText(<span class="hljs-built_in">this</span>$<span class="hljs-number">0</span>, <span class="hljs-string">&quot;序列号不正确&quot;</span>, <span class="hljs-number">0</span>).show();<br>                <span class="hljs-keyword">return</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i3 &gt; <span class="hljs-number">9</span>) &#123;<br>                alertDialog.dismiss();<br>                <span class="hljs-keyword">return</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                i2 = i3;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>加密函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] m0encrypthkIa6DI(<span class="hljs-type">int</span>[] iArr) &#123;<br>        <span class="hljs-type">int</span> i;<br>        <span class="hljs-type">int</span>[] iArr2 = UIntArray.m167constructorimpl(<span class="hljs-number">4</span>);<br>        UIntArray.m178setVXSXFK8(iArr2, <span class="hljs-number">0</span>, <span class="hljs-number">2233</span>);<br>        UIntArray.m178setVXSXFK8(iArr2, <span class="hljs-number">1</span>, <span class="hljs-number">4455</span>);<br>        UIntArray.m178setVXSXFK8(iArr2, <span class="hljs-number">2</span>, <span class="hljs-number">6677</span>);<br>        UIntArray.m178setVXSXFK8(iArr2, <span class="hljs-number">3</span>, <span class="hljs-number">8899</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i2 &lt; <span class="hljs-number">9</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i4</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">do</span> &#123;<br>                i3++;<br>                i = i2 + <span class="hljs-number">1</span>;<br>                UIntArray.m178setVXSXFK8(iArr, i2, UInt.m114constructorimpl(UIntArray.m173getpVg5ArA(iArr, i2) + UInt.m114constructorimpl(UInt.m114constructorimpl(UInt.m114constructorimpl(UIntArray.m173getpVg5ArA(iArr2, UInt.m114constructorimpl(i4 &amp; <span class="hljs-number">3</span>)) + i4) ^ UInt.m114constructorimpl(UInt.m114constructorimpl(UInt.m114constructorimpl(UIntArray.m173getpVg5ArA(iArr, i) &lt;&lt; <span class="hljs-number">4</span>) ^ UInt.m114constructorimpl(UIntArray.m173getpVg5ArA(iArr, i) &gt;&gt;&gt; <span class="hljs-number">5</span>)) + UIntArray.m173getpVg5ArA(iArr, i))) ^ i4)));<br>                UIntArray.m178setVXSXFK8(iArr, i, UInt.m114constructorimpl(UIntArray.m173getpVg5ArA(iArr, i) + UInt.m114constructorimpl(UInt.m114constructorimpl(UInt.m114constructorimpl(UInt.m114constructorimpl(UIntArray.m173getpVg5ArA(iArr, i2) &lt;&lt; <span class="hljs-number">4</span>) ^ UInt.m114constructorimpl(UIntArray.m173getpVg5ArA(iArr, i2) &gt;&gt;&gt; <span class="hljs-number">5</span>)) + UIntArray.m173getpVg5ArA(iArr, i2)) ^ UInt.m114constructorimpl(UIntArray.m173getpVg5ArA(iArr2, UInt.m114constructorimpl(UInt.m114constructorimpl(i4 &gt;&gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>)) + i4))));<br>                i4 = UInt.m114constructorimpl(i4 + <span class="hljs-number">878077251</span>);<br>            &#125; <span class="hljs-keyword">while</span> (i3 &lt;= <span class="hljs-number">32</span>);<br>            i2 = i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> iArr;<br>    &#125;<br></code></pre></td></tr></table></figure><p>是魔改xtea</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decipher</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>])</span> </span>&#123;<br>    <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">2233</span>,<span class="hljs-number">4455</span>,<span class="hljs-number">6677</span>,<span class="hljs-number">8899</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], delta=<span class="hljs-number">878077251</span>, sum=delta*<span class="hljs-number">33</span>;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">33</span>; i++) &#123;<br>        sum -= delta;<br>        v1 -= (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>        v0 -= (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>]) ^ sum;<br>    &#125;<br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> enc[] = &#123;<span class="hljs-number">0x260202fa</span>,<span class="hljs-number">0x1b451064</span>,<span class="hljs-number">0x867b61f1</span>,<span class="hljs-number">0x228033c5</span>,<span class="hljs-number">0xf15d82dc</span>,<span class="hljs-number">0x9d8430b1</span>,<span class="hljs-number">0x19f2b1e7</span>,<span class="hljs-number">0x2bba859c</span>,<span class="hljs-number">0x2a08291d</span>,<span class="hljs-number">0xdc707918</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">8</span>; i &gt;=<span class="hljs-number">0</span> ; --i) &#123;<br>        <span class="hljs-built_in">decipher</span>(&amp;enc[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; ++j) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,enc[i]&amp;<span class="hljs-number">0xff</span>);<br>            enc[i] = enc[i] &gt;&gt; <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF write up</category>
      
      <category>HGAME</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
      <tag>hgame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见字节码</title>
    <link href="/2023/01/19/Python%E5%B8%B8%E8%A7%81%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <url>/2023/01/19/Python%E5%B8%B8%E8%A7%81%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="python字节码">Python字节码</h1><p>虽然python作为解释型语言，但是其也不是直接对源码进行解释</p><p>python解释器会将源码处理成字节码后，再借助python解释器运行程序</p><div class="note note-info">            <p>通过python自带的dis包可以将目标函数转化为字节码</p>          </div><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> dis<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">x,y,z</span>):<br>    a = <span class="hljs-number">1</span><br>    a += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;aaa&quot;</span>)<br>    fun(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">return</span><br><br>dis.dis(fun)<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs tap"><span class="hljs-number"> 46 </span>         <span class="hljs-number"> 0 </span>LOAD_CONST              <span class="hljs-number"> 1 </span>(1)<br>             <span class="hljs-number"> 2 </span>STORE_FAST              <span class="hljs-number"> 3 </span>(a)<br><br><span class="hljs-number"> 47 </span>         <span class="hljs-number"> 4 </span>LOAD_FAST               <span class="hljs-number"> 3 </span>(a)<br>             <span class="hljs-number"> 6 </span>LOAD_CONST              <span class="hljs-number"> 1 </span>(1)<br>             <span class="hljs-number"> 8 </span>INPLACE_ADD<br>            <span class="hljs-number"> 10 </span>STORE_FAST              <span class="hljs-number"> 3 </span>(a)<br><br><span class="hljs-number"> 48 </span>        <span class="hljs-number"> 12 </span>LOAD_GLOBAL             <span class="hljs-number"> 0 </span>(print)<br>            <span class="hljs-number"> 14 </span>LOAD_CONST              <span class="hljs-number"> 2 </span>(&#x27;aaa&#x27;)<br>            <span class="hljs-number"> 16 </span>CALL_FUNCTION            1<br>            <span class="hljs-number"> 18 </span>POP_TOP<br><br><span class="hljs-number"> 49 </span>        <span class="hljs-number"> 20 </span>LOAD_GLOBAL             <span class="hljs-number"> 1 </span>(fun)<br>            <span class="hljs-number"> 22 </span>LOAD_CONST              <span class="hljs-number"> 1 </span>(1)<br>            <span class="hljs-number"> 24 </span>LOAD_CONST              <span class="hljs-number"> 3 </span>(2)<br>            <span class="hljs-number"> 26 </span>LOAD_CONST              <span class="hljs-number"> 4 </span>(3)<br>            <span class="hljs-number"> 28 </span>CALL_FUNCTION            3<br>            <span class="hljs-number"> 30 </span>POP_TOP<br><br><span class="hljs-number"> 50 </span>        <span class="hljs-number"> 32 </span>LOAD_CONST              <span class="hljs-number"> 0 </span>(None)<br>            <span class="hljs-number"> 34 </span>RETURN_VALUE<br><br>进程已结束,退出代码0<br></code></pre></td></tr></table></figure><h1 id="常见指令">常见指令</h1><h2 id="一般指令与一元操作指令">一般指令与一元操作指令</h2><table><thead><tr class="header"><th>指令</th><th>作用</th></tr></thead><tbody><tr class="odd"><td>NOP</td><td>无作用，用于占位</td></tr><tr class="even"><td>POP_TOP</td><td>弹出栈顶元素</td></tr><tr class="odd"><td>LOAD_CONST</td><td>将读取的值推入栈</td></tr><tr class="even"><td>LOAD_GLOBAL</td><td>将全局变量压入栈</td></tr><tr class="odd"><td>STORE_FAST</td><td>将栈顶指令存入对应的局部变量</td></tr><tr class="even"><td>COMPARE_OP</td><td>比较操作符</td></tr><tr class="odd"><td>CALL_FUNCTION</td><td>调用函数</td></tr><tr class="even"><td>BUILD_SLICE</td><td>调用切片，跟的参数为切片的值的个数一般上到下为[Val1:Val2:Val3]</td></tr><tr class="odd"><td>JUMP_ABSOLUTE</td><td>向下跳转几句操作符，变量为跳转偏移量</td></tr><tr class="even"><td>UNARY_POSITIVE</td><td>实现Val1 = +Val1</td></tr><tr class="odd"><td>UNARY_NEGATIVE</td><td>实现Val1 = -Val1</td></tr><tr class="even"><td>UNARY_NOT</td><td>实现Val1 = not Val1</td></tr><tr class="odd"><td>UNARY_INVERT</td><td>实现Val1 = ~Val1</td></tr><tr class="even"><td>FOR_ITER</td><td>for循环</td></tr><tr class="odd"><td>GET_ITER</td><td>获取迭代器(一般后面跟循环)</td></tr><tr class="even"><td>GET_YIELD_FROM_ITER</td><td>获取yield生成器</td></tr></tbody></table><h2 id="二元操作指令">二元操作指令</h2><table><thead><tr class="header"><th>指令</th><th>作用</th></tr></thead><tbody><tr class="odd"><td>BINARY_POWER</td><td>乘方，栈顶为指数</td></tr><tr class="even"><td>BINARY_MULTIPLY</td><td>乘法</td></tr><tr class="odd"><td>BINARY_MATRIX_MULTIPLY</td><td>矩阵乘法，3.5引入的新功能</td></tr><tr class="even"><td>BINARY_FLOOR_DIVIDE</td><td>除法，向下取整</td></tr><tr class="odd"><td>BINARY_TRUE_DIVIDE</td><td>除法</td></tr><tr class="even"><td>BINARY_MODULO</td><td>取余</td></tr><tr class="odd"><td>BINARY_ADD</td><td>加法</td></tr><tr class="even"><td>BINARY_SUBTRACT</td><td>减法</td></tr><tr class="odd"><td>BINARY_SUBSCR</td><td>数组取下标，栈顶为下标</td></tr><tr class="even"><td>BINARY_LSHIFT</td><td>左移操作符</td></tr><tr class="odd"><td>BINARY_RSHIFT</td><td>右移操作符(除二向下取整)</td></tr><tr class="even"><td>BINARY_AND</td><td>按位与</td></tr><tr class="odd"><td>BINARY_XOR</td><td>异或</td></tr><tr class="even"><td>BINARY_OR</td><td>按位或</td></tr><tr class="odd"><td>STORE_SUBSCR</td><td>列表下标存储，如Val1[Val2] = Val3</td></tr><tr class="even"><td>DELETE_SUBSCR</td><td>列表下标存储，如del Val1[Val2]</td></tr></tbody></table><ul><li><p>自身操作指令，类似<code>b += 1</code>，就是上面有BINARY的指令将BINARY改为INPLACE</p><div class="note note-info">            <p>其他指令见<a href="https://docs.python.org/zh-cn/3.6/library/dis.html#python-bytecode-instructions">官方文档</a></p>          </div></li></ul>]]></content>
    
    
    <categories>
      
      <category>语言知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HGAME 2023 week1 wp</title>
    <link href="/2023/01/14/hgame2023-week1/"/>
    <url>/2023/01/14/hgame2023-week1/</url>
    
    <content type="html"><![CDATA[<h1 id="test_your_ida">test_your_IDA</h1><p>打开就能看到</p><p>hgame{te5t_y0ur_IDA}</p><h1 id="easyenc">easyenc</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">v8 = [<span class="hljs-number">0</span>] * <span class="hljs-number">10</span><br>v8[<span class="hljs-number">0</span>] = <span class="hljs-number">0x9FDFF04</span><br>v8[<span class="hljs-number">1</span>] = <span class="hljs-number">0xB0F301</span><br>v8[<span class="hljs-number">2</span>] = <span class="hljs-number">0xADF00500</span><br>v8[<span class="hljs-number">3</span>] = <span class="hljs-number">0x5170607</span><br>v8[<span class="hljs-number">4</span>] = <span class="hljs-number">0x17FD17EB</span><br>v8[<span class="hljs-number">5</span>] = <span class="hljs-number">0x1EE01EA</span><br>v8[<span class="hljs-number">6</span>] = <span class="hljs-number">0xFA05B1EA</span><br>v8[<span class="hljs-number">7</span>] = <span class="hljs-number">0xAC170108</span><br>v8[<span class="hljs-number">8</span>] = <span class="hljs-number">0xFDEA01EC</span><br>v8[<span class="hljs-number">9</span>] = <span class="hljs-number">0x60705F0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(v8[i] &amp; <span class="hljs-number">0xff</span>), end=<span class="hljs-string">&#x27;,&#x27;</span>)<br>        v8[i] = v8[i] &gt;&gt; <span class="hljs-number">8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(-<span class="hljs-number">7</span> &amp; <span class="hljs-number">0xff</span>))<br><br>enc = [<span class="hljs-number">0x4</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0x6</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x17</span>,<br>       <span class="hljs-number">0xea</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0x8</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0x6</span>,<br>       <span class="hljs-number">0xf9</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(((i + <span class="hljs-number">86</span>) &amp; <span class="hljs-number">0xff</span>) ^ <span class="hljs-number">0x32</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>hgame{4ddit1on_is_a_rever5ible_0peration}</p><h1 id="a_cup_of_tea">a_cup_of_tea</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>* EntryData)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Mup = EntryData[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Mdown = EntryData[<span class="hljs-number">1</span>];<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> delta = <span class="hljs-number">0x543210DD</span>;<br>    <span class="hljs-type">int</span> n=<span class="hljs-number">32</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        sum -= delta;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        Mdown -= ((Mup + <span class="hljs-number">0x3456789</span>) &lt;&lt; <span class="hljs-number">4</span>) ^ (Mup + sum) ^ ((Mup &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x45678901</span>);<br>        Mup -= ((Mdown &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">0x12345678</span>) ^ (Mdown + sum) ^ ((Mdown &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x23456789</span>);<br>        sum += delta;<br>    &#125;<br>    EntryData[<span class="hljs-number">0</span>] = Mup;<br>    EntryData[<span class="hljs-number">1</span>] = Mdown;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Buf2[<span class="hljs-number">8</span>];<br>    Buf2[<span class="hljs-number">0</span>] = <span class="hljs-number">0x2E63829D</span>;<br>    Buf2[<span class="hljs-number">1</span>] = <span class="hljs-number">0xC14E400F</span>;<br>    Buf2[<span class="hljs-number">2</span>] = <span class="hljs-number">0x73495F40</span>;<br>    Buf2[<span class="hljs-number">3</span>] = <span class="hljs-number">0x765F345F</span>;<br>    Buf2[<span class="hljs-number">4</span>] = <span class="hljs-number">0x5F797265</span>;<br>    Buf2[<span class="hljs-number">5</span>] = <span class="hljs-number">0x6C613368</span>;<br>    Buf2[<span class="hljs-number">6</span>] = <span class="hljs-number">0x5F796874</span>;<br>    Buf2[<span class="hljs-number">7</span>] = <span class="hljs-number">0x6E317264</span>;<br>    <span class="hljs-built_in">decrypt</span>(&amp;Buf2[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; ++j) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-type">char</span>)(Buf2[i]&amp;<span class="hljs-number">0xff</span>));<br>            Buf2[i] &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br>    std::cout&lt;&lt;(<span class="hljs-type">char</span>)<span class="hljs-number">0x6B</span>&lt;&lt;(<span class="hljs-type">char</span>)<span class="hljs-number">0x7</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>hgame{Te@_Is_4_very_h3althy_dr1nk}</p><p>乐死，和我犯一样的错</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> flag[] = &#123;<br>        <span class="hljs-number">0x2E63829D</span>, <span class="hljs-number">0xC14E400F</span>, <span class="hljs-number">0x9B39BFB9</span>, <span class="hljs-number">0x5A1F8B14</span>,<br>        <span class="hljs-number">0x61886DDE</span>, <span class="hljs-number">0x6565C6CF</span>, <span class="hljs-number">0x9F064F64</span>, <span class="hljs-number">0x236A43F6</span><br>    &#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">4</span>; x++) &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> x1 = flag[<span class="hljs-number">2</span>*x];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> x2 = flag[<span class="hljs-number">2</span>*x+<span class="hljs-number">1</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> v4 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) v4 -= <span class="hljs-number">0x543210DD</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        x2 -= (v4 + x1) ^ ((x1 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x45678901</span>) ^ (<span class="hljs-number">16</span> * (x1 + <span class="hljs-number">0x3456789</span>));<br>        x1 -= (v4 + x2) ^ (<span class="hljs-number">16</span> * x2 + <span class="hljs-number">0x12345678</span>) ^ ((x2 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x23456789</span>);<br>        v4 += <span class="hljs-number">0x543210DD</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, x1&amp;<span class="hljs-number">0xff</span>);<br>        x1 = x1 &gt;&gt; <span class="hljs-number">8</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, x2&amp;<span class="hljs-number">0xff</span>);<br>        x2 = x2 &gt;&gt; <span class="hljs-number">8</span>;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c%c&quot;</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x7D</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>hgame{Tea_15_4_v3ry_h3a1thy_drlnk}</p><h1 id="easyasm">easyasm</h1><p>hgame{welc0me_t0_re_wor1d!}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = [<span class="hljs-number">0x5b</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x56</span>,<br>       <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x4e</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i ^ <span class="hljs-number">0x33</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="encode">encode</h1><p>hgame{encode_is_easy_for_a_reverse_engineer}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = [<span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000D</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000B</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000E</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000E</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x0000000E</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x0000000D</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>,<span class="hljs-number">2</span>):<br>    a = enc[i] | enc[i+<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">4</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(a),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF write up</category>
      
      <category>HGAME</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
      <tag>hgame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gcc编译</title>
    <link href="/2023/01/14/gcc%E7%BC%96%E8%AF%91/"/>
    <url>/2023/01/14/gcc%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<p>GNU CC(简称gcc)是GNU项目中符合ANSI C标准的编译系统，能够编译用C、C++、Object C、Jave等多种语言编写的程序。gcc又可以作为交叉编译工具，它能够在当前CPU平台上为多种不同体系结构的硬件平台开发软件，非常适合在嵌入式领域的开发编译，如常用的arm-linux-gcc交叉编译工具</p><p>通常后跟一些选项和文件名来使用 GCC 编译器。gcc 命令的基本用法如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">gcc <span class="hljs-selector-attr">[options]</span> <span class="hljs-selector-attr">[filenames]</span><br><br>选项指定编译器怎样进行编译。<br></code></pre></td></tr></table></figure><h1 id="gcc-编译流程">gcc 编译流程</h1><h2 id="预处理-pre-processing">预处理-Pre-Processing</h2><p>gcc -E test.c -o test.i //.i文件</p><h2 id="编译-compiling">编译-Compiling</h2><p>gcc -S test.i -o test.s //.s文件</p><h2 id="汇编-assembling-.o文件">汇编-Assembling //.o文件</h2><p>gcc -c test.s -o test.o</p><h2 id="链接-linking-bin文件">链接-Linking //bin文件</h2><p>gcc test.o -o test</p><h1 id="gcc工程惯用">gcc工程惯用</h1><h2 id="编译">编译</h2><p>gcc -c test.c //.o文件，汇编</p><p>gcc -o test test.c //bin可执行文件</p><p>gcc test.c //a.out可执行文件</p><p>如果是c++ 直接将gcc改为g++即可。</p><h2 id="常用参数">常用参数</h2><p>1）-E参数 选项指示编译器仅对输入文件进行预处理。当这个选项被使用时, 预处理器的输出被送到标准输出而不是储存在文件里.</p><p>2）-S参数 编译选项告诉 GCC 在为 C 代码产生了汇编语言文件后停止编译。 GCC 产生的汇编语言文件的缺省扩展名是 .s 。 注：该编译后的文件没有符号表.</p><p>3）-c参数 选项告诉 GCC 仅把源代码编译为目标代码。缺省时 GCC 建立的目标代码文件有一个 .o 的扩展名。</p><p>4）-o参数 编译选项来为将产生的可执行文件用指定的文件名。</p><p>5）-O参数 选项告诉 GCC 对源代码进行基本优化。这些优化在大多数情况下都会使程序执行的更快。 -O2 选项告诉GCC 产生尽可能小和尽可能快的代码。 如-O2，-O3，-On（n 常为0—3）；-O 主要进行跳转和延迟退栈两种优化；-O2 除了完成-O1的优化之外，还进行一些额外的调整工作，如指令调整等。-O3 则包括循环展开和其他一些与处理特性相关的优化工作。选项将使编译的速度比使用 -O 时慢， 但通常产生的代码执行速度会更快。</p><p>如：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> test]<span class="hljs-meta"># gcc test.c -O3</span><br><br>[root<span class="hljs-symbol">@localhost</span> test]<span class="hljs-meta"># gcc -O3 test.c</span><br><br>[root<span class="hljs-symbol">@localhost</span> test]<span class="hljs-meta"># gcc -o tt test.c -O2</span><br><br>[root<span class="hljs-symbol">@localhost</span> test]<span class="hljs-meta"># gcc -O2 -o tt test.c</span><br></code></pre></td></tr></table></figure><p>6）调试选项-g和-pg GCC 支持数种调试和剖析选项，常用到的是 -g 和 -pg 。 　-g 选项告诉 GCC 产生能被 GNU 调试器使用的调试信息以便调试你的程序。GCC 提供了一个很多其他 C 编译器里没有的特性, 在 GCC 里你能使-g 和 -O (产生优化代码)联用。</p><p>　-pg 选项告诉 GCC 在编译好的程序里加入额外的代码。运行程序时, 产生 gprof 用的剖析信息以显示你的程序的耗时情况。</p><p>7） -l参数和-L参数 -l参数就是用来指定程序要链接的库，-l参数紧接着就是库名，那么库名跟真正的库文件名有什么关系呢？就拿数学库来说，他的库名是m，他的库文件名是libm.so，很容易看出，把库文件名的头lib和尾.so去掉就是库名了。</p><p>如： gcc xxx.c -lm( 动态数学库) -lpthread</p><p>好了现在我们知道怎么得到库名了，比如我们自已要用到一个第三方提供的库名字叫libtest.so，那么我们只要把libtest.so拷贝到 /usr/lib里，编译时加上-ltest参数，我们就能用上libtest.so库了（当然要用libtest.so库里的函数，我们还需要与 libtest.so配套的头文件）。放在/lib和/usr/lib和/usr/local/lib里的库直接用-l参数就能链接了，但如果库文件没放在这三个目录里，而是放在其他目录里， 这时我们只用-l参数的话，链接还是会出错，出错信息大概是：“/usr/bin/ld: cannot find-lxxx”，也就是链接 程序ld在那3个目录里找不到libxxx.so，这时另外一个参数-L就派上用场了，比如常用的X11的库 ，它放在/usr/X11R6/lib目录 下，我们编译时就要用-L/usr/X11R6/lib -lX11参数，-L参数跟着的是库文件所在的目录名。再比如我们把libtest.so放在/aaa/bbb/ccc目录下，那链接参数就是-L/aaa/bbb/ccc -ltest</p><p>另外，大部分libxxxx.so只是一个链接，以RH9为例，比如libm.so它链接到/lib/libm.so.x，/lib/libm.so.6 又链接到/lib/libm-2.3.2.so，如果没有这样的链接，还是会出错，因为ld只会找libxxxx.so，所以如果你要用到xxxx库，而只有libxxxx.so.x或者libxxxx-x.x.x.so，做一个链接就可以了ln -s libxxxx-x.x.x.so libxxxx.so手工来写链接参数总是很麻烦的，还好很多库开发包提供了生成链接参数的程序，名字一般叫xxxx-config，一般放在/usr/bin目录下，比如 gtk1.2的链接参数生成程序是gtk-config，执行gtk-config —libs就能得到以下输出”-L/usr/lib -L/usr/X11R6/lib -lgtk -lgdk -rdynamic -lgmodule -lglib -ldl -lXi -lXext -lX11 -lm”，这就是编译一个gtk1.2程序所需的gtk链接参数，xxx-config除了—libs参数外还有一个参数是—cflags用来生成头文件包含目录的，也就是-I参数，在下面我们将会讲到。你可以试试执行gtk-config —libs —cflags，看看输出结果。</p><p>现在的问题就是怎样用这些输出结果了，最笨的方法就是复制粘贴或者照抄，聪明的办法是在编译命令行里加入这个<code>xxxx-config --libs --cflags</code>，比如编译一个gtk程序：gcc gtktest.c <code>gtk-config --libs --cflags</code>这样差不多了。注意`不是单引号，而是1键左边那个键。</p><p>除了xxx-config以外，现在新的开发包一般都用pkg-config来生成链接参数，使用方法跟xxx-config类似，但xxx-config是针对特定的开发包，但pkg-config包含很多开发包的链接参数的生成，用pkg-config —list-all命令可以列出所支持的所有开发包，pkg-config的用法就是pkg-config pagName —libs —cflags，其中pagName是包名，是pkg-config—list-all里列出名单中的一个，比如gtk1.2的名字就是gtk+， pkg-config gtk+ —libs —cflags的作用跟gtk-config —libs —cflags是一样的。比如：</p><p>gcc gtktest.c <code>pkg-config gtk+ --libs --cflags</code>。</p><p>8） -include和-I参数</p><p>-include用来包含头文件，但一般情况下包含头文件都在源码里用＃i nclude xxxxxx实现，-include参数很少用。-I参数是用来指定头文件目录，/usr/include目录一般是不用指定的，gcc知道去那里找，但 是如果头文件不在/usr/icnclude里我们就要用-I参数指定了，比如头文件放在/myinclude目录里，那编译命令行就要加上-I/myinclude参数了，如果不加你会得到一个”xxxx.h: No such file or directory”的错误。-I参数可以用相对路径，比如头文件在当前目录，可以用-I.来指定。上面我们提到的—cflags参数就是用来生成-I参数的。</p><p>9）-Wall、-w 和 -v参数 -Wall 打印出gcc提供的警告信息 -w 关闭所有警告信息 -v 列出所有编译步骤</p><p>\10) -m64 64位</p><p>\11) -shared 将-fPIC生成的位置无关的代码作为动态库，一般情况下，-fPIC和-shared都是一起使用的。生成SO文件，共享库 -static 此选项将禁止使用动态库，所以，编译出来的东西，一般都很大，也不需要什么动态连接库，就可以运行</p><h1 id="几个相关的环境变量">几个相关的环境变量</h1><p>PKG_CONFIG_PATH：用来指定pkg-config用到的pc文件的路径，默认是/usr/lib/pkgconfig，pc文件是文本文件，扩展名是.pc，里面定义开发包的安装路径，Libs参数和Cflags参数等等。</p><p>CC：用来指定c编译器。 CXX：用来指定cxx编译器。 LIBS：跟上面的—libs作用差不多。 CFLAGS:跟上面的—cflags作用差不多。 CC，CXX，LIBS，CFLAGS手动编译时一般用不上，在做configure时有时用到，一般情况下不用管。</p><p>环境变量设定方法：export ENV_NAME=xxxxxxxxxxxxxxxxx</p><h1 id="关于交叉编译">关于交叉编译</h1><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">交叉编译通俗地讲就是在一种平台上编译出能运行在体系结构不同的另一种平台上，比如在我们地<span class="hljs-built_in">PC</span>平台(X86 CPU)上编译出能运行在<span class="hljs-meta">arm</span> CPU平台上的程序，编译得到的程序在X86 CPU平台上是不能运行的，必须放到<span class="hljs-meta">arm</span>  CPU 平台上才能运行。当然两个平台用的都是linux。这种方法在异平台移植和嵌入式开发时用得非常普遍。相对与交叉编译，我们平常做的编译就叫本地编译，也 就是在当前平台编译，编译得到的程序也是在本地执行。用来编译这种程序的编译器就叫交叉编译器，相对来说，用来做本地编译的就叫本地编译器，一般用的都是gcc，但这种gcc跟本地的gcc编译器是不一样的，需要在编译gcc时用特定的configure参数才能得到支持交叉编译的gcc。为了不跟本地编译器混淆，交叉编译器的名字一般都有前缀，比如armc-xxxx-linux-gnu-gcc，<span class="hljs-meta">arm</span>-xxxx-linux-gnu- g++ 等等<br></code></pre></td></tr></table></figure><p>交叉编译器的使用方法</p><p>使用方法跟本地的gcc差不多，但有一点特殊的是：必须用-L和-I参数指定编译器用arm系统的库和头文件，不能用本地(X86)的库（头文件有时可以用本地的）。</p><p>例子：</p><p>arm-xxxx-linux-gnu-gcc test.c -L/path/to/sparcLib -I/path/to/armInclude</p><h1 id="man-gcc-部分">man gcc 部分</h1><p>GCC(1) GNU GCC(1)</p><p>NAME</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">gcc</span> <span class="hljs-operator">-</span> <span class="hljs-variable">GNU</span> <span class="hljs-variable">project</span> <span class="hljs-built_in">C</span> <span class="hljs-variable">and</span> <span class="hljs-built_in">C</span><span class="hljs-operator">++</span> <span class="hljs-variable">compiler</span><br></code></pre></td></tr></table></figure><p>SYNOPSIS</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs inform7">gcc <span class="hljs-comment">[-c | -S | -E]</span> <span class="hljs-comment">[-std=standard]</span><br><br>    <span class="hljs-comment">[-g]</span> <span class="hljs-comment">[-pg]</span> <span class="hljs-comment">[-Olevel]</span><br><br>    <span class="hljs-comment">[-Wwarn...]</span> <span class="hljs-comment">[-pedantic]</span><br><br>    <span class="hljs-comment">[-Idir...]</span> <span class="hljs-comment">[-Ldir...]</span><br><br>    <span class="hljs-comment">[-Dmacro<span class="hljs-comment">[=defn]</span>...]</span> <span class="hljs-comment">[-Umacro]</span><br><br>    <span class="hljs-comment">[-foption...]</span> <span class="hljs-comment">[-mmachine-option...]</span><br><br>    <span class="hljs-comment">[-o outfile]</span> infile...<br><br>Only the most useful options <span class="hljs-keyword">are</span> listed here; see below for the remainder.  g++ accepts mostly the same options as <br>  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>语言知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ASM指令笔记0</title>
    <link href="/2023/01/14/ams-0/"/>
    <url>/2023/01/14/ams-0/</url>
    
    <content type="html"><![CDATA[<h2 id="mul-无符号数乘法指令-multiply">mul: 无符号数乘法指令 (MULtiply)</h2><p>格式: MUL OPRD 功能: 乘法操作.</p><blockquote><p>说明: 1. OPRD为通用寄存器或存储器操作数. \2. OPRD为源操作数,即作乘数.目的操作数是隐含的,即被乘数总是指定为累加器AX 或AL的内容.</p><p>​ \3. 16位乘法时,AX中为被乘数.8位乘法时,AL为被乘数.当16位乘法时,32位的乘积存于DX及AX中;8位乘法的16位乘积存于AX中.</p><p>​ \4. 操作过程: 字节相乘:(AX)&lt;--(AL)<em>OPRD,当结果的高位字节(AH)不等于0时,则CF＝1、OF＝1.字相乘: (DX)(AX)&lt;--(AX)</em>OPRD,当(DX)不等0时，则CF=1、OF=1</p><p>​ \5. 示例 1: MUL BETA[BX] ​ MUL DI ​ MUL BYTE PTR ALFA ​ 示例 2: 设在W1和W2字单元中各有一个16位数,若求其乘积并存于W3开始的字单元中,可用以下指令组实现: ​ MOV AX,W1 ​ MUL W2 ​ MOV W3,AX ​ MOV W3+2,DX</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs asm">.data<br>  val dd 8<br>.code<br>main proc<br>  ;8 位<br>  mov al, 0FFh<br>  mul byte ptr val<br>  PrintHex ax ;07F8<br>  <br>  ;16 位<br>  mov ax, 0FFFFh<br>  mul word ptr val<br>  PrintHex dx ;0007<br>  PrintHex ax ;FFF8<br>  <br>  ;32 位<br>  mov eax, 0FFFFFFFFh<br>  mul val<br>  PrintHex edx ;00000007<br>  PrintHex eax ;FFFFFFF8<br>  ret<br>main endp<br>end main<br></code></pre></td></tr></table></figure><hr /><p>## imul: 带符号数乘法指令 (Integer MULtiply)</p><p>格式: IMUL OPRD 功能: 完成两个带符号数的相乘</p><blockquote><p>说明: 1. 其中OPRD为任一通用寄存器或存储器操作数. \2. MUL指令对带符号相乘时,不能得到正确的结果. 例如: (AL)=255 (CL)=255</p><p>​ MUL CL ​ (AX)=65025 ​ 注意: 这对无符号数讲,结果是正确的,但对带符号数讲,相当于(-1)*(-1)结果应为+1,而65025对应的带符号数为-511,显然是不正确的.</p><p>​ \3. 8088/8086指令系统提供了专用的带符号数乘法和除法指令.IMUL即为带符号乘法指令,它能保证得到正确的带符号数的乘积.</p><p>操作过程:字节相乘:(AX)&lt;--(AL)<em>OPRD 字相乘: (DX)(AX)&lt;--(AX)</em>OPRD</p><p>​ \4. 本指令影响标志位CF、OF.</p><p>;影响 OF、CF 标志位;第一种指令格式:</p><p>;IMUL r/m ;单操作数;如果参数是 r8/m8, 将把 AL 做乘数, 结果放在 AX</p><p>;如果参数是 r16/m16, 将把 AX 做乘数, 结果放在 EAX</p><p>;如果参数是 r32/m32, 将把 EAX 做乘数, 结果放在 EDX:EAX</p><p>;以上这些都是和 MUL 一样的, 只是运算结果有时一样、有时不一样.</p><p>;IMUL 还有另外两种指令格式:</p><p>;IMUL r16/r32, r16/r32/m16/m32/i</p><p>;双操作数, (1)*(2) -&gt; (1)</p><p>;IMUL r16/r32, r16/r32/m16/m32, i</p><p>;三操作数, (2)*(3) -&gt; (1)</p></blockquote><p>----------------------------------------------------------------------------------------------------------------------------------------------------------------------</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs asm">.data<br>  val dd 8<br>.code<br>main proc<br>  ;8 位<br>  mov al, 0FFh<br>  PrintDec al<br>  imul byte ptr val<br>  PrintHex ax ;FFF8<br>  PrintDec ax ;-8<br>;-------------------------  <br>  mov al,-8 ;F8<br>  mul byte ptr val<br>  PrintDec ax ;1984<br>  PrintHex ax ;07C0<br>;-------------------------  <br>  ;16 位<br>  mov ax, 0FFFFh<br>  imul word ptr val<br>  PrintHex dx ;FFFF<br>  PrintHex ax ;FFF8<br>  <br>  ;32 位<br>  mov eax, 0FFFFFFFFh<br>  imul val<br>  PrintHex edx ;FFFFFFFF<br>  PrintHex eax ;FFFFFFF8<br>  ret<br>main endp<br>end main<br>;----------------------------------<br><br>.data<br>  val dd 8<br>.code<br>main proc<br>  ;IMUL 两个操作数<br>  mov eax, 7<br>  imul eax, val<br>  PrintDec eax ;56<br>  <br>  ;IMUL 三个操作数<br>  imul eax, val, 9<br>  PrintDec eax ;72<br>  ret<br>main endp<br>end main<br></code></pre></td></tr></table></figure><p>----------------------------------------------------------------------------------------------------------------------------------------------------------------------</p><h2 id="div-idiv-无符号除有符号除">div, idiv: 无符号除、有符号除</h2><blockquote><p>;它们没有定义对 EFLAGS 的影响 ;它们的指令格式: ;DIV r/m ;参数是除数</p><p>;如果参数是 r8/m8, 将把 AX 做被除数; 商 -&gt; AL, 余数 -&gt; AH ;如果参数是 r16/m16, 将把 DX:AX 做被除数; 商 -&gt; AX, 余数 -&gt; DX ;如果参数是 r32/m32, 将把 EDX:EAX 做被除数; 商 -&gt; EAX, 余数 -&gt; EDX</p></blockquote><p>----------------------------------------------------------------------------------------------------------------------------------------------------------------------</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs asm">.code<br>main proc<br>  ;除数是 8 位<br>  mov ax, 17  ;被除数<br>  mov cl, 3  ;除数<br>  div cl<br>  PrintDec al ;5 - 商<br>  PrintDec ah ;2 - 余数<br><br>  ;除数是 16 位<br>  mov dx, 0  ;<br>  mov ax, 17  ;dx:ax 是被除数<br>  mov cx, 3  ;cx  是除数<br>  div cx<br>  PrintDec ax ;5 - 商<br>  PrintDec dx ;2 - 余数<br><br>  ;除数是 32 位<br>  mov edx, 0  ;<br>  mov eax, 17 ;edx:eax 是被除数<br>  mov ecx, 3  ;ecx   是除数<br>  div ecx<br>  PrintDec eax ;5 - 商<br>  PrintDec edx ;2 - 余数<br>  ret<br>main endp<br>end main<br><br>\----------------------------------------------------------------------------------------------------------------------------------------------------------------------<br><br>.code<br>main proc<br>  ;除数是 8 位<br>  mov al, -17 <br>  cbw     ;ax 是被除数<br>  mov cl, 3  ;除数<br>  idiv cl<br>  PrintDec al ;-5 - 商<br>  PrintDec ah ;-2 - 余数<br>  <br>  ;除数是 16 位<br>  mov ax, -17 <br>  cwd     ;dx:ax 是被除数<br>  mov cx, 3  ;cx  是除数<br>  idiv cx<br>  PrintDec ax ;-5 - 商<br>  PrintDec dx ;-2 - 余数<br>  <br>  ;除数是 32 位<br>  mov eax, -17 <br>  cdq     ;edx:eax 是被除数<br>  mov ecx, 3  ;ecx   是除数<br>  idiv ecx<br>  PrintDec eax ;-5 - 商<br>  PrintDec edx ;-2 - 余数<br>  ret<br>main endp<br>end main<br><br><br></code></pre></td></tr></table></figure><hr /><h2 id="shlshrsalsar移位指令分为逻辑移位指令和算术移位指令">shl,shr,sal,sar:移位指令分为逻辑移位指令和算术移位指令</h2><ul><li><p>shl 与 shr 属于逻辑移位指令</p><p>shl逻辑左移指令</p></li></ul><p>将寄存器或内存单元的数据左移 最低位用 0 补充 最高位进入 CF</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asm">例子：<br><br> mov ax,8fh;mov ax,1000 1111b<br> shl ax,1;将ax左移一位<br><br> 执行后 (ax) = 0001 1110b;1eh<br> CF = 1<br></code></pre></td></tr></table></figure><p><strong>如果我们需要移动的位数大于1时，需要将移动位数存入 cl</strong> 例子：</p><p>比如说我们要移动 4 位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">mov cl,4<br>mov ax,9fh;mov ax,1000 1111b<br>shl ax,cl;左移位数为 cl 里的数据<br><br>执行后 (ax) = 1111 0000b;f0h<br>CF = 1<br></code></pre></td></tr></table></figure><p><strong>shr逻辑右移指令</strong></p><p>将寄存器或内存单元的数据右移 最低位用 0 补充 最低位进入 CF</p><p><strong>sal 与 sar 属于算术移位指令</strong></p><ul><li>sal 算术左移指令</li></ul><p>功能与shl相同</p><ul><li>sar 算术右移指令</li></ul><p>基本与shr相同 与shr补 0 不同，sar补位时最高位不变</p><h2 id="inc-加1指令">inc: 加1指令</h2><p>使目标寄存器数值加一</p>]]></content>
    
    
    <categories>
      
      <category>ASM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建</title>
    <link href="/2023/01/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/01/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="nodejs安装和配置环境">1 nodejs安装和配置环境</h1><h2 id="安装">1.1安装</h2><p>直接访问<a href="https://nodejs.org/en/">node.js官方网站</a>即可</p><p>注意一下安装路径就行</p><p>安装后的测试方法： 控制台输入</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>npm -v<br></code></pre></td></tr></table></figure><h2 id="配置环境变量">1.2配置环境变量</h2><p>如果是默认安装，就不用管。不过我很早之前就装好了，所以忘了要不要配置。</p><p>admin身份打开cmd</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">set</span><span class="hljs-built_in"> prefix </span><span class="hljs-string">&quot;****\nodejs\node_global&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;****\nodejs\node_cache&quot;</span><br></code></pre></td></tr></table></figure><p>注：****为nodejs安装位置</p><p>注意： 修改全局安装路径后，需要在系统环境变量Path中添加该路径，否则之后使用<code>npm install –global xxx，xxx</code>都报错找不到命令。</p><h1 id="安装git">2 安装git</h1><p><a href="https://git-scm.com/">git官方网站</a>下载即可，无脑下一步，带new的新功能不选就行</p><h1 id="安装hexo">3 安装hexo</h1><p>cmd指令，使用魔法会方便一点.</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g <span class="hljs-meta">#安装hexo</span><br></code></pre></td></tr></table></figure><h1 id="检查安装">4 检查安装</h1><ul><li>nodejs</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br></code></pre></td></tr></table></figure><ul><li>npm</li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> -v<br></code></pre></td></tr></table></figure><ul><li>git</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><ul><li>hexo</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo -v</span><br></code></pre></td></tr></table></figure><p>能看到版本号就是成功了</p><h1 id="创建仓库和ssh配置">5 创建仓库和ssh配置</h1><h2 id="建立仓库">5.1建立仓库</h2><p>仓库名字一定要是<strong>自己的名字+.github.io</strong></p><h2 id="生成ssh-keys">5.2生成ssh keys</h2><p>在本地博客文件夹的根目录下，使用右键的git bash here</p><p>可以先使用<code>ssh</code>测试是否安装ssh，一般git默认有安装。</p><p>本地生成ssh keys</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C “邮箱地址”<br></code></pre></td></tr></table></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110220153525.png" alt="image-20230110220153525" /><figcaption aria-hidden="true">image-20230110220153525</figcaption></figure><p>无脑回车，跟着提示走就行，注意第二次要输入y再回车。</p><p>在本地文件找到.ssh文件夹：git会提示在哪的：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110220327779.png" alt="image-20230110220327779" /><figcaption aria-hidden="true">image-20230110220327779</figcaption></figure><p>注意，被保存到github的是<strong>id_rsa.pub</strong>里面的内容，用记事本打开就行。</p><p>打开github，头像箭头，下拉选项setting <span class="math inline">\(\rightarrow\)</span> SSH and GPG keys <span class="math inline">\(\rightarrow\)</span> new ssh keys（新建ssh秘钥）</p><p>将id_rsa.pub里面的内容粘贴进去，名字随便取：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110220617771.png" alt="image-20230110220617771" /><figcaption aria-hidden="true">image-20230110220617771</figcaption></figure><p>为了后面流程，在github里顺便设置person access tokens（个人访问令牌）(Developer setting log <span class="math inline">\(\rightarrow\)</span> Generate new token)</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2capture_20220712160103385.bmp" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>下面勾选权限，建议全部勾选</p><p>点击生成，生成的序列号，要复制下来在存在本地，他只<strong>显示一次</strong>，如果忘记了，还需要重新生成一次。</p><hr /><p>测试ssh是否绑定成功：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110221236436.png" alt="image-20230110221236436" /><figcaption aria-hidden="true">image-20230110221236436</figcaption></figure><h1 id="搭建本地博客">6 搭建本地博客</h1><p>初始化hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">hexo init<br></code></pre></td></tr></table></figure><p>在本地博客的文件夹使用git Bash here</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110221758407.png" alt="image-20230110221758407" /><figcaption aria-hidden="true">image-20230110221758407</figcaption></figure><p>成功的标识：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">INFO</span>  <span class="hljs-keyword">Start</span> blogging <span class="hljs-keyword">with</span> Hexo!<br></code></pre></td></tr></table></figure><p>生成本地页面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">hexo s<br></code></pre></td></tr></table></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110221931877.png" alt="image-20230110221931877" /><figcaption aria-hidden="true">image-20230110221931877</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110221952190.png" alt="image-20230110221952190" /><figcaption aria-hidden="true">image-20230110221952190</figcaption></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo clean： <span class="hljs-meta">#清理编译文件</span><br>hexo g：<span class="hljs-meta">#编译项目</span><br>hexo s(<span class="hljs-keyword">server</span>) : <span class="hljs-meta">#本地预览运行项目</span><br></code></pre></td></tr></table></figure><h1 id="上传至本地博客">7 上传至本地博客</h1><h2 id="修改配置文件">7.1 修改配置文件</h2><p>修改blog文件夹的**_config.yml**</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2abc.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>注意冒号后面存在空格(<strong>图片的配置过时了，使用下面的</strong>)</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> 你的github地址/ssh链<br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure><h2 id="安装hexo-deployer-git-自动部署发布工具">7.2 安装hexo-deployer-git 自动部署发布工具</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110222753018.png" alt="image-20230110222753018" /><figcaption aria-hidden="true">image-20230110222753018</figcaption></figure><h2 id="编译文件生成页面">7.3 编译文件生成页面</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></td></tr></table></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230110222831566.png" alt="image-20230110222831566" /><figcaption aria-hidden="true">image-20230110222831566</figcaption></figure><h2 id="本地文件上传到github">7.4 本地文件上传到Github</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230111121628404.png" alt="image-20230111121628404" /><figcaption aria-hidden="true">image-20230111121628404</figcaption></figure><h1 id="安装主题">8 安装主题</h1><h2 id="选择主题">8.1 选择主题</h2><p>挑了一会，最后选择了Fuild主题。</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2image-20230111122238199.png" alt="image-20230111122238199" /><figcaption aria-hidden="true">image-20230111122238199</figcaption></figure><p>那就跟着github仓库的readme走了</p><p>参考：</p><p>https://hasegawaazusa.github.io/hexo-note.html?highlight=%E5%8D%9A%E5%AE%A2</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>how To Use This Blog</title>
    <link href="/2023/01/13/howToUseThisBlog/"/>
    <url>/2023/01/13/howToUseThisBlog/</url>
    
    <content type="html"><![CDATA[<h1 id="front-matter">Front-matter</h1><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">关于这个个人博客的文章的一些使用说明</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/Azureus.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-1</span><span class="hljs-number">-13</span> <span class="hljs-number">23</span><span class="hljs-string">:51:00</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr class="header"><th style="text-align: left;">参数</th><th style="text-align: left;">描述</th><th style="text-align: left;">默认值</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>layout</code></td><td style="text-align: left;">布局</td><td style="text-align: left;"><a href="https://hexo.io/zh-cn/docs/configuration#文章"><code>config.default_layout</code></a></td></tr><tr class="even"><td style="text-align: left;"><code>title</code></td><td style="text-align: left;">标题</td><td style="text-align: left;">文章的文件名</td></tr><tr class="odd"><td style="text-align: left;"><code>date</code></td><td style="text-align: left;">建立日期</td><td style="text-align: left;">文件建立日期</td></tr><tr class="even"><td style="text-align: left;"><code>updated</code></td><td style="text-align: left;">更新日期</td><td style="text-align: left;">文件更新日期</td></tr><tr class="odd"><td style="text-align: left;"><code>comments</code></td><td style="text-align: left;">开启文章的评论功能</td><td style="text-align: left;">true</td></tr><tr class="even"><td style="text-align: left;"><code>tags</code></td><td style="text-align: left;">标签（不适用于分页）</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><code>categories</code></td><td style="text-align: left;">分类（不适用于分页）</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><code>permalink</code></td><td style="text-align: left;">覆盖文章网址</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><code>excerpt</code></td><td style="text-align: left;">纯文本的页面摘要。使用 <a href="https://hexo.io/zh-cn/docs/tag-plugins#文章摘要和截断">该插件</a> 来格式化文本</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><code>disableNunjucks</code></td><td style="text-align: left;">启用时禁用 Nunjucks 标签 <code>&#123;&#123; &#125;&#125;</code>/<code>&#123;% %&#125;</code> 和 <a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a> 的渲染功能</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><code>lang</code></td><td style="text-align: left;">设置语言以覆盖 <a href="https://hexo.io/zh-cn/docs/internationalization#路径">自动检测</a></td><td style="text-align: left;">继承自 <code>_config.yml</code></td></tr><tr class="even"><td style="text-align: left;"><code>index_img</code></td><td style="text-align: left;">封面</td><td style="text-align: left;">无</td></tr></tbody></table><h1 id="博客修改">博客修改</h1><p><a href="https://hexo.fluid-dev.com/docs/guide">参考文档</a></p><h3 id="文章页顶部大图">文章页顶部大图</h3><p>默认显示<strong>主题配置</strong>中的 <code>post.banner_img</code>，如需要设置单个文章的 Banner，在 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter (opens new window)</a>中指定 <code>banner_img</code> 属性。</p><p>本地图片存放位置同上。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/post_banner.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Run_Before_or_after_main</title>
    <link href="/2022/11/19/Run-Before-or-after-main/"/>
    <url>/2022/11/19/Run-Before-or-after-main/</url>
    
    <content type="html"><![CDATA[<p>一般程序都是会从main函数开始进行，但事实上 main 函数之前也发生了很多操作。在 main 函数开始前，分成两部分 “系统调用部分” 和 “C++ 程序自身的部分”</p><h2 id="main-执行前">main() 执行前</h2><ol type="1"><li>入口函数对运行库和程序运行环镜进行初始化，包括 堆、I/O、线程、全局变量构造等等。</li><li>入口函数完成初始化后，调用 main 函数，正式开始执行程序主体部分。</li></ol><blockquote><p>main函数执行之前，主要就是初始化系统相关资源： 1.设置栈指针 2.初始化static静态和global全局变量，即data段的内容 3.将未初始化部分的赋初值：数值型short，int，long等为0，bool为FALSE，指针为NULL，等等，即.bss段的内容 4.将main函数的参数，argc，argv等传递给main函数，然后才真正运行main函数</p></blockquote><h2 id="main运行前可运行哪些代码">main运行前可运行哪些代码</h2><h3 id="全局对象的构造函数会在-main-函数之前执行">1.全局对象的构造函数会在 main 函数之前执行。</h3><p>例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">simpleClass</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">simpleClass</span>( )&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;simpleClass constructor..&quot;</span> &lt;&lt; endl;  <span class="hljs-comment">//step2</span><br>    &#125;<br>&#125;;<br><br>simpleClass g_objectSimple;         <span class="hljs-comment">//step1全局对象</span><br><span class="hljs-comment">// 这里调用了全局对象的构造函数</span><br> <br><span class="hljs-type">int</span> _tmain(<span class="hljs-type">int</span> argc, _TCHAR* argv[])&#123;  <span class="hljs-comment">//step3</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//可单步调试查看执行顺序为step1、step2、step3。</span><br></code></pre></td></tr></table></figure><h3 id="全局变量对象和静态变量对象的空间分配和赋初值">2. 全局变量、对象和静态变量、对象的空间分配和赋初值</h3><p>发生在执行main函数之前，而main函数执行完后， 还要去执行一些诸如释放空间、释放资源使用权等操作</p><h4 id="静态变量构建">静态变量构建</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">simpleClass</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">simpleClass</span>( )&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;simpleClass constructor..&quot;</span> &lt;&lt; endl;       <span class="hljs-comment">//step2 </span><br>       &#125;<br>&#125;;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">simpleClassTwo</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">static</span> simpleClass m_sSimpleClass;<br>&#125;;<br><br>simpleClass simpleClassTwo::m_sSimpleClass = <span class="hljs-built_in">simpleClass</span>(); <span class="hljs-comment">//step1 静态对象</span><br><br><span class="hljs-type">int</span> _tmain(<span class="hljs-type">int</span> argc, _TCHAR* argv[])&#123;   <span class="hljs-comment">//step3</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="全局变量的赋值函数">全局变量的赋值函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;before&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> A = <span class="hljs-built_in">f</span>();<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="全局lambda变量调用">全局lambda变量调用</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = []() &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;a&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;();<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;b&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="进程启动后要执行一些初始化代码">3.进程启动后，要执行一些初始化代码</h3><p>（如设置环境变量等），然后跳转到main执行。全局对象的构造也在main之前</p><blockquote><p>在写程序时，比如一个模块，通常要有 initialize 和 de-initialize，但是我们写 C 程序的时候为什么有些模块没有这两个过程么呢？比如我们程序从 main 开始就可以 malloc，free，但是我们在 main 里面却没有初始化堆。再比如在 main 里面可以直接 printf，可是我们并没有打开标准输出文件啊。</p></blockquote><blockquote><p>操作系统装载程序之后，首先运行的代码并不是main的第一行，而是某些特别的代码，这些代码准备好main函数执行说需要的环境，并且负责调用main函数，这时候你才可以再main函数里放心大胆的写各种代码：申请内存、使用系统调用、触发异常、访问IO。在main函数返回之后，他会记录main函数的返回值，调用atexit注册的函数，然后结束进程。 ——《程序员的自我修养–链接、装载与库》</p></blockquote><h4 id="那main-执行后呢">那main() 执行后呢？</h4><p>main函数执行完毕后，返回到入口函数，入口函数进行清理工作，包括全局变量的析构、堆销毁、关闭I/O等，然后系统调用结束进程。</p><blockquote><p>main函数结束可以通过 return 0;或者 exit(0) 来结束，此时程序并非直接结束，而是先调用一些终止处理程序然后再结束。可以使用int atexit(void (*func)(void));来追加自定义终止处理程序，终止处理程序由 exit函数自动调用，调用顺序与登记顺序相反。</p></blockquote><blockquote><p>如果main函数发生了异常或者使用_exit和_Exit来退出程序，则不会调用终止处理程序。</p></blockquote><p>微信的mars库中对运行在main前和main后的函数封装方法</p><blockquote><p>运行前用全局变量和运行后用atexit函数， 使用BOOT_RUN_STARTUP的函数，在main运行前调用 使用BOOT_RUN_EXIT的函数，在main运行后调用</p></blockquote><p>使用全局变量和atexit实现函数在main运行前和运行后运行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QCoreApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtDebug&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tmp</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Tmp</span>() &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO;<br>    &#125;<br>    ~<span class="hljs-built_in">Tmp</span>() &#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main_before</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main_after</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">doExit</span><span class="hljs-params">(<span class="hljs-type">void</span> (*func)(<span class="hljs-type">void</span>))</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">atexit</span>(func);<br>&#125;<br><br><span class="hljs-type">int</span> nBefore = <span class="hljs-built_in">main_before</span>();<br><span class="hljs-type">int</span> nAfter = <span class="hljs-built_in">doExit</span>(main_after);<br>Tmp oTmp;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span>&#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; Q_FUNC_INFO;<br><span class="hljs-comment">//    QCoreApplication app(argc, argv);</span><br><span class="hljs-comment">//    return app.exec(); // 进入qt的事件循环</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/* 输出</span><br><span class="hljs-comment">int main_before()</span><br><span class="hljs-comment">Tmp::Tmp()</span><br><span class="hljs-comment">int main(int, char**)</span><br><span class="hljs-comment">Tmp::~Tmp()</span><br><span class="hljs-comment">void main_after()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="通过关键字__attribute__">4. 通过关键字__attribute__</h3><p>让一个函数在主函数之前运行，进行一些数据初始化、模块加载验证等。</p><blockquote><p>如果是GNUC的编译器（gcc，clang），就在你要执行的方法前加上 <strong>attribute</strong>((constructor))</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br>__attribute__((constructor)) <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;main\n&quot;</span>); <span class="hljs-comment">//从运行结果来看，并没有执行main函数</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>同理，如果想要在main函数结束之后运行， 可加上__attribute__((destructor))</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>);<br>    <span class="hljs-comment">//exit(0);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>__attribute__((constructor))<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;before\n&quot;</span>);<br>    <span class="hljs-built_in">func</span>();<br>&#125;<br><br><br>__attribute__((destructor))<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;after\n&quot;</span>);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;main\n&quot;</span>); <span class="hljs-comment">//从运行结果来看，并没有执行main函数</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ALG_ID_一些哈希的特征码</title>
    <link href="/2022/10/14/ALG-ID-%E4%B8%80%E4%BA%9B%E5%93%88%E5%B8%8C%E7%9A%84%E7%89%B9%E5%BE%81%E7%A0%81/"/>
    <url>/2022/10/14/ALG-ID-%E4%B8%80%E4%BA%9B%E5%93%88%E5%B8%8C%E7%9A%84%E7%89%B9%E5%BE%81%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<table><thead><tr class="header"><th style="text-align: left;">标识符</th><th style="text-align: left;">值</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">CALG_3DES</td><td style="text-align: left;">0x00006603</td><td style="text-align: left;"><a href="https://docs.microsoft.com/zh-CN/windows/desktop/SecGloss/t-gly"><em>三重 DES</em></a> 加密算法。</td></tr><tr class="even"><td style="text-align: left;">CALG_3DES_112</td><td style="text-align: left;">0x00006609</td><td style="text-align: left;">双密钥 <a href="https://docs.microsoft.com/zh-CN/windows/desktop/SecGloss/t-gly"><em>三重 DES</em></a> 加密，有效密钥长度等于 112 位。</td></tr><tr class="odd"><td style="text-align: left;">CALG_AES</td><td style="text-align: left;">0x00006611</td><td style="text-align: left;">高级加密标准 (AES) 。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-aes-cryptographic-provider">Microsoft AES 加密提供程序</a>支持此算法。</td></tr><tr class="even"><td style="text-align: left;">CALG_AES_128</td><td style="text-align: left;">0x0000660e</td><td style="text-align: left;">128 位 AES。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-aes-cryptographic-provider">Microsoft AES 加密提供程序</a>支持此算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_AES_192</td><td style="text-align: left;">0x0000660f</td><td style="text-align: left;">192 位 AES。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-aes-cryptographic-provider">Microsoft AES 加密提供程序</a>支持此算法。</td></tr><tr class="even"><td style="text-align: left;">CALG_AES_256</td><td style="text-align: left;">0x00006610</td><td style="text-align: left;">256 位 AES。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-aes-cryptographic-provider">Microsoft AES 加密提供程序</a>支持此算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_AGREEDKEY_ANY</td><td style="text-align: left;">0x0000aa03</td><td style="text-align: left;">Diffie-Hellman 同意密钥句柄的临时算法标识符。</td></tr><tr class="even"><td style="text-align: left;">CALG_CYLINK_MEK</td><td style="text-align: left;">0x0000660c</td><td style="text-align: left;">一种算法，用于创建具有奇偶校验位和零键位的 40 位 DES 密钥，使其密钥长度为 64 位。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基本加密提供程序</a>支持此算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_DES</td><td style="text-align: left;">0x00006601</td><td style="text-align: left;">DES 加密算法。</td></tr><tr class="even"><td style="text-align: left;">CALG_DESX</td><td style="text-align: left;">0x00006604</td><td style="text-align: left;">DESX 加密算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_DH_EPHEM</td><td style="text-align: left;">0x0000aa02</td><td style="text-align: left;">Diffie-Hellman临时密钥交换算法。</td></tr><tr class="even"><td style="text-align: left;">CALG_DH_SF</td><td style="text-align: left;">0x0000aa01</td><td style="text-align: left;">Diffie-Hellman存储和转发密钥交换算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_DSS_SIGN</td><td style="text-align: left;">0x00002200</td><td style="text-align: left;">DSA <a href="https://docs.microsoft.com/zh-CN/windows/desktop/SecGloss/p-gly"><em>公钥</em></a> 签名算法。</td></tr><tr class="even"><td style="text-align: left;">CALG_ECDH</td><td style="text-align: left;">0x0000aa05</td><td style="text-align: left;">椭圆曲线Diffie-Hellman密钥交换算法。[！注意] 此算法仅通过 <a href="https://docs.microsoft.com/zh-CN/windows/desktop/SecCNG/cng-portal">加密 API 支持：下一代</a>。 <strong>Windows Server 2003 和 Windows XP：</strong>不支持此算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_ECDH_EPHEM</td><td style="text-align: left;">0x0000ae06</td><td style="text-align: left;">临时椭圆曲线Diffie-Hellman密钥交换算法。[！注意] 此算法仅通过 <a href="https://docs.microsoft.com/zh-CN/windows/desktop/SecCNG/cng-portal">加密 API 支持：下一代</a>。 <strong>Windows Server 2003 和 Windows XP：</strong>不支持此算法。</td></tr><tr class="even"><td style="text-align: left;">CALG_ECDSA</td><td style="text-align: left;">0x00002203</td><td style="text-align: left;">椭圆曲线数字签名算法。[！注意] 此算法仅通过 <a href="https://docs.microsoft.com/zh-CN/windows/desktop/SecCNG/cng-portal">加密 API 支持：下一代</a>。 <strong>Windows Server 2003 和 Windows XP：</strong>不支持此算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_ECMQV</td><td style="text-align: left;">0x0000a001</td><td style="text-align: left;">椭圆曲线 Menezes、Qu 和 Vanstone (MQV) 密钥交换算法。 不支持此算法。</td></tr><tr class="even"><td style="text-align: left;">CALG_HASH_REPLACE_OWF</td><td style="text-align: left;">0x0000800b</td><td style="text-align: left;">函数哈希算法的一种方式。</td></tr><tr class="odd"><td style="text-align: left;">CALG_HUGHES_MD5</td><td style="text-align: left;">0x0000a003</td><td style="text-align: left;">休斯 MD5 哈希算法。</td></tr><tr class="even"><td style="text-align: left;">CALG_HMAC</td><td style="text-align: left;">0x00008009</td><td style="text-align: left;">HMAC 键控哈希算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基本加密提供程序</a>支持此算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_KEA_KEYX</td><td style="text-align: left;">0x0000aa04</td><td style="text-align: left;">KEA 密钥交换算法 (FORTEZZA) 。 不支持此算法。</td></tr><tr class="even"><td style="text-align: left;">CALG_MAC</td><td style="text-align: left;">0x00008005</td><td style="text-align: left;"><a href="https://docs.microsoft.com/zh-CN/windows/desktop/SecGloss/m-gly"><em>MAC</em></a> 键控哈希算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基本加密提供程序</a>支持此算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_MD2</td><td style="text-align: left;">0x00008001</td><td style="text-align: left;">MD2 哈希算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基本加密提供程序</a>支持此算法。</td></tr><tr class="even"><td style="text-align: left;">CALG_MD4</td><td style="text-align: left;">0x00008002</td><td style="text-align: left;">MD4 哈希算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_MD5</td><td style="text-align: left;">0x00008003</td><td style="text-align: left;">MD5 哈希算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基础加密提供程序</a>支持此算法。</td></tr><tr class="even"><td style="text-align: left;">CALG_NO_SIGN</td><td style="text-align: left;">0x00002000</td><td style="text-align: left;">无签名算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_OID_INFO_CNG_ONLY</td><td style="text-align: left;">0xffffffff</td><td style="text-align: left;">该算法仅在 CNG 中实现。 宏IS_SPECIAL_OID_INFO_ALGID可用于确定加密算法是否仅受 CNG 函数支持。</td></tr><tr class="even"><td style="text-align: left;">CALG_OID_INFO_PARAMETERS</td><td style="text-align: left;">0xfffffffe</td><td style="text-align: left;">算法在编码的参数中定义。 仅使用 CNG 支持该算法。 宏IS_SPECIAL_OID_INFO_ALGID可用于确定加密算法是否仅受 CNG 函数支持。</td></tr><tr class="odd"><td style="text-align: left;">CALG_PCT1_MASTER</td><td style="text-align: left;">0x00004c04</td><td style="text-align: left;">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr><tr class="even"><td style="text-align: left;">CALG_RC2</td><td style="text-align: left;">0x00006602</td><td style="text-align: left;">RC2 块加密算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基础加密提供程序</a>支持此算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_RC4</td><td style="text-align: left;">0x00006801</td><td style="text-align: left;">RC4 流加密算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基础加密提供程序</a>支持此算法。</td></tr><tr class="even"><td style="text-align: left;">CALG_RC5</td><td style="text-align: left;">0x0000660d</td><td style="text-align: left;">RC5 块加密算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_RSA_KEYX</td><td style="text-align: left;">0x0000a400</td><td style="text-align: left;">RSA 公钥交换算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基础加密提供程序</a>支持此算法。</td></tr><tr class="even"><td style="text-align: left;">CALG_RSA_SIGN</td><td style="text-align: left;">0x00002400</td><td style="text-align: left;">RSA 公钥签名算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基础加密提供程序</a>支持此算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_SCHANNEL_ENC_KEY</td><td style="text-align: left;">0x00004c07</td><td style="text-align: left;">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr><tr class="even"><td style="text-align: left;">CALG_SCHANNEL_MAC_KEY</td><td style="text-align: left;">0x00004c03</td><td style="text-align: left;">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr><tr class="odd"><td style="text-align: left;">CALG_SCHANNEL_MASTER_HASH</td><td style="text-align: left;">0x00004c02</td><td style="text-align: left;">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr><tr class="even"><td style="text-align: left;">CALG_SEAL</td><td style="text-align: left;">0x00006802</td><td style="text-align: left;">SEAL 加密算法。 不支持此算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_SHA</td><td style="text-align: left;">0x00008004</td><td style="text-align: left;">SHA 哈希算法。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基础加密提供程序</a>支持此算法。</td></tr><tr class="even"><td style="text-align: left;">CALG_SHA1</td><td style="text-align: left;">0x00008004</td><td style="text-align: left;">与 <strong>CALG_SHA</strong>相同。 <a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/microsoft-base-cryptographic-provider">Microsoft 基础加密提供程序</a>支持此算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_SHA_256</td><td style="text-align: left;">0x0000800c</td><td style="text-align: left;">256 位 SHA 哈希算法。 Microsoft 增强型 RSA 和 AES 加密提供程序支持此算法。<strong>Windows SP3 的 XP：</strong>Microsoft 增强型 RSA 和 AES 加密提供程序 (原型) 支持此算法。 <strong>Windows SP2 的 XP，Windows SP1 和 Windows XP 的 XP：</strong>不支持此算法。</td></tr><tr class="even"><td style="text-align: left;">CALG_SHA_384</td><td style="text-align: left;">0x0000800d</td><td style="text-align: left;">384 位 SHA 哈希算法。 Microsoft 增强型 RSA 和 AES 加密提供程序支持此算法。<strong>Windows SP3 的 XP：</strong>Microsoft 增强型 RSA 和 AES 加密提供程序 (原型) 支持此算法。 <strong>Windows SP2 的 XP，Windows SP1 和 Windows XP 的 XP：</strong>不支持此算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_SHA_512</td><td style="text-align: left;">0x0000800e</td><td style="text-align: left;">512 位 SHA 哈希算法。 Microsoft 增强型 RSA 和 AES 加密提供程序支持此算法。<strong>Windows SP3 的 XP：</strong>Microsoft 增强型 RSA 和 AES 加密提供程序 (原型) 支持此算法。 <strong>Windows SP2 的 XP，Windows SP1 和 Windows XP 的 XP：</strong>不支持此算法。</td></tr><tr class="even"><td style="text-align: left;">CALG_SKIPJACK</td><td style="text-align: left;">0x0000660a</td><td style="text-align: left;">SKIPjack 块加密算法 (FORTEZZA) 。 不支持此算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_SSL2_MASTER</td><td style="text-align: left;">0x00004c05</td><td style="text-align: left;">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr><tr class="even"><td style="text-align: left;">CALG_SSL3_MASTER</td><td style="text-align: left;">0x00004c01</td><td style="text-align: left;">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr><tr class="odd"><td style="text-align: left;">CALG_SSL3_SHAMD5</td><td style="text-align: left;">0x00008008</td><td style="text-align: left;">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr><tr class="even"><td style="text-align: left;">CALG_TEK</td><td style="text-align: left;">0x0000660b</td><td style="text-align: left;">TEK (FORTEZZA) 。 不支持此算法。</td></tr><tr class="odd"><td style="text-align: left;">CALG_TLS1_MASTER</td><td style="text-align: left;">0x00004c06</td><td style="text-align: left;">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr><tr class="even"><td style="text-align: left;">CALG_TLS1PRF</td><td style="text-align: left;">0x0000800a</td><td style="text-align: left;">由Schannel.dll操作系统使用。 应用程序不应使用此 <strong>ALG_ID</strong> 。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>加密算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>base家族</title>
    <link href="/2022/10/14/base%E5%AE%B6%E6%97%8F/"/>
    <url>/2022/10/14/base%E5%AE%B6%E6%97%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="base64">base64</h1><h2 id="换表的情况">换表的情况</h2><p>无法直接使用<code>base64.b64decode(enc)</code>来直接解出，但是可以将密文排序为原表的密文再解</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>enc = <span class="hljs-string">&#x27;AMHo7dLxUEabf6Z3PdWr6cOy75i4fdfeUzL17kaV7rG=&#x27;</span><br><br>model = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>  <span class="hljs-comment">#正常表</span><br><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;qaCpwYM2tO/RP0XeSZv8kLd6nfA7UHJ1No4gF5zr3VsBQbl9juhEGymc+WTxIiDK&#x27;</span><span class="hljs-comment">#被改变了的base64的表</span><br><span class="hljs-comment">#这段是排序归位</span><br>dnc = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    dnc += model[<span class="hljs-built_in">str</span>.find(enc[i])]<br><br><span class="hljs-built_in">print</span>(base64.b64decode(dnc).decode())<br></code></pre></td></tr></table></figure><p>或者通过建立映射字典的方式来还原(感谢青丝独奏)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>newtable = <span class="hljs-built_in">bytes</span>(i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>+<span class="hljs-number">64</span>))<br><span class="hljs-comment"># print(newtable)</span><br>table = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br>bbb = <span class="hljs-built_in">str</span>.maketrans(<span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(newtable, table)))<br><span class="hljs-comment"># print(bbb)</span><br>flag = <span class="hljs-built_in">bytes</span>(flag).decode()<br>fff = flag.translate(bbb)<br><span class="hljs-comment"># print(fff)</span><br>res = base64.b64decode(fff)<br></code></pre></td></tr></table></figure><h1 id="base58">base58</h1><p>md，整了不少，装不上，那就毛一个脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">b58encode</span>(<span class="hljs-params">tmp: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    tmp = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">ord</span>, tmp))<br>    temp = tmp[<span class="hljs-number">0</span>]<br>    base58 = <span class="hljs-string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(tmp) - <span class="hljs-number">1</span>):<br>        temp = temp * <span class="hljs-number">256</span> + tmp[i + <span class="hljs-number">1</span>]<br>    tmp = []<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        tmp.insert(<span class="hljs-number">0</span>, temp % <span class="hljs-number">58</span>)<br>        temp = temp // <span class="hljs-number">58</span><br>        <span class="hljs-keyword">if</span> temp == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br>    temp = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp:<br>        temp += base58[i]<br>    <span class="hljs-keyword">return</span> temp<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b58decode</span>(<span class="hljs-params">tmp: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">import</span> binascii<br>    base58 = <span class="hljs-string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span><br>    temp = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp:<br>        temp.append(base58.index(i))<br>    tmp = temp[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(temp) - <span class="hljs-number">1</span>):<br>        tmp = tmp * <span class="hljs-number">58</span> + temp[i + <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> binascii.unhexlify(<span class="hljs-built_in">hex</span>(tmp)[<span class="hljs-number">2</span>:].encode(<span class="hljs-string">&quot;utf-8&quot;</span>)).decode(<span class="hljs-string">&quot;UTF-8&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>加密算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SM4</title>
    <link href="/2022/10/14/SM4/"/>
    <url>/2022/10/14/SM4/</url>
    
    <content type="html"><![CDATA[<h1 id="一概述">一、概述</h1><p>SM4是一种<strong>分组密码算法</strong>，由我国国家密码管理局在2012年发布，常用于无线互联网加密等领域。</p><p>其<strong>分组长度为128位</strong>（即<strong>16字节</strong>，<strong>4字</strong>），<strong>密钥长度也为128位</strong>（即<strong>16字节</strong>，<strong>4字</strong>）。其加解密过程采用了<strong>32轮</strong>迭代机制（与DES、AES类似），每一轮需要一个轮密钥（与DES、AES类似）。</p><h1 id="二加密过程">二、加密过程</h1><h2 id="加密过程概述">1、加密过程概述</h2><p>SM4的分组长度为4字，因此，其<strong>输入是4字的明文</strong> <span class="math inline">\((X0,X1,X2,X3)\)</span> （其中 Xi 表示一个32位的字），经过加密后，得到的<strong>输出是4字的密文</strong> $(Y0,Y1,Y2,Y3) $（其中 Yi 表示一个32位的字）。</p><p>这个加密过程分为两步，由<strong>32次轮迭代</strong>和<strong>1次反序变换</strong>组成。</p><h2 id="算法流程">2、算法流程</h2><p>SM4 算法主要包含异或、移位以及盒变换操作。它分为密钥拓展和加/解密两个模块，这两个模块的流程大同小异 其中，移位变换是指循环左移；盒变换是一个将8bit输入映射到8bit输出的变换，是一个固定的变换 下图是 SM4 的加解密（左）和密钥拓展（右）的流程图</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo/1215563-20201214211048328-557839971.jpg" alt="pic" /><figcaption aria-hidden="true">pic</figcaption></figure><h3 id="加解密">(1) 加解密</h3><ul><li>输入的明文为 128bit 的数据，将其按位拆分成 4 个 32bit 的数据 <span class="math inline">\(x0,x1,x2,x3\)</span> 当<span class="math inline">\(i=0\)</span> 时为第一次轮变换，一直进行到$ i=31$ 结束</li><li><span class="math inline">\(xi\)</span> 暂时不做处理，将 <span class="math inline">\(x_{i+1},x_{i+2},x_{i+3}\)</span> 和轮密钥 <span class="math inline">\(rk_i\)</span> 异或得到一个 32bit 的数据，作为盒变换的输入 即 <span class="math inline">\(sbox\_input=x_{i+1}⊕x_{i+2}⊕x_{i+3}⊕rk_i\)</span>，<span class="math inline">\(⊕\)</span> 符号代表异或运算</li><li>将 <span class="math inline">\(sbox\_input\)</span> 拆分成 4 个 8bit 数据，分别进行盒变换，之后再将 4 个 8bit 输出合并成一个 32bit 的 <span class="math inline">\(sbox\_output\)</span></li><li>将刚才获得的 <span class="math inline">\(sbox\_output\)</span> 分别循环左移 2，10，18，24 位，得到 4 个 32bit 的结果，记移位结果为 <span class="math inline">\(y_2,y_{10},y_{18},y_{24}\)</span></li><li>将移位的结果 <span class="math inline">\(y_2,y_{10},y_{18},y_{24}\)</span> 与盒变换输出 <span class="math inline">\(sbox\_output\)</span> 和 <span class="math inline">\(x_i\)</span>异或，得到 <span class="math inline">\(x_{i+4}\)</span> 即 <span class="math inline">\(x_{i+4}=sbox\_output⊕y_2⊕y_{10}⊕y_{18}⊕y_{24}⊕x_i\)</span></li><li>至此完成了一轮的加解密运算 在实际加解密过程中，上述运算要执行 32 轮，同时使用 32 个不同的 <span class="math inline">\(rk_i\)</span>，<span class="math inline">\(rk_i\)</span> 由密钥拓展生成</li><li>最后将生成的最后 4 个 32bit 数据 <span class="math inline">\(x_{35},x_{34},x_{33},x_{32}\)</span> 合并成一个 128bit 的数据 <span class="math inline">\(output\)</span>，作为最后的输出结果</li></ul><h3 id="密钥拓展">(2) 密钥拓展</h3><ul><li>密钥拓展的过程和加解密大同小异</li><li>输入的原始密钥 <span class="math inline">\(key\)</span> 为 128bit 的数据，将其按位拆分成 4 个 32bit 的数据 <span class="math inline">\(K_0,K_1,K_2,K_3\)</span></li><li>将初始密钥 <span class="math inline">\(K_0,K_1,K_2,K_3\)</span> 分别异或固定参数 <span class="math inline">\(FK_0,FK_1,FK_2,FK_3\)</span> 得到用于循环的密钥 <span class="math inline">\(k_0,k_1,k_2,k_3\)</span> 即 <span class="math inline">\(k_0=K_0⊕FK_0,k_1=K_1⊕FK_1,k_2=K_2⊕FK_2,k_3=K_3⊕FK_3\)</span></li><li>进入轮密钥 <span class="math inline">\(rk_i\)</span> 的生成 当 <span class="math inline">\(i=0\)</span> 时为第一次轮变换，一直进行到$ i=31$ 结束</li><li><span class="math inline">\(ki\)</span> 暂时不做处理，将 <span class="math inline">\(k_{i+1},k_{i+2},k_{i+3}\)</span> 和固定参数 <span class="math inline">\(CK_i\)</span> 异或得到一个 32bit 的数据，作为盒变换的输入 即$ sbox_input=k_{i+1}⊕k_{i+2}⊕k_{i+3}⊕ck_i$</li><li>将 <span class="math inline">\(sbox\_input\)</span> 拆分成 4 个 8bit 数据，分别进行盒变换，之后再将 4 个 8bit 输出合并成一个 32bit 的 <span class="math inline">\(sbox\_output\)</span></li><li>将刚才获得的 <span class="math inline">\(sbox\_output\)</span> 分别循环左移 13，23 位，得到 2 个 32bit 的结果，记移位结果为$ y_{13},y_{23}$</li><li>将移位的结果 $ y_{13},y_{23}<span class="math inline">\(与盒变换输出\)</span> sbox_output$ 和 <span class="math inline">\(k_i\)</span> 异或，得到 <span class="math inline">\(k_{i+4}\)</span> 即 <span class="math inline">\(rk_i=k_{i+4}=sbox\_output⊕y_{13}⊕y_{23}⊕k_i\)</span></li><li>至此完成了一轮的加解密运算 在实际加解密过程中，上述运算要执行 32 轮，同时使用 32 个不同的$ CK_i<span class="math inline">\(，\)</span>CK_i$ 为固定参数</li><li>执行完 32 轮后，便可获得 32 个用于加解密的 <span class="math inline">\(rk_i\)</span></li></ul><h1 id="三特征">三、特征</h1><h2 id="s盒">1、S盒</h2><p>和AES类似，SM4也有码表，不过AES有S盒和逆S盒。以下是SM4 的S盒：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">SBOX = [<br>    <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x05</span>, <br>    <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x9A</span>,<span class="hljs-number">0x76</span>, <span class="hljs-number">0x2A</span>,  <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x99</span>, <br>    <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <br>    <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xA6</span>, <br>    <span class="hljs-number">0x47</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xA8</span>,<br>    <span class="hljs-number">0x68</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x35</span>,<br>    <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x87</span>, <br>    <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x9E</span>,<br>    <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xA1</span>, <br>    <span class="hljs-number">0xE0</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xE3</span>,<br>    <span class="hljs-number">0x1D</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x6F</span>, <br>    <span class="hljs-number">0xD5</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x51</span>, <br>    <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xD8</span>, <br>    <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xB0</span>,<br>    <span class="hljs-number">0x89</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x84</span>,<br>    <span class="hljs-number">0x18</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x48</span><br>    ]<br>    <span class="hljs-comment">#已经整理为16 * 16</span><br></code></pre></td></tr></table></figure><p>多数时间可能会以数组形式存在。</p><h2 id="固定参数ckfk">2、固定参数<span class="math inline">\(CK,FK\)</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">FK = [<span class="hljs-number">0xa3b1bac6</span>, <span class="hljs-number">0x56aa3350</span>, <span class="hljs-number">0x677d9197</span>, <span class="hljs-number">0xb27022dc</span>]<br>CK = [<span class="hljs-number">0x00070e15</span>, <span class="hljs-number">0x1c232a31</span>, <span class="hljs-number">0x383f464d</span>, <span class="hljs-number">0x545b6269</span>,<br>      <span class="hljs-number">0x70777e85</span>, <span class="hljs-number">0x8c939aa1</span>, <span class="hljs-number">0xa8afb6bd</span>, <span class="hljs-number">0xc4cbd2d9</span>,<br>      <span class="hljs-number">0xe0e7eef5</span>, <span class="hljs-number">0xfc030a11</span>, <span class="hljs-number">0x181f262d</span>, <span class="hljs-number">0x343b4249</span>,<br>      <span class="hljs-number">0x50575e65</span>, <span class="hljs-number">0x6c737a81</span>, <span class="hljs-number">0x888f969d</span>, <span class="hljs-number">0xa4abb2b9</span>,<br>      <span class="hljs-number">0xc0c7ced5</span>, <span class="hljs-number">0xdce3eaf1</span>, <span class="hljs-number">0xf8ff060d</span>, <span class="hljs-number">0x141b2229</span>,<br>      <span class="hljs-number">0x30373e45</span>, <span class="hljs-number">0x4c535a61</span>, <span class="hljs-number">0x686f767d</span>, <span class="hljs-number">0x848b9299</span>,<br>      <span class="hljs-number">0xa0a7aeb5</span>, <span class="hljs-number">0xbcc3cad1</span>, <span class="hljs-number">0xd8dfe6ed</span>, <span class="hljs-number">0xf4fb0209</span>,<br>      <span class="hljs-number">0x10171e25</span>, <span class="hljs-number">0x2c333a41</span>, <span class="hljs-number">0x484f565d</span>, <span class="hljs-number">0x646b7279</span>]<br></code></pre></td></tr></table></figure><p>感觉。。。。可能有脑残出题人改这两参数。。。。</p><h2 id="加密形式">3、加密形式</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">c = bb ^ (<span class="hljs-built_in">ROTL</span>(bb, <span class="hljs-number">2</span>)) ^ (<span class="hljs-built_in">ROTL</span>(bb, <span class="hljs-number">10</span>)) ^ (<span class="hljs-built_in">ROTL</span>(bb, <span class="hljs-number">18</span>)) ^ (<span class="hljs-built_in">ROTL</span>(bb, <span class="hljs-number">24</span>));<br><span class="hljs-comment">//下面是key的</span><br>sbb = b1 ^ b2 ^ b3 ^ ck;<br>c = b0 ^ sbb ^ (<span class="hljs-built_in">ROTL</span>(sbb, <span class="hljs-number">13</span>)) ^ (<span class="hljs-built_in">ROTL</span>(sbb, <span class="hljs-number">23</span>));<br></code></pre></td></tr></table></figure><p>像这样子的</p>]]></content>
    
    
    <categories>
      
      <category>加密算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c c++函数名编译符号修饰符</title>
    <link href="/2022/09/23/c-c-%E5%87%BD%E6%95%B0%E5%90%8D%E7%BC%96%E8%AF%91%E7%AC%A6%E5%8F%B7%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <url>/2022/09/23/c-c-%E5%87%BD%E6%95%B0%E5%90%8D%E7%BC%96%E8%AF%91%E7%AC%A6%E5%8F%B7%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>函数的名字修饰（Decorated Name）就是编译器在编译期间创建的一个字符串。用来指明函数的定义或原型。</p><p>LINK程序或其它工具有时须要指定函数的名字修饰来定位函数的正确位置。</p><p>多数情况下程序猿并不须要知道函数的名字修饰。LINK程序或其它工具会自己主动区分他们。</p><p>当然，在某些情况下须要指定函数的名字修饰，比如在C++程序中， 为了让LINK程序或其它工具可以匹配到正确的函数名字，就必须为重载函数和一些特殊的函数（如构造函数和析构函数）指定名字装饰。</p><p>还有一种须要指定函数的 名字修饰的情况是在汇编程序中调用C或C++的函数。</p><p>假设函数名字，调用约定。返回值类型或函数參数有不论什么改变，原来的名字修饰就不再有效，必须指定新的 名字修饰。</p><p>C和C++程序的函数在内部使用不同的名字修饰方式，以下将分别介绍这两种方式</p><h2 id="c编译器的函数名修饰规则">1、C编译器的函数名修饰规则</h2><p>​ 对于__stdcall调用约定，编译器和链接器会在输出函数名前加上一个下划线前缀，函数名后面加上一个“@”符号和其參数的字节数。比如 _functionname@number。</p><h2 id="c编译器的函数名修饰规则-1">2. C++编译器的函数名修饰规则</h2><p>无论 __cdecl，__fastcall还是__stdcall调用方式，函数修饰都是以一个“?”開始，后面紧跟函数的名字。再后面是參数表的開始标识和 依照參数类型代号拼出的參数表。</p><h4 id="參数表标识">參数表标识:</h4><p>__stdcall方式，是“@<span class="citation" data-cites="YG">@YG</span>”;</p><p>__cdecl方式，是“@<span class="citation" data-cites="YA">@YA</span>”;</p><p>__fastcall方式，是“@<span class="citation" data-cites="YI">@YI</span>;</p><table><thead><tr class="header"><th>参数类型</th><th>拼写代号</th></tr></thead><tbody><tr class="odd"><td>void</td><td>X</td></tr><tr class="even"><td>char</td><td>D</td></tr><tr class="odd"><td>unsigned char</td><td>E</td></tr><tr class="even"><td>short</td><td>F</td></tr><tr class="odd"><td>int</td><td>H</td></tr><tr class="even"><td>unsigned int</td><td>I</td></tr><tr class="odd"><td>long</td><td>J</td></tr><tr class="even"><td>unsigned long(DWORD)</td><td>K</td></tr><tr class="odd"><td>float</td><td>M</td></tr><tr class="even"><td>double</td><td>N</td></tr><tr class="odd"><td>bool</td><td>_N</td></tr><tr class="even"><td>struct</td><td>U</td></tr><tr class="odd"><td>指针</td><td>PA</td></tr><tr class="even"><td>const指针</td><td>PB</td></tr></tbody></table><p>PA or PB后面的代号表明指针类型。</p><p>假设同样类型的指针连续出现，以“0”取代，一 个“0”代表一次反复。</p><p>U表示结构类型。通常后跟结构体的类型名，用“@@”表示结构类型名的结束。</p><p>參数表后以“<span class="citation" data-cites="Z">@Z</span>”标识整个名字的结束。假设该函数无參数，则 以“Z”标识结束。</p><p>对于C++的类成员函数（其调用方式是thiscall）。函数的名字修饰与非成员的C++函数稍有不同，首先就是在函数名字和參数表之间插入以“@”字 符引导的类名。其次是參数表的開始标识不同，公有（<em>public</em>）成员函数的标识是<strong>“@<span class="citation" data-cites="QAE">@QAE</span>”</strong>,保护（<em>protected</em>）成员函数的标识是 <strong>“@<span class="citation" data-cites="IAE">@IAE</span>”</strong>,私有（<em>private</em>）成员函数的标识是<strong>“@<span class="citation" data-cites="AAE">@AAE</span>”</strong>，假设函数声明使用了constkeyword，则对应的标识应分别为 <strong>“@<span class="citation" data-cites="QBE">@QBE</span>”</strong>，<strong>“@<span class="citation" data-cites="IBE">@IBE</span>”</strong>和<strong>“@<span class="citation" data-cites="ABE">@ABE</span>”</strong>。</p><p>假设參数类型是类实例的引用。则使用<strong>“AAV1”</strong>，对于const类型的引用。则使用<strong>“ABV1”</strong>。</p><h5 id="例子">例子：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Function1</span> <span class="hljs-params">(<span class="hljs-type">char</span> *var1,<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>其函数修饰名为: <strong>?Function1@<span class="citation" data-cites="YGHPADK">@YGHPADK</span><span class="citation" data-cites="Z">@Z</span></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Function2</span><span class="hljs-params">()</span></span>; <br></code></pre></td></tr></table></figure><p>其函数修饰名则为<strong>?Function2@<span class="citation" data-cites="YGXXZ">@YGXXZ</span></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CTest</span> <br>&#123; <br>...... <br><span class="hljs-keyword">private</span>: <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Function</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>; <br><span class="hljs-keyword">protected</span>: <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CopyInfo</span><span class="hljs-params">(<span class="hljs-type">const</span> CTest &amp;src)</span></span>; <br><span class="hljs-keyword">public</span>: <br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">DrawText</span><span class="hljs-params">(HDC hdc, <span class="hljs-type">long</span> pos, <span class="hljs-type">const</span> TCHAR* text, RGBQUAD color, BYTE bUnder, <span class="hljs-type">bool</span> bSet)</span></span>; <br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">InsightClass</span><span class="hljs-params">(DWORD dwClass)</span> <span class="hljs-type">const</span></span>; <br>...... <br>&#125;;<br></code></pre></td></tr></table></figure><p>对于成员函数Function，其函数修饰名为<strong>?Function@CTest@<span class="citation" data-cites="AAEXH">@AAEXH</span><span class="citation" data-cites="Z">@Z</span></strong> 对于成员函数CopyInfo，其函数修饰名为 <strong>“?CopyInfo@CTest@<span class="citation" data-cites="IAEXABV1">@IAEXABV1</span>@<span class="citation" data-cites="Z">@Z</span>”</strong> DrawText是一个比較复杂的函数声明。不仅有<a href="https://so.csdn.net/so/search?q=字符串&amp;spm=1001.2101.3001.7020">字符串</a>參数。还有结构体參数和HDC 句柄參数。须要指出的是HDC实际上是一个HDC结构类型的指针，这个參数的表示就是“PAUHDC@@”，其完整的函数修饰名为 <strong>“?DrawText@CTest@<span class="citation" data-cites="QAEJPAUHDC__">@QAEJPAUHDC__</span>@<span class="citation" data-cites="JPBDUtagRGBQUAD">@JPBDUtagRGBQUAD</span>@<span class="citation" data-cites="E_N">@E_N</span><span class="citation" data-cites="Z">@Z</span>”。</strong> 对于InsightClass是一个共有的const函数。它的成员函数标识是“@<span class="citation" data-cites="QBE">@QBE</span>”，完整的修饰名就是 <strong>“?InsightClass@CTest@<span class="citation" data-cites="QBEJK">@QBEJK</span><span class="citation" data-cites="Z">@Z</span>”。</strong></p><blockquote><p>不管是C函数名修饰方式还是C++函数名修饰方式均不改变输出函数名中的字符大写和小写。这和PASCAL调用约定不同，PASCAL约定输出的函数名无不论什么修饰且所有大写。</p></blockquote><h2 id="相关函数">3、相关函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">DWORD IMAGEAPI <span class="hljs-title">UnDecorateSymbolName</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  PCSTR name,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out] PSTR  outputString,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  DWORD maxStringLength,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  DWORD flags</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>被包含于头文件&lt;dbghelp.h&gt;</p><h4 id="参数说明">参数说明：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[in] name:<br><span class="hljs-comment">//已修饰的 C++ 符号名。此名称能以始终为问号 (?) 的首字符鉴别。</span><br><br>[out]   outputString<br><span class="hljs-comment">//指向字符串缓冲区的指针，该缓冲区接收未修饰的名字。</span><br><br>[in]  maxStringLength<br><span class="hljs-comment">//outputString缓冲区的大小，为字符数。</span><br>    <br>[in] flags<br><span class="hljs-comment">//用于反修饰已修饰名称的方式的选项。此参数能为零或更多个下列值。</span><br></code></pre></td></tr></table></figure><p>flag值：</p><table><thead><tr class="header"><th><strong>值</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr class="odd"><td><strong>UNDNAME_32_BIT_DECODE</strong><br />0x0800</td><td>反修饰 32 位已修饰名。</td></tr><tr class="even"><td><strong>UNDNAME_COMPLETE</strong><br />0x0000</td><td>启用完全的反修饰。</td></tr><tr class="odd"><td><strong>UNDNAME_NAME_ONLY</strong><br />0x1000</td><td>只反修饰初等声明的名称。返回 [作用域::]名称 。不展开模板形参。</td></tr><tr class="even"><td><strong>UNDNAME_NO_ACCESS_SPECIFIERS</strong><br />0x0080</td><td>禁用成员的访问指定符的展开。</td></tr><tr class="odd"><td><strong>UNDNAME_NO_ALLOCATION_LANGUAGE</strong><br />0x0010</td><td>禁用声明语言说明符的展开。</td></tr><tr class="even"><td><strong>UNDNAME_NO_ALLOCATION_MODEL</strong><br />0x0008</td><td>禁用声明模型的展开。</td></tr><tr class="odd"><td><strong>UNDNAME_NO_ARGUMENTS</strong><br />0x2000</td><td>不反修饰函数参数。</td></tr><tr class="even"><td><strong>UNDNAME_NO_CV_THISTYPE</strong><br />0x0040</td><td>禁用初等声明的 <strong>this</strong> 类型上的 CodeView 修饰符的展开。</td></tr><tr class="odd"><td><strong>UNDNAME_NO_FUNCTION_RETURNS</strong><br />0x0004</td><td>禁用初等声明的返回类型展开。</td></tr><tr class="even"><td><strong>UNDNAME_NO_LEADING_UNDERSCORES</strong><br />0x0001</td><td>从 Microsoft 关键字中移除前导下划线。</td></tr><tr class="odd"><td><strong>UNDNAME_NO_MEMBER_TYPE</strong><br />0x0200</td><td>禁用成员的 static 或 virtual 属性的展开。</td></tr><tr class="even"><td><strong>UNDNAME_NO_MS_KEYWORDS</strong><br />0x0002</td><td>禁用 Microsoft 关键字的展开。</td></tr><tr class="odd"><td><strong>UNDNAME_NO_MS_THISTYPE</strong><br />0x0020</td><td>禁用初等声明的 <strong>this</strong> 类型上的 Microsoft 关键字的展开。</td></tr><tr class="even"><td><strong>UNDNAME_NO_RETURN_UDT_MODEL</strong><br />0x0400</td><td>禁用用户定义类型返回的 Microsoft 模型的展开。</td></tr><tr class="odd"><td><strong>UNDNAME_NO_SPECIAL_SYMS</strong><br />0x4000</td><td>不反修饰特殊名称，如 vtable 、 vcall 、 vector 和 metatype 等。</td></tr><tr class="even"><td><strong>UNDNAME_NO_THISTYPE</strong><br />0x0060</td><td>禁用 <strong>this</strong> 类型上的所有修饰符。</td></tr><tr class="odd"><td><strong>UNDNAME_NO_THROW_SIGNATURES</strong><br />0x0100</td><td>禁用函数和函数指针的 throw 签名的展开。</td></tr></tbody></table><h4 id="返回值">返回值</h4><p>若函数成功，则返回 UnDecoratedName 缓冲区中的字符数，不包括 NULL 终止符。</p><p>若函数失败，则返回值为零。欲取得额外的错误信息，需调用 <a href="https://baike.baidu.com/item/GetLastError/4278820?fromModule=lemma_inlink">GetLastError</a> 。</p><p>若函数失败且返回零，则 UnDecoratedName 缓冲区的内容不确定。</p><h4 id="例1">例1</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">name = <span class="hljs-string">&quot;?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z&quot;</span><br><span class="hljs-built_in">UnDecorateSymbolName</span>(name, outputString, <span class="hljs-number">0x100</span>u, <span class="hljs-number">0</span>)<br>cout&lt;&lt;outputString;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><hr /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">__FUNCDNAME__<br></code></pre></td></tr></table></figure><h4 id="例2">例2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">char</span>* __thiscall <span class="hljs-title">R0Pxx::My_Aut0_PWN</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)</span> </span>&#123;<br>    std::cout &lt;&lt; __FUNCDNAME__ &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="神奇的事">4、神奇的事</h2><p>因为C的编译方式和C++有点不同，所以会导致同一个函数，各自在两种语言的的环境下名字修饰会不一样 例如：</p><p><code>long MakeFun(long lFun);</code>在C下是<code>_MakeFun@4</code>，但是在CPP下则是<code>MakeFun@@YGJJ@Z</code></p>]]></content>
    
    
    <categories>
      
      <category>语言知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图床搭建记录</title>
    <link href="/2022/08/06/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/08/06/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>总算搞定图床了。。。。就是要开梯子才能正常上传图片，试过jsDiver CND，寄的很惨，能成功上传但是不能获取。。</p><p>神奇的是，自己后来复现在typora测试没有成功。。。但是图片能正常使用</p></blockquote><p>用的是Picgo+github技术。</p><h2 id="先搞定github的token先">先搞定github的token先：</h2><h3 id="创建仓库">1、创建仓库</h3><p>设置公开，<strong>名字要记住</strong></p><h3 id="创建tokens">2、创建tokens</h3><p>在github里面的<code>setting/Developer settings/Personal access tokens</code>里面创建一个token</p><p><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo/20220806173656.png" /></p><p>设定名字日期：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo/image-20220806173748128.png" alt="image-20220806173748128" /><figcaption aria-hidden="true">image-20220806173748128</figcaption></figure><p>注意要勾选repo里面的内容</p><p>点击最下方的Generate token创建，然后把弹出来的页面的token复制，等下要用。</p><h2 id="picgo部分">PicGo部分</h2><p>自行搜索然后下载安装：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo/image-20220806173954976.png" alt="image-20220806173954976" /><figcaption aria-hidden="true">image-20220806173954976</figcaption></figure><p>设置，仓库名是你的{github_username}/{前面创建的仓库名} token就是刚刚的token，分支默认master，存储路径就能在你的仓库里面设置个文件夹， 自定义域名：<code>https://raw.githubusercontent.com/用户名/仓库名/分支名</code></p><p>确定设置为默认。</p><h2 id="typora部分">Typora部分</h2><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo/image-20220806174325164.png" alt="image-20220806174325164" /><figcaption aria-hidden="true">image-20220806174325164</figcaption></figure><p>如图所示设置，记得PicGo路径需要手动设置安装的路径，点击验证图片上传选项即可测试：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo/image-20220806174722598.png" alt="image-20220806174722598" /><figcaption aria-hidden="true">image-20220806174722598</figcaption></figure><p>此为成功。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>奇奇怪怪的函数01</title>
    <link href="/2022/08/01/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E5%87%BD%E6%95%B001/"/>
    <url>/2022/08/01/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E5%87%BD%E6%95%B001/</url>
    
    <content type="html"><![CDATA[<h1 id="findresourcea">1、FindResourceA</h1><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">HRSRC FindResourceA(<br>  HMODULE hModule,<br>  LPCSTR  lpName,<br>  LPCSTR  lpType<br>);<br>FindResourceA <span class="hljs-keyword">function</span><br>Determines the <span class="hljs-keyword">location</span> <span class="hljs-keyword">of</span> a resource <span class="hljs-keyword">with</span> the specified <span class="hljs-keyword">type</span> <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> <span class="hljs-keyword">in</span> the specified module.<br>确定具有指定类型和名称的资源在指定模块中的位置。<br>hModule：处理包含资源的可执行文件的模块。<span class="hljs-keyword">NULL</span>值则指定模块句柄指向操作系统通常情况下创建最近过程的相关位图文件。<br>lpName：指定资源名称。<br>lpType：指定资源类型。<br>返回值：如果函数运行成功，那么返回值为指向被指定资源信息块的句柄。为了获得这些资源，将这个句柄传递给LoadResource函数。如果函数运行失败，则返回值为<span class="hljs-keyword">NULL</span>。<br></code></pre></td></tr></table></figure><h1 id="sizeofresource">2、SizeofResource</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">表示该函数返回指定资源的字节数大小。<br></code></pre></td></tr></table></figure><h1 id="loadresource">3、LoadResource</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">LoadResource <span class="hljs-keyword">function</span><br><span class="hljs-title">检索一个句柄，该句柄可用于获取指向内存中指定资源的第一个字节的指针。</span><br></code></pre></td></tr></table></figure><h1 id="gmpz_init_set_str">4、__gmpz_init_set_str</h1><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta">其实就是 mpz_init_set_str <span class="hljs-built_in">int</span> mpz_init_set_str (mpz_t rop, <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> *<span class="hljs-built_in">str</span>, <span class="hljs-built_in">int</span> base) 函数：<br><br>这三个参数分别是多精度整数变量，字符串，进制。 这个函数的作用就是将 <span class="hljs-built_in">str</span> 字符数组以 base 指定的进制解读成数值并写入 rop 所指向的内存。<br><br>mpz_init_set_str(b, “<span class="hljs-number">200000</span>”, <span class="hljs-number">10</span>)； <span class="hljs-comment">//即 b=200000，十进制</span><br></code></pre></td></tr></table></figure><h1 id="mpz_powm">5、 mpz_powm</h1><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs smali">mpz_powm (mpz_t rop,<span class="hljs-built_in"> const </span>mpz_t base,<span class="hljs-built_in"> const </span>mpz_t exp,<span class="hljs-built_in"> const </span>mpz_t mod) 函数：<br>其实就是计算 base 的 exp 次方，并对 mod 取模，最后将结果写入 rop 中， 这个运算的过程和RSA的加密过程一样。<br><br>mpz_powm(op1,op2,op3,op4)； //求幂模函数 即 op1=op2^op3 mod op4;<br><br></code></pre></td></tr></table></figure><h1 id="createthread">6、 CreateThread</h1><p>在C/C++中可以通过CreateThread函数在进程中创建线程，函数的具体格式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">HANDLE <span class="hljs-title">CreateThread</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">                    LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">                    DWORD dwStackSize,</span></span><br><span class="hljs-params"><span class="hljs-function">                    LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="hljs-params"><span class="hljs-function">                    LPVOID lpParameter,</span></span><br><span class="hljs-params"><span class="hljs-function">                    DWORD dwCreationFlags,</span></span><br><span class="hljs-params"><span class="hljs-function">                    LPDWORD lpThreadID</span></span><br><span class="hljs-params"><span class="hljs-function">                   )</span></span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数的含义如下：</span><br><span class="hljs-comment">lpThreadAttrivutes：指向SECURITY_ATTRIBUTES的指针，用于定义新线程的安全属性，一般设置成NULL；</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">dwStackSize：分配以字节数表示的线程堆栈的大小，默认值是0；</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">lpStartAddress：指向一个线程函数地址。每个线程都有自己的线程函数，线程函数是线程具体的执行代码；</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">lpParameter：传递给线程函数的参数；</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">dwCreationFlags：表示创建线程的运行状态，其中CREATE_SUSPEND表示挂起当前创建的线程，而0表示立即执行当前创建的进程；</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">lpThreadID：返回新创建的线程的ID编号；</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>如果函数调用成功，则返回新线程的句柄，调用<code>WaitForSingleObject</code>函数等待所创建线程的运行结束。函数的格式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">DWORD <span class="hljs-title">WaitForSingleObject</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">                          HANDLE hHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">                          DWORD dwMilliseconds</span></span><br><span class="hljs-params"><span class="hljs-function">                         )</span></span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数的含义如下：</span><br><span class="hljs-comment">hHandle：指定对象或时间的句柄；</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">dwMilliseconds：等待时间，以毫秒为单位，当超过等待时间时，此函数返回。如果参数设置为0，则该函数立即返回；如果设置成INFINITE，则该函数直到有信号才返回。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>一般情况下需要创建多个线程来提高程序的执行效率，但是多个线程同时运行的时候可能调用线程函数，在多个线程同时对一个内存地址进行写入操作，由于CPU时间调度的问题，写入的数据会被多次覆盖，所以要使线程同步。</p><p>就是说，当有一个线程对文件进行操作时，其它线程只能等待。可以通过临界区对象实现线程同步。临界区对象是定义在数据段中的一个CRITICAL_SECTION结构，Windows内部使用这个结构记录一些信息，确保同一时间只有一个线程访问改数据段中的数据。</p><p>使用临界区的步骤如下：</p><p>（1）初始化一个CRITICAL_SECTION结构；在使用临界区对象之前，需要定义全局CRITICAL_SECTION变量，在调用<code>CreateThread</code>函数前调用<code>InitializeCriticalSection</code>函数初始化临界区对象；</p><p>（2）申请进入一个临界区；在线程函数中要对保护的数据进行操作前，可以通过调用<code>EnterCriticalSection</code>函数申请进入临界区。由于同一时间内只能有一个线程进入临界区，所以在申请的时候如果有一个线程已经进入临界区，则该函数就会一直等到那个线程执行完临界区代码；</p><p>（3）离开临界区；当执行完临界区代码后，需要调用<code>LeaveCriticalSection</code>函数离开临界区；</p><p>（4）删除临界区；当不需要临界区时调用<code>DeleteCriticalSection</code>函数将临界区对象删除；</p><h1 id="closehandle">7、 CloseHandle</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp">CloseHandle函数<br><br>　　<span class="hljs-function">BOOL <span class="hljs-title">CloseHandle</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">　　HANDLE hObject</span></span><br><span class="hljs-params"><span class="hljs-function">　　)</span></span>;<br><br>　　<span class="hljs-comment">/*</span><br><span class="hljs-comment">　　参数</span><br><span class="hljs-comment">　　hObject ：代表一个已打开对象handle。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">　　返回值</span><br><span class="hljs-comment">　　TRUE：执行成功；</span><br><span class="hljs-comment">　　FALSE：执行失败，可以调用GetLastError()获知失败原因。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">　　函数说明：</span><br><span class="hljs-comment">　　关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。在CreateThread成功之后会返回一个hThread的handle，且内核对象的计数加1，CloseHandle之后，引用计数减1，当变为0时，系统删除内核对象。</span><br><span class="hljs-comment">　　若在线程执行完之后，没有调用CloseHandle，在进程执行期间，将会造成内核对象的泄露，相当于句柄泄露，但不同于内存泄露，这势必会对系统的效率带来一定程度上的负面影响。但当进程结束退出后，系统会自动清理这些资源。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><blockquote><p>Closing a thread handle does not terminate the associated thread. To remove a thread object, you must terminate the thread, then close all handles to the thread.</p></blockquote><p>1，线程和线程句柄（Handle）不是一个东西，线程是在cpu上运行的.....（说不清楚了），线程句柄是一个内核对象。我们可以通过句柄来操作线程，但是线程的生命周期和线程句柄的生命周期不一样的。线程的生命周期就是线程函数从开始执行到return，线程句柄的生命周期是从<code>CreateThread</code>返回到你<code>CloseHandle()</code>。</p><p>2，所有的内核对象（包括线程Handle）都是系统资源，用了要还的，也就是说用完后一定要<code>closehandle</code>关闭之，如果不这么做，你系统的句柄资源很快就用光了。</p><p>3，如果你<code>CreateThread</code>以后需要对这个线程做一些操作，比如改变优先级，被其他线程等待，强制<code>TermateThread</code>等，就要保存这个句柄，使用完了在<code>CloseHandle</code>。如果你开了一个线程，而不需要对它进行如何干预，<code>CreateThread</code>后直接<code>CloseHandle</code>就行了。</p><p>所以 <code>CloseHandel(ThreadHandle );</code> 只是关闭了一个线程句柄对象，表示我不再使用该句柄，即不对这个句柄对应的线程做任何干预了。并没有结束线程。</p>]]></content>
    
    
    <categories>
      
      <category>奇奇怪怪的函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>py编译逆向学习</title>
    <link href="/2022/05/23/py%E7%BC%96%E8%AF%91%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/05/23/py%E7%BC%96%E8%AF%91%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="pyc-文件">PYC 文件</h1><p>pyc 文件是 python 在编译过程中出现的主要中间过程文件。pyc 文件是二进制的，类似 java 的字节码，可以由 python 虚拟机直接执行的。</p><h2 id="pycodeobject">PyCodeObject</h2><p>实际上，pyc 文件就是 PyCodeObject 对象在硬盘上的保存形式。</p><p>而 PyCodeObject 的结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    PyObject_HEAD<br>    <span class="hljs-type">int</span> co_argcount;        <span class="hljs-comment">/* 位置参数个数 */</span><br>    <span class="hljs-type">int</span> co_nlocals;         <span class="hljs-comment">/* 局部变量个数 */</span><br>    <span class="hljs-type">int</span> co_stacksize;       <span class="hljs-comment">/* 栈大小 */</span><br>    <span class="hljs-type">int</span> co_flags;   <br>    PyObject *co_code;      <span class="hljs-comment">/* 字节码指令序列 */</span><br>    PyObject *co_consts;    <span class="hljs-comment">/* 所有常量集合 */</span><br>    PyObject *co_names;     <span class="hljs-comment">/* 所有符号名称集合 */</span><br>    PyObject *co_varnames;  <span class="hljs-comment">/* 局部变量名称集合 */</span><br>    PyObject *co_freevars;  <span class="hljs-comment">/* 闭包用的的变量名集合 */</span><br>    PyObject *co_cellvars;  <span class="hljs-comment">/* 内部嵌套函数引用的变量名集合 */</span><br>    <span class="hljs-comment">/* The rest doesn’t count for hash/cmp */</span><br>    PyObject *co_filename;  <span class="hljs-comment">/* 代码所在文件名 */</span><br>    PyObject *co_name;      <span class="hljs-comment">/* 模块名|函数名|类名 */</span><br>    <span class="hljs-type">int</span> co_firstlineno;     <span class="hljs-comment">/* 代码块在文件中的起始行号 */</span><br>    PyObject *co_lnotab;    <span class="hljs-comment">/* 字节码指令和行号的对应关系 */</span><br>    <span class="hljs-type">void</span> *co_zombieframe;   <span class="hljs-comment">/* for optimization only (see frameobject.c) */</span><br>&#125; PyCodeObject;<br></code></pre></td></tr></table></figure><h2 id="pyobject_head">PyObject_HEAD</h2><p>不同的 Python 版本会有不同的 PyObject_HEAD，以下是各版本的文件头：</p><table><thead><tr class="header"><th>Python 版本</th><th>十六进制文件头</th></tr></thead><tbody><tr class="odd"><td>Python 2.7</td><td><code>03f30d0a00000000</code></td></tr><tr class="even"><td>Python 3.0</td><td><code>3b0c0d0a00000000</code></td></tr><tr class="odd"><td>Python 3.1</td><td><code>4f0c0d0a00000000</code></td></tr><tr class="even"><td>Python 3.2</td><td><code>6c0c0d0a00000000</code></td></tr><tr class="odd"><td>Python 3.3</td><td><code>9e0c0d0a0000000000000000</code></td></tr><tr class="even"><td>Python 3.4</td><td><code>ee0c0d0a0000000000000000</code></td></tr><tr class="odd"><td>Python 3.5</td><td><code>170d0d0a0000000000000000</code></td></tr><tr class="even"><td>Python 3.6</td><td><code>330d0d0a0000000000000000</code></td></tr><tr class="odd"><td>Python 3.7</td><td><code>420d0d0a000000000000000000000000</code></td></tr><tr class="even"><td>Python 3.8</td><td><code>55 0d 0d 0a 00 00 00 00 00 00 00 00 00 00 00 00</code></td></tr><tr class="odd"><td>Python 3.9</td><td><code>610d0d0a000000000000000000000000</code></td></tr><tr class="even"><td>Python 3.10</td><td><code>6f0d0d0a000000000000000000000000</code></td></tr><tr class="odd"><td>Python 3.11</td><td><code>a70d0d0a000000000000000000000000</code></td></tr></tbody></table><h2 id="反反编译">反反编译</h2><h3 id="更改魔术头">更改魔术头</h3><p>当想要保护我们的 pyc 文件不被反编译，最简单的做法就是更改魔术头，即 PyObject_HEAD。</p><p>可能是完全删除魔术头，也可能是修改为不是原生版本的魔术头，我们只需要根据情况添加或修改即可。</p><h1 id="pyd-文件">PYD 文件</h1><p>pyd 文件相当于 python 的运行时 dll，在 python 代码中可以直接使用 <code>import</code> 将 pyd 文件当作模块导入。</p><p>对于 pyd 的逆向，我们需要借助 ida 的 <code>attach</code> 动态调试跟静态分析。</p><h1 id="pyexe的逆向">pyexe的逆向</h1><p>PyInstaller打包后，pyc文件的前8个字节会被抹掉，所以最后要自己添加回去</p><p>逆向：</p><p>用pyinstxtractor来解pyc包</p><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip install pyinstxtractor<br></code></pre></td></tr></table></figure><p>执行脚本</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python pyinstxtractor.py **.exe<br></code></pre></td></tr></table></figure><p>就会解包得到一个文件夹(一般命名为<strong>**.exe_extracted</strong>)</p><p>里面只用注意两个文件，其他的一般是库脚本</p><p>一个是<strong><em>1.pyc</em></strong>，另一个是<strong><em>struct.pyc</em></strong>,</p><p>同时会有提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs \">PE:<br>[+] Processing pyre.exe<br>[+] Pyinstaller version: 2.1+<br>[+] Python version: 37<br>[+] Length of package: 5796250 bytes<br>[+] Found 61 files in CArchive<br>[+] Beginning extraction...please standby<br>[+] Possible entry point: pyiboot01_bootstrap.pyc<br>[+] Possible entry point: 1.pyc<br>[!] Warning: This script is running in a different Python version than the one used to build the executable.<br>[!] Please run this script in Python37 to prevent extraction errors during unmarshalling<br>[!] Skipping pyz extraction<br>[+] Successfully extracted pyinstaller archive: pyre.exe<br></code></pre></td></tr></table></figure><p>如果解包出来发现原来的pyc脚本是用与自己的python的版本不一样的话，会有警告：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">[!] Warning: This script is running <span class="hljs-keyword">in</span> a different Python version than the one used to build the executable.<br></code></pre></td></tr></table></figure><p>这个是告诉你版本号不同，魔术头被修改了；</p><p>只需要自己将魔术头给改正，一般struct.pyc的前16字节就是所要的魔术头；</p><p>魔术头依照版本号来确定：</p><p>在刚刚的提示里面就含有这个文件对应的版本号</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[+]</span> Python version: <span class="hljs-number">37</span><br></code></pre></td></tr></table></figure><p>E.P.:</p><p>原：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo/image-20220919203628458.png" alt="image-20220919203628458" /><figcaption aria-hidden="true">image-20220919203628458</figcaption></figure><p>改：</p><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo/image-20220919203711306.png" alt="image-20220919203711306" /><figcaption aria-hidden="true">image-20220919203711306</figcaption></figure><p>​ E3这个是个可以作为本文件的标记，所以可见多了4个字节，复制粘贴struct.pyc的头时顺便把那4个给覆盖了。</p><p>修改完之后就简单了，对1.pyc使用 uncompyle 可以将 pyc 文件完美反编译。<a href="https://github.com/rocky/python-uncompyle6">uncompyle6 Github主页</a></p><p>安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> uncompyle<br></code></pre></td></tr></table></figure><p>而 uncompyle 用法如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">uncompyle6</span> <span class="hljs-regexp">*.pyc</span><br></code></pre></td></tr></table></figure><p>uncomyle6 会直接将反编译后的源码输出在标准输出中，推荐用法：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">uncompyle6</span> <span class="hljs-regexp">*.pyc</span> &gt; filename<br></code></pre></td></tr></table></figure><p>将源码输出到文件里面，比如说：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">uncompyle6</span> <span class="hljs-number">1</span>.pyc &gt; <span class="hljs-number">1</span>.py<br></code></pre></td></tr></table></figure><p>输出后就直接看1.py即可。</p><h1 id="直接输出pyc">直接输出pyc</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> dis<br><span class="hljs-keyword">import</span> marshal<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>os.chdir(<span class="hljs-string">r&#x27;C:\Users\74592\Desktop\hgame2023\week2\stream&#x27;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;stream.pyc&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    code = marshal.load(file)<br><br><span class="hljs-built_in">print</span>(dis.disassemble(code))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>语言知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RC4</title>
    <link href="/2022/03/30/RC4/"/>
    <url>/2022/03/30/RC4/</url>
    
    <content type="html"><![CDATA[<p>因为是一开始学逆向时候学的，所以没有什么完整的笔记，就纯纯记录一个脚本：</p><h1 id="特点">特点</h1><p>RC4最大的特点就是将密文顺着跑，就能得到明文，所以一般推荐直接照抄加密。</p><h1 id="脚本">脚本</h1><p>未魔改的RC4</p><p>cpp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">RC4_init</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; s, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; t, <span class="hljs-built_in">string</span> key)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.size(); i++) &#123;<br>        s[i] = i;<br>        t[i] = key[i % key.size()];<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">RC4_exchange</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; s, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; t)</span><br>&#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.size(); i++) &#123;<br>        j = (j + s[i] + t[i]) % s.size();<br>        swap(s[i], s[j]);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">RC4_crypt</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; s, <span class="hljs-built_in">string</span>&amp; m)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> temp;<br><br>    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; m.size(); k++)<br>    &#123;<br>        i = (i + <span class="hljs-number">1</span>) % s.size();<br>        j = (j + s[i]) % s.size();<br>        temp = s[i];<br>        s[i] = s[j];<br>        s[j] = temp;<br>        t = (s[i] + s[j]) % s.size();<br>        m[k] ^= s[t];<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; s)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.size(); i++) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; s[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_box</span>(<span class="hljs-params">key</span>):<br>    s_box = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s_box[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span><br>        s_box[i], s_box[j] = s_box[j], s_box[i]<br>    <span class="hljs-keyword">return</span> s_box<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc_4</span>(<span class="hljs-params">plain,box</span>):<br>    res = []<br>    i = j =<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> plain:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + box[i]) % <span class="hljs-number">256</span><br>        box[i], box[j] = box[j], box[i]<br>        t = (box[i] + box[j]) % <span class="hljs-number">256</span><br>        k = box[t]<br>        res.append((s ^ k)&amp;<span class="hljs-number">0xff</span>)<br>     <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><hr /><p>2023.2.2更新：rc4脚本完善，错别字更正(明文写成明晚可还行)</p>]]></content>
    
    
    <categories>
      
      <category>加密算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Aspack手动脱壳笔记</title>
    <link href="/2022/03/27/Aspack%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/03/27/Aspack%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>﻿最近打了buu的DASCTF的比赛，但我是菜狗，就只做出了re的签到题（雾），还是学到了不少东西，就是Aspack的手动脱壳，记录下。</p><p>首先是用peid查壳，可以看到是aspcak壳。（exeinfope也可以，就是启动没有那么快） <img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2c86f2a99008f4c429e4150af8a8db6b6.png" alt="在这里插入图片描述" /> 然后在lordPE里面选特征值旁边的三个点 <img src="https://img-blog.csdnimg.cn/9624e6f7a2744ba48e3921a057e1e588.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQXp1cmV1c19zaW11,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /> 设置重定位已分离，保存即可 <img src="https://img-blog.csdnimg.cn/970aca8f86624de79048e76df50bf7c4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQXp1cmV1c19zaW11,size_8,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /> 然后用ollydbg进行动调找函数的入口： 会弹出一个窗口：</p><blockquote><p>压缩代码？ 模块“XXXX”的快速统计报告标明其代码段要么被压缩、加密，要么包含大量的嵌入数据，代码分析的结果可能非常不可靠或者完全错误。是否继续分析？</p></blockquote><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2a1169d79f1c94b878b20804c2738d5ef.png" alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p><strong>这里选否</strong></p><p>然后程序就会停在一个push处 <img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2934a817b4c284ac59891970d10534e90.png" alt="在这里插入图片描述" /> 用<strong>F8</strong>单步进入一下，就会停在一个call处，查看此时旁边的ESP的地址是红的，右键其打个硬件断点： <img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2e53b4ff2875742c4b3f686674085227d.png" alt="在这里插入图片描述" /> 然后F9运行到断点处。可以看到停在了一个jnz处 <img src="https://img-blog.csdnimg.cn/f14f81139d4841cebbf29d896c0a3af8.png" alt="在这里插入图片描述" /> 用F7单步到push处再F7两次，就跳转到另一个界面 <img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2e6a07c595a024744b041ce8f40ee7561.png" alt="在这里插入图片描述" /> F7步入到<strong>call</strong>处。此时按下回车可以看到四个安全函数，能确定函数入口就在后面 <img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo242e9f7b9e0fb41e2b8ecb7b57350f564.png" alt="在这里插入图片描述" /> 摁esc返回。 此时右键刚刚那个call的位置，从这里开始脱壳 <img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo26d89b79a9d51463aa0f0aa4e9e258215.png" alt="在这里插入图片描述" /> 有两处需要特别注意，一处就是取消勾选重建输入表，另一处是要记下修正为后面那传数字。 <img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2ba62c4e8275f428cbd97319545139263.png" alt="在这里插入图片描述" /> 然后脱壳，起个随便的名字。</p><p><strong><em>现在不要退出ollydbg</em></strong></p><p>以<strong>管理员身份</strong>运行<strong>ImportREConstructor</strong> 不是管理员就有可能看不到要脱壳的程序运行 <img src="https://img-blog.csdnimg.cn/aabbd96f56354947beb4a8307d536e15.png" alt="在这里插入图片描述" /> 此处找到要脱壳的文件 <img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2ebe907b5fbf64af692f5a42e51585e52.png" alt="在这里插入图片描述" /> 还记得刚刚要记住的那串数字吗？ OEP处填入，点击iat自动搜索。 获取导入表， <img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo2c85efe23ee664ffeabc97cc33835155c.png" alt="在这里插入图片描述" /> 然后修正转储到刚刚ollydbg脱壳出的那个文件。 好了到此脱壳结束，可以正常使用ida，F5了。</p>]]></content>
    
    
    <categories>
      
      <category>壳</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TEA</title>
    <link href="/2022/03/14/TEA/"/>
    <url>/2022/03/14/TEA/</url>
    
    <content type="html"><![CDATA[<h1 id="tea类算法笔记">TEA类算法笔记</h1><h2 id="tea">TEA</h2><h3 id="一简述">一、简述</h3><p>TEA算法有64位的明文，128位的密钥以及一个常数 <span class="math inline">\(\delta\)</span> 组成。<span class="math inline">\(\delta\)</span>源自于黄金比例，但它的数值的精确度并不重要，于是被定义为 <span class="math inline">\(\delta\)</span>=「($$5 - 1)231」(即程序里面的<strong>0×9E3779B9</strong>)</p><p>TEA是将明文每64位位一组进行加密，每次加密将这64位分为两部分，高32位和低32位(后面分别用Mup和Mdown来表示)，而密钥(Key)则拆分为4部分。</p><h3 id="二加密过程">二、加密过程</h3><p>加密过程：sum+= <span class="math inline">\(\delta\)</span> <span class="math inline">\(\longrightarrow\)</span></p><p>Mup += ((Mdown&lt;&lt;4)+Key[0])<sup>(Mdown+sum)</sup>((Mdown&gt;&gt;5)+Key[1])<span class="math inline">\(\longrightarrow\)</span></p><p>Mdown += ((Mup&lt;&lt;4)+Key[2])<sup>(Mup+sum)</sup>((Mup&gt;&gt;5)+Key[3]).</p><p>一般反复32遍或者64遍，最后将结果覆写回去。</p><p>附上图解：<img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo21272254-b20f9848f97fbcb6" alt="img" /></p><h3 id="三tea逆向">三、TEA逆向</h3><p>1、tea算法的特征就是DELTA值和十六个字节的密钥（也就是128位）。</p><p>2、在逆向程序的时候，可以利用ida的插件<strong>findcypto</strong>识别tea算法</p><p>3、<strong>x-=0x61c88647</strong>和<strong>x+=0x9e3779b9</strong>，这两个值是等价的，可能会在反汇编中看到</p><p>这里将上面测试的代码编译好拖入IDA中进行观察</p><p>可以看到δ就被反编译为<code>v4 -= 1640531527;</code></p><h4 id="tea算法的变化技巧">TEA算法的变化技巧</h4><p>​ 前面有提到关于"但δ的精确值似乎并不重要"，所以δ的值不一定需要0x9E3779B9，所以这里的话在加密解密的时候可以改变这个δ的 值，改了之后就会导致部分识别加密的工具失效来达到算法魔改的目的。</p><h3 id="四代码delta没有魔改">四、代码（<span class="math inline">\(\delta\)</span>没有魔改）</h3><p>加密代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">encrypt</span> <span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">uint32_t</span>* k)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], sum=<span class="hljs-number">0</span>, i;<br>    <span class="hljs-type">uint32_t</span> delta=<span class="hljs-number">0x9e3779b9</span>;<br>    <span class="hljs-type">uint32_t</span> k0=k[<span class="hljs-number">0</span>], k1=k[<span class="hljs-number">1</span>], k2=k[<span class="hljs-number">2</span>], k3=k[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        sum += delta;<br>        v0 += ((v1&lt;&lt;<span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="hljs-number">5</span>) + k1);<br>        v1 += ((v0&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="hljs-number">5</span>) + k3);<br>    &#125;<br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br></code></pre></td></tr></table></figure><p>a<sup>b</sup>c很容易知道反向运行就能逆出来，c<sup>b</sup>a(虽然不用反过来也是一样的)就得到原结果，所以就只需要将加密反过来即可得到解密代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span> <span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">uint32_t</span>* k)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], i;<br>    <span class="hljs-type">uint32_t</span> delta=<span class="hljs-number">0x9e3779b9</span>;<br>    <span class="hljs-type">uint32_t</span> sum = delta*<span class="hljs-number">32</span>;<br>    <span class="hljs-type">uint32_t</span> k0=k[<span class="hljs-number">0</span>], k1=k[<span class="hljs-number">1</span>], k2=k[<span class="hljs-number">2</span>], k3=k[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">32</span>; i++) &#123;<br>        v1 -= ((v0&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="hljs-number">5</span>) + k3);<br>        v0 -= ((v1&lt;&lt;<span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="hljs-number">5</span>) + k1);<br>        sum -= delta;<br>    &#125;<br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后输出即可</p><h3 id="五腾讯tea算法分析">五、腾讯TEA算法分析</h3><p>每次处理64位数据，使用128位密钥。数据和密钥都分割成32为无符号整型处理。</p><p>不同点：<strong>TEA标准中使用的32轮加密，而腾讯只用了16轮。</strong></p><p>可以看到其他都一样的，就是迭代次数为16次</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">encrypt</span> <span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">uint32_t</span>* k)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], sum=<span class="hljs-number">0</span>, i;           <span class="hljs-comment">/* set up */</span><br>    <span class="hljs-type">uint32_t</span> delta=<span class="hljs-number">0x9e3779b9</span>;                     <span class="hljs-comment">/* a key schedule constant */</span><br>    <span class="hljs-type">uint32_t</span> k0=k[<span class="hljs-number">0</span>], k1=k[<span class="hljs-number">1</span>], k2=k[<span class="hljs-number">2</span>], k3=k[<span class="hljs-number">3</span>];   <span class="hljs-comment">/* cache key */</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++) &#123;                       <span class="hljs-comment">/* basic cycle start */</span><br>        sum += delta;<br>        v0 += ((v1&lt;&lt;<span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="hljs-number">5</span>) + k1);<br>        v1 += ((v0&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="hljs-number">5</span>) + k3);  <br>    &#125;                                              <span class="hljs-comment">/* end cycle */</span><br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span> <span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">uint32_t</span>* k)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], i;  <span class="hljs-comment">/* set up */</span><br>    <span class="hljs-type">uint32_t</span> delta=<span class="hljs-number">0x9e3779b9</span>;                     <span class="hljs-comment">/* a key schedule constant */</span><br>    <span class="hljs-type">uint32_t</span> sum = delta &lt;&lt; <span class="hljs-number">4</span>;<br>    <span class="hljs-type">uint32_t</span> k0=k[<span class="hljs-number">0</span>], k1=k[<span class="hljs-number">1</span>], k2=k[<span class="hljs-number">2</span>], k3=k[<span class="hljs-number">3</span>];   <span class="hljs-comment">/* cache key */</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">16</span>; i++) &#123;                         <span class="hljs-comment">/* basic cycle start */</span><br>        v1 -= ((v0&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="hljs-number">5</span>) + k3);<br>        v0 -= ((v1&lt;&lt;<span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="hljs-number">5</span>) + k1);<br>        sum -= delta;                                   <br>    &#125;                                              <span class="hljs-comment">/* end cycle */</span><br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="xtea">XTEA</h2><h3 id="一算法介绍">一、算法介绍</h3><p>XTEA算法也被称作为Corrected Block TEA</p><p>XTEA是TEA的升级版，增加了更多的密钥表，移位和异或操作等等，设计者是Roger Needham, David Wheeler</p><p>之后 TEA 算法被发现存在缺陷，作为回应，设计者提出了一个 TEA 的升级版本——XTEA（有时也被称为"tean"）。XTEA 跟 TEA 使用了相同的简单运算，但它采用了截然不同的顺序，为了阻止密钥表攻击，四个子密钥（在加密过程中，原 128 位的密钥被拆分为 4 个 32 位的子密钥）采用了一种不太正规的方式进行混合，但速度更慢了。</p><h3 id="二算法图解">二、算法图解</h3><h3 id="img"><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo21272254-e1a16f7960617103" alt="img" /></h3><h3 id="三xtea算法实现">三、XTEA算法实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br> <br><span class="hljs-comment">/* take 64 bits of data in v[0] and v[1] and 128 bits of key[0] - key[3] */</span><br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">encipher</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> num_rounds, <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>], <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], sum=<span class="hljs-number">0</span>, delta=<span class="hljs-number">0x9E3779B9</span>;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; num_rounds; i++) &#123;<br>        v0 += (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>]);<br>        sum += delta;<br>        v1 += (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>    &#125;<br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">decipher</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> num_rounds, <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>], <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], delta=<span class="hljs-number">0x9E3779B9</span>, sum=delta*num_rounds;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; num_rounds; i++) &#123;<br>        v1 -= (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>        sum -= delta;<br>        v0 -= (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>]);<br>    &#125;<br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> k[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r=<span class="hljs-number">32</span>;<span class="hljs-comment">//num_rounds建议取值为32</span><br>    <span class="hljs-comment">// v为要加密的数据是两个32位无符号整数</span><br>    <span class="hljs-comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加密前原始数据：%u %u\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br>    encipher(r, v, k);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加密后的数据：%u %u\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br>    decipher(r, v, k);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;解密后的数据：%u %u\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="xxtea">XXTEA</h2><h3 id="一xxtea算法介绍">一、XXTEA算法介绍</h3><p>XXTEA就被称作为Corrected Block TEA。</p><p>特点：原字符串长度可以不是4的倍数了</p><h3 id="二xxtea算法图解">二、XXTEA算法图解</h3><figure><img src="https://raw.githubusercontent.com/Azureussimu/image_store/master/PicGo21586953-20220307161956986-999517630.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h3 id="三xxtea算法实现">三、XXTEA算法实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-meta">#<span class="hljs-keyword">define</span> MX (z&gt;&gt;5^y<span class="hljs-string">&lt;&lt;2) + (y&gt;</span>&gt;3 ^ z&lt;&lt;4)^(sum^y) + (k[ i&amp;3 ^ e] ^ z);</span><br> <br>  <span class="hljs-type">long</span> <span class="hljs-title function_">btea</span><span class="hljs-params">(<span class="hljs-type">long</span>* v, <span class="hljs-type">long</span> n, <span class="hljs-type">long</span>* k)</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> z=v[n<span class="hljs-number">-1</span>], y=v[<span class="hljs-number">0</span>], sum=<span class="hljs-number">0</span>, e, DELTA=<span class="hljs-number">0x9e3779b9</span>;<br>    <span class="hljs-type">long</span> i, q ;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) &#123;         <br>      q = <span class="hljs-number">6</span> + <span class="hljs-number">52</span>/n;<br>      <span class="hljs-keyword">while</span> (q-- &gt; <span class="hljs-number">0</span>) &#123;<br>        sum += DELTA;<br>        e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n<span class="hljs-number">-1</span>; i++)&#123; <br>            y = v[i+<span class="hljs-number">1</span>];<br>            z = v[i] += MX;<br>        &#125; <br>        y = v[<span class="hljs-number">0</span>];<br>        z = v[n<span class="hljs-number">-1</span>] += MX;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> ;<br>    &#125; <br>      <br>      <br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">-1</span>) &#123; <br>      n = -n;<br>      q = <span class="hljs-number">6</span> + <span class="hljs-number">52</span>/n;<br>      sum = q*DELTA ;<br>      <span class="hljs-keyword">while</span> (sum != <span class="hljs-number">0</span>) &#123;<br>        e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">for</span> (i=n<span class="hljs-number">-1</span>; i&gt;<span class="hljs-number">0</span>; i--) &#123;<br>            z = v[i<span class="hljs-number">-1</span>];<br>            y = v[i] -= MX;   <br>        &#125;<br>        z = v[n<span class="hljs-number">-1</span>];<br>        y = v[<span class="hljs-number">0</span>] -= MX;<br>        sum -= DELTA;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> long btea(long* v, long n, long* k)</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">v是要加密的组元的起始地址，以32bit为单位，这里用long来实现。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">n是要加密的组元个数，正数是加密，负数是解密。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">k是密钥的起始地址，长度为4个组元，4*32=128bit。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">返回值为0或1（对应n=0，没有计算）。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">加密的结果会直接写回到v中。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><hr /><p>更新: python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br>DELTA = <span class="hljs-number">0x67616C66</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">v, n, k</span>):<br>    rounds = <span class="hljs-number">6</span> + <span class="hljs-built_in">int</span>(<span class="hljs-number">52</span> / n)<br>    <span class="hljs-built_in">sum</span> = c_uint32(<span class="hljs-number">0</span>)<br>    z = v[n - <span class="hljs-number">1</span>].value<br>    <span class="hljs-keyword">while</span> rounds &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">sum</span>.value += DELTA<br>        e = (<span class="hljs-built_in">sum</span>.value &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span><br>        p = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> p &lt; n - <span class="hljs-number">1</span>:<br>            y = v[p + <span class="hljs-number">1</span>].value<br>            v[p].value += (((z &gt;&gt; <span class="hljs-number">5</span> ^ y &lt;&lt; <span class="hljs-number">2</span>) + (y &gt;&gt; <span class="hljs-number">3</span> ^ z &lt;&lt; <span class="hljs-number">4</span>)) ^ ((<span class="hljs-built_in">sum</span>.value ^ y) + (k[(p &amp; <span class="hljs-number">3</span>) ^ e] ^ z)))<br>            z = v[p].value<br>            p += <span class="hljs-number">1</span><br>        y = v[<span class="hljs-number">0</span>].value<br>        v[n - <span class="hljs-number">1</span>].value += (((z &gt;&gt; <span class="hljs-number">5</span> ^ y &lt;&lt; <span class="hljs-number">2</span>) + (y &gt;&gt; <span class="hljs-number">3</span> ^ z &lt;&lt; <span class="hljs-number">4</span>)) ^ ((<span class="hljs-built_in">sum</span>.value ^ y) + (k[(p &amp; <span class="hljs-number">3</span>) ^ e] ^ z)))<br>        z = v[n - <span class="hljs-number">1</span>].value<br>        rounds -= <span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">v, n, k</span>):<br>    rounds = <span class="hljs-number">6</span> + <span class="hljs-built_in">int</span>(<span class="hljs-number">52</span> / n)<br>    <span class="hljs-built_in">sum</span> = c_uint32(rounds * DELTA)<br>    y = v[<span class="hljs-number">0</span>].value<br>    <span class="hljs-keyword">while</span> rounds &gt; <span class="hljs-number">0</span>:<br>        e = (<span class="hljs-built_in">sum</span>.value &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span><br>        p = n - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> p &gt; <span class="hljs-number">0</span>:<br>            z = v[p - <span class="hljs-number">1</span>].value<br>            v[p].value -= (((z &gt;&gt; <span class="hljs-number">5</span> ^ y &lt;&lt; <span class="hljs-number">2</span>) + (y &gt;&gt; <span class="hljs-number">3</span> ^ z &lt;&lt; <span class="hljs-number">4</span>)) ^ ((<span class="hljs-built_in">sum</span>.value ^ y) + (k[(p &amp; <span class="hljs-number">3</span>) ^ e] ^ z)))<br>            y = v[p].value<br>            p -= <span class="hljs-number">1</span><br>        z = v[n - <span class="hljs-number">1</span>].value<br>        v[<span class="hljs-number">0</span>].value -= (((z &gt;&gt; <span class="hljs-number">5</span> ^ y &lt;&lt; <span class="hljs-number">2</span>) + (y &gt;&gt; <span class="hljs-number">3</span> ^ z &lt;&lt; <span class="hljs-number">4</span>)) ^ ((<span class="hljs-built_in">sum</span>.value ^ y) + (k[(p &amp; <span class="hljs-number">3</span>) ^ e] ^ z)))<br>        y = v[<span class="hljs-number">0</span>].value<br>        <span class="hljs-built_in">sum</span>.value -= DELTA<br>        rounds -= <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    key = [<span class="hljs-number">0x4DB</span>, <span class="hljs-number">0xE</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x2A6</span>]<br>    enc = [<span class="hljs-number">3364074410</span>, <span class="hljs-number">133904720</span>, <span class="hljs-number">1975277913</span>, <span class="hljs-number">2058714663</span>, <span class="hljs-number">3223623680</span>, <span class="hljs-number">2913163091</span>, <span class="hljs-number">3206367551</span>, <span class="hljs-number">1846849284</span>, <span class="hljs-number">1182995140</span>]<br>    v = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc:<br>        v.append(c_uint32(i))<br>    decrypt(v, <span class="hljs-built_in">len</span>(v), key)<br>    flag = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(v)):<br>        a = v[i].value<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            flag += <span class="hljs-built_in">chr</span>(a &amp; <span class="hljs-number">0xff</span>)<br>            a &gt;&gt;= <span class="hljs-number">8</span><br>    <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="四算法标志">四、算法标志</h3><p><strong>q = 6 + 52/n;</strong></p><p><strong>e = (sum &gt;&gt; 2) &amp; 3;</strong></p>]]></content>
    
    
    <categories>
      
      <category>加密算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
